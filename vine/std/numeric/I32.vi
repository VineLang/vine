
use ops::{
  Cast,
  arithmetic::{Add, Div, Mul, Neg, Pos, Pow, Rem, Sub},
  bitwise::{And, Not, Or, Shl, Shr, Xor},
  comparison::{Eq, Ord},
};
use debug::Show;

#[builtin = "I32"]
pub type I32;

pub mod I32 {
  pub const maximum: I32 = +0x7fffffff;
  pub const minimum: I32 = -0x7fffffff;

  pub impl fork: Fork[I32] = unsafe::duplicate;
  pub impl drop: Drop[I32] = unsafe::erase;

  pub impl add: Add[I32, I32, I32] {
    fn add(a: I32, b: I32) -> I32 {
      inline_ivy! (a <- a, b <- b) -> I32 { out a = @n32_add(b out) }
    }
  }

  pub impl sub: Sub[I32, I32, I32] {
    fn sub(a: I32, b: I32) -> I32 {
      inline_ivy! (a <- a, b <- b) -> I32 { out a = @n32_sub(b out) }
    }
  }

  pub impl mul: Mul[I32, I32, I32] {
    fn mul(a: I32, b: I32) -> I32 {
      inline_ivy! (a <- a, b <- b) -> I32 { out a = @n32_mul(b out) }
    }
  }

  pub impl pow: Pow[I32, N32, I32] {
    fn pow(base: I32, exp: N32) -> I32 {
      Pow::pow_by_squaring(base, exp)
    }
  }

  pub impl div: Div[I32, I32, I32] {
    fn div(a: I32, b: I32) -> I32 {
      inline_ivy! (a <- a, b <- b) -> I32 { out a = @i32_div(b out) }
    }
  }

  pub impl rem: Rem[I32, I32, I32] {
    fn rem(a: I32, b: I32) -> I32 {
      inline_ivy! (a <- a, b <- b) -> I32 { out a = @i32_rem(b out) }
    }
  }

  pub impl pos: Pos[I32, I32] {
    fn pos(a: I32) -> I32 {
      a
    }
  }

  pub impl neg: Neg[I32, I32] {
    fn neg(a: I32) -> I32 {
      +0 - a
    }
  }

  pub impl and: And[I32, I32, I32] {
    fn and(a: I32, b: I32) -> I32 {
      inline_ivy! (a <- a, b <- b) -> I32 { out a = @n32_and(b out) }
    }
  }

  pub impl or: Or[I32, I32, I32] {
    fn or(a: I32, b: I32) -> I32 {
      inline_ivy! (a <- a, b <- b) -> I32 { out a = @n32_or(b out) }
    }
  }

  pub impl xor: Xor[I32, I32, I32] {
    fn xor(a: I32, b: I32) -> I32 {
      inline_ivy! (a <- a, b <- b) -> I32 { out a = @n32_xor(b out) }
    }
  }

  pub impl shl: Shl[I32, N32, I32] {
    fn shl(a: I32, b: N32) -> I32 {
      inline_ivy! (a <- a, b <- b) -> I32 { out a = @n32_shl(b out) }
    }
  }

  pub impl shr: Shr[I32, N32, I32] {
    fn shr(a: I32, b: N32) -> I32 {
      inline_ivy! (a <- a, b <- b) -> I32 { out a = @i32_shr(b out) }
    }
  }

  pub impl not: Not[I32, I32] {
    fn not(a: I32) -> I32 {
      inline_ivy! (a <- a) -> I32 { out a = @n32_xor(0xffffffff out) }
    }
  }

  pub fn .abs(a: I32) -> I32 {
    if a < +0 {
      -a
    } else {
      a
    }
  }

  pub impl from_n32: Cast[N32, I32] = unsafe::transmute;
  pub impl to_n32: Cast[I32, N32] = unsafe::transmute;

  pub impl to_string: Cast[I32, String] {
    fn cast(n: I32) -> String {
      when {
        n > +0 { "+{n as N32}" }
        n < +0 { "-{-n as N32}" }
        _ { "0" }
      }
    }
  }

  pub impl show: Show[I32] {
    fn show(&self: &I32) -> Show {
      Show::Literal("{self}")
    }
  }

  pub fn parse(str: String) -> Option[I32] {
    if str!.pop_front() is Some(prefix) {
      if prefix == '-' {
        N32::parse(str).map(fn? (x: N32) { -x as I32 })
      } else {
        if prefix != '+' {
          str!.push_front(prefix);
        }
        N32::parse(str).map(fn? (x: N32) { x as I32 })
      }
    } else {
      None
    }
  }

  pub impl ord: Ord[I32] {
    fn lt(&a: &I32, &b: &I32) -> Bool {
      inline_ivy! (a <- a, b <- b) -> Bool { out a = @i32_lt(b out) }
    }

    fn le(&a: &I32, &b: &I32) -> Bool {
      inline_ivy! (a <- a, b <- b) -> Bool { out a = @i32_le(b out) }
    }

    fn cmp(a: &I32, b: &I32) -> Ord {
      Ord::cmp_from_lt(a, b)
    }
  }

  pub impl eq: Eq[I32] {
    fn eq(&a: &I32, &b: &I32) -> Bool {
      inline_ivy! (a <- a, b <- b) -> Bool { out a = @n32_eq(b out) }
    }

    fn ne(&a: &I32, &b: &I32) -> Bool {
      inline_ivy! (a <- a, b <- b) -> Bool { out a = @n32_ne(b out) }
    }
  }

  pub fn .min(a: I32, b: I32) -> I32 {
    if a < b {
      a
    } else {
      b
    }
  }

  pub fn .max(a: I32, b: I32) -> I32 {
    if a > b {
      a
    } else {
      b
    }
  }
}
