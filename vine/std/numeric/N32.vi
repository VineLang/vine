
use ops::{
  Cast,
  arithmetic::{Add, Div, Mul, Neg, Pow, Rem, Sub},
  bitwise::{And, Not, Or, Shl, Shr, Xor},
  comparison::{Eq, Ord},
};
use debug::Show;

#[builtin = "N32"]
pub type N32;

pub mod N32 {
  #[duplicate]
  pub impl fork: Fork[N32] {
    fn fork(&self: &N32) -> N32 {
      unsafe::duplicate(&self)
    }
  }

  #[erase]
  pub impl drop: Drop[N32] {
    fn drop(self: N32) {
      unsafe::erase(self)
    }
  }

  pub const maximum: N32 = 0xffffffff;

  pub impl add: Add[N32, N32, N32] {
    fn add(a: N32, b: N32) -> N32 {
      inline_ivy! (a <- a, b <- b) -> N32 { out a = @n32_add(b out) }
    }
  }

  pub impl sub: Sub[N32, N32, N32] {
    fn sub(a: N32, b: N32) -> N32 {
      inline_ivy! (a <- a, b <- b) -> N32 { out a = @n32_sub(b out) }
    }
  }

  pub impl mul: Mul[N32, N32, N32] {
    fn mul(a: N32, b: N32) -> N32 {
      inline_ivy! (a <- a, b <- b) -> N32 { out a = @n32_mul(b out) }
    }
  }

  pub impl pow: Pow[N32, N32, N32] {
    fn pow(base: N32, exp: N32) -> N32 {
      Pow::pow_by_squaring(base, exp)
    }
  }

  pub impl div: Div[N32, N32, N32] {
    fn div(a: N32, b: N32) -> N32 {
      inline_ivy! (a <- a, b <- b) -> N32 { out a = @n32_div(b out) }
    }
  }

  pub impl rem: Rem[N32, N32, N32] {
    fn rem(a: N32, b: N32) -> N32 {
      inline_ivy! (a <- a, b <- b) -> N32 { out a = @n32_rem(b out) }
    }
  }

  pub impl neg: Neg[N32, N32] {
    fn neg(a: N32) -> N32 {
      inline_ivy! (a <- a) -> N32 { out a = @n32_sub$(0 out) }
    }
  }

  pub impl and: And[N32, N32, N32] {
    fn and(a: N32, b: N32) -> N32 {
      inline_ivy! (a <- a, b <- b) -> N32 { out a = @n32_and(b out) }
    }
  }

  pub impl or: Or[N32, N32, N32] {
    fn or(a: N32, b: N32) -> N32 {
      inline_ivy! (a <- a, b <- b) -> N32 { out a = @n32_or(b out) }
    }
  }

  pub impl xor: Xor[N32, N32, N32] {
    fn xor(a: N32, b: N32) -> N32 {
      inline_ivy! (a <- a, b <- b) -> N32 { out a = @n32_xor(b out) }
    }
  }

  pub impl shl: Shl[N32, N32, N32] {
    fn shl(a: N32, b: N32) -> N32 {
      inline_ivy! (a <- a, b <- b) -> N32 { out a = @n32_shl(b out) }
    }
  }

  pub impl shr: Shr[N32, N32, N32] {
    fn shr(a: N32, b: N32) -> N32 {
      inline_ivy! (a <- a, b <- b) -> N32 { out a = @n32_shr(b out) }
    }
  }

  pub impl not: Not[N32, N32] {
    fn not(a: N32) -> N32 {
      inline_ivy! (a <- a) -> N32 { out a = @n32_xor(0xffffffff out) }
    }
  }

  pub impl to_string: Cast[N32, String] {
    fn cast(n: N32) -> String {
      if n != 0 {
        let chars = [];
        while n != 0 {
          chars = ['0' + n % 10] ++ chars;
          n = n / 10;
        }
        String(chars)
      } else {
        "0"
      }
    }
  }

  pub impl show: Show[N32] {
    fn show(&n: &N32) -> Show {
      Show::Literal("{n}")
    }
  }

  pub fn parse(str: String) -> Option[N32] {
    let List(len, chars, _end) = str as List;
    unsafe::erase(_end);
    if len == 0 {
      unsafe::erase(chars);
      None
    } else {
      let num = 0;
      while len != 0 {
        let List::Buf(char, tail) = chars;
        chars = tail;
        if !('0' <= char <= '9') {
          unsafe::erase(chars);
          return None;
        }
        num *= 10;
        num += char - '0';
        len -= 1;
      }
      unsafe::erase(chars);
      Some(num)
    }
  }

  pub fn .rotate_left(a: N32, b: N32) -> N32 {
    inline_ivy! (a <- a, b <- b) -> N32 { out a = @n32_rotl(b out) }
  }

  pub fn .rotate_right(a: N32, b: N32) -> N32 {
    inline_ivy! (a <- a, b <- b) -> N32 { out a = @n32_rotr(b out) }
  }

  pub fn ascending(&a: &N32, &b: &N32) -> Bool {
    a < b
  }

  pub fn descending(&a: &N32, &b: &N32) -> Bool {
    b < a
  }

  pub impl ord: Ord[N32] {
    fn lt(&a: &N32, &b: &N32) -> Bool {
      inline_ivy! (a <- a, b <- b) -> Bool { out a = @n32_lt(b out) }
    }

    fn le(&a: &N32, &b: &N32) -> Bool {
      inline_ivy! (a <- a, b <- b) -> Bool { out a = @n32_le(b out) }
    }

    fn cmp(a: &N32, b: &N32) -> Ord {
      Ord::cmp_from_lt(a, b)
    }
  }

  pub impl eq: Eq[N32] {
    fn eq(&a: &N32, &b: &N32) -> Bool {
      inline_ivy! (a <- a, b <- b) -> Bool { out a = @n32_eq(b out) }
    }

    fn ne(&a: &N32, &b: &N32) -> Bool {
      inline_ivy! (a <- a, b <- b) -> Bool { out a = @n32_ne(b out) }
    }
  }

  pub fn .min(a: N32, b: N32) -> N32 {
    if a < b {
      a
    } else {
      b
    }
  }

  pub fn .max(a: N32, b: N32) -> N32 {
    if a > b {
      a
    } else {
      b
    }
  }

  pub fn .diff(a: N32, b: N32) -> N32 {
    if a > b {
      a - b
    } else {
      b - a
    }
  }

  pub fn .gcd(a: N32, b: N32) -> N32 {
    while a != 0 {
      (a, b) = (b % a, a)
    }
    b
  }

  pub fn .sqrt(n: N32) -> N32 {
    let r = 0x8000;
    let s = 0;
    while r != 0 {
      let m = s + r;
      if m * m <= n {
        s = m;
      }
      r >>= 1;
    }
    s
  }

  pub fn .log(n: N32, b: N32) -> N32 {
    let ~s = 0;
    let r = ~s;
    let e = 1;
    let ~m = n;
    while b < n {
      let &m = &~m;
      if b <= m {
        ~s += e;
        m /= b;
      }
      if b >= 65536 {
        break;
      }
      b *= b;
      e *= 2;
    }
    r
  }
}
