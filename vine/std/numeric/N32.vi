
use ops::{
  arithmetic::{Add, Div, Mul, Neg, Rem, Sub},
  bitwise::{And, Not, Or, Shl, Shr, Xor},
  comparison::{Eq, Ord},
};
use unicode::ToString;

#[builtin = "N32"]
pub mod N32 {
  pub const maximum: N32 = 0xffffffff;

  pub impl add: Add[N32, N32, N32] {
    fn .add(a: N32, b: N32) -> N32 {
      inline_ivy! (a <- a, b <- b) -> N32 { out a = @add(b out) }
    }
  }

  pub impl sub: Sub[N32, N32, N32] {
    fn .sub(a: N32, b: N32) -> N32 {
      inline_ivy! (a <- a, b <- b) -> N32 { out a = @sub(b out) }
    }
  }

  pub impl mul: Mul[N32, N32, N32] {
    fn .mul(a: N32, b: N32) -> N32 {
      inline_ivy! (a <- a, b <- b) -> N32 { out a = @mul(b out) }
    }
  }

  pub impl div: Div[N32, N32, N32] {
    fn .div(a: N32, b: N32) -> N32 {
      inline_ivy! (a <- a, b <- b) -> N32 { out a = @div(b out) }
    }
  }

  pub impl rem: Rem[N32, N32, N32] {
    fn .rem(a: N32, b: N32) -> N32 {
      inline_ivy! (a <- a, b <- b) -> N32 { out a = @rem(b out) }
    }
  }

  pub impl neg: Neg[N32, N32] {
    fn .neg(a: N32) -> N32 {
      inline_ivy! (a <- a) -> N32 { out a = @sub$(0 out) }
    }
  }

  pub impl and: And[N32, N32, N32] {
    fn .and(a: N32, b: N32) -> N32 {
      inline_ivy! (a <- a, b <- b) -> N32 { out a = @n32_and(b out) }
    }
  }

  pub impl or: Or[N32, N32, N32] {
    fn .or(a: N32, b: N32) -> N32 {
      inline_ivy! (a <- a, b <- b) -> N32 { out a = @n32_or(b out) }
    }
  }

  pub impl xor: Xor[N32, N32, N32] {
    fn .xor(a: N32, b: N32) -> N32 {
      inline_ivy! (a <- a, b <- b) -> N32 { out a = @n32_xor(b out) }
    }
  }

  pub impl shl: Shl[N32, N32, N32] {
    fn .shl(a: N32, b: N32) -> N32 {
      inline_ivy! (a <- a, b <- b) -> N32 { out a = @n32_shl(b out) }
    }
  }

  pub impl shr: Shr[N32, N32, N32] {
    fn .shr(a: N32, b: N32) -> N32 {
      inline_ivy! (a <- a, b <- b) -> N32 { out a = @n32_shr(b out) }
    }
  }

  pub impl not: Not[N32, N32] {
    fn .not(a: N32) -> N32 {
      inline_ivy! (a <- a) -> N32 { out a = @n32_xor(0xffffffff out) }
    }
  }

  pub impl to_string: ToString[N32] {
    fn .to_string(n: N32) -> String {
      if n != 0 {
        let chars = [];
        while n != 0 {
          chars = ['0' + n % 10] ++ chars;
          n = n / 10;
        }
        String({ chars })
      } else {
        "0"
      }
    }
  }

  pub fn parse(str: String) -> Option[N32] {
    let String({ chars: List(len, chars, _) }) = str;
    if len == 0 {
      None
    } else {
      let num = 0;
      while len != 0 {
        let List::Buf(char, tail) = chars;
        chars = tail;
        if !('0' <= char <= '9') {
          return None;
        }
        num *= 10;
        num += char - '0';
        len -= 1;
      }
      Some(num)
    }
  }

  pub fn .rotate_left(a: N32, b: N32) -> N32 {
    inline_ivy! (a <- a, b <- b) -> N32 { out a = @n32_rotl(b out) }
  }

  pub fn .rotate_right(a: N32, b: N32) -> N32 {
    inline_ivy! (a <- a, b <- b) -> N32 { out a = @n32_rotr(b out) }
  }

  pub fn ascending(&a: &N32, &b: &N32) -> Bool {
    a < b
  }

  pub fn descending(&a: &N32, &b: &N32) -> Bool {
    b < a
  }

  pub impl ord: Ord[N32] {
    fn .lt(&a: &N32, &b: &N32) -> Bool {
      inline_ivy! (a <- a, b <- b) -> Bool { out a = @lt(b out) }
    }

    fn .le(&a: &N32, &b: &N32) -> Bool {
      inline_ivy! (a <- a, b <- b) -> Bool { out a = @lt(b out) }
    }

    const cmp: fn(&N32, &N32) -> Ord = Ord::cmp_from_lt[N32];
  }

  pub impl eq: Eq[N32] {
    fn .eq(&a: &N32, &b: &N32) -> Bool {
      inline_ivy! (a <- a, b <- b) -> Bool { out a = @eq(b out) }
    }
  }

  pub fn .min(a: N32, b: N32) -> N32 {
    if a < b {
      a
    } else {
      b
    }
  }

  pub fn .max(a: N32, b: N32) -> N32 {
    if a > b {
      a
    } else {
      b
    }
  }

  pub fn .diff(a: N32, b: N32) -> N32 {
    if a > b {
      a - b
    } else {
      b - a
    }
  }

  pub fn .gcd(a: N32, b: N32) -> N32 {
    while a != 0 {
      (a, b) = (b % a, a)
    }
    b
  }

  pub fn .sqrt(n: N32) -> N32 {
    let r = 0x8000;
    let s = 0;
    while r != 0 {
      let m = s + r;
      if m * m <= n {
        s = m;
      }
      r >>= 1;
    }
    s
  }

  pub fn .pow(b: N32, e: N32) -> N32 {
    let n = 1;
    while e != 0 {
      if e % 2 != 0 {
        n *= b;
      }
      b *= b;
      e /= 2;
    }
    n
  }

  pub fn .log(n: N32, b: N32) -> N32 {
    let ~s = 0;
    let r = ~s;
    let e = 1;
    let ~m = n;
    while b < n {
      let &m = &~m;
      if b <= m {
        ~s += e;
        m /= b;
      }
      if b >= 65536 {
        break;
      }
      b *= b;
      e *= 2;
    }
    r
  }
}
