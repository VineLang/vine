
use ops::{
  arithmetic::{Add, Div, Mul, Rem, Sub},
  bitwise::{And, Or, Shl, Shr, Xor},
  comparison::{Eq, Ord},
};
use unicode::ToString;

pub struct N64(N32, N32);

pub mod N64 {
  pub const zero: N64 = N64(0, 0);
  pub const one: N64 = N64(1, 0);
  pub const maximum: N64 = N64(N32::maximum, N32::maximum);

  pub fn from_n32(val: N32) -> N64 {
    N64(val, 0)
  }

  pub fn .to_n32(N64(lo, hi)) -> N32 {
    lo
  }

  pub impl add: Add[N64, N64, N64] {
    fn .add(a: N64, b: N64) -> N64 {
      inline_ivy! (a <- a, b <- b) -> N64 {
        tup(l h)
        a = tup(dup(al0 al1) ah)
        b = tup(dup(bl0 bl1) bh)
        al0 = @add(bl0 l)
        al1 = @n32_add_high(bl1 c)
        ah = @add(bh @add(c h))
      }
    }
  }

  pub impl sub: Sub[N64, N64, N64] {
    fn .sub(a: N64, b: N64) -> N64 {
      inline_ivy! (a <- a, b <- b) -> N64 {
        tup(l h)
        a = tup(dup(al0 al1) ah)
        b = tup(dup(bl0 bl1) bh)
        al0 = @sub(bl0 l)
        al1 = @lt(bl1 c)
        ah = @sub(bh @sub(c h))
      }
    }
  }

  pub impl mul: Mul[N64, N64, N64] {
    fn .mul(a: N64, b: N64) -> N64 {
      inline_ivy! (a <- a, b <- b) -> N64 {
        tup(l h)
        a = tup(dup(al0 dup(al1 al2)) ah)
        b = tup(dup(bl0 dup(bl1 bl2)) bh)
        al0 = @mul(bl0 l)
        al1 = @n32_mul_high(bl1 ll)
        al2 = @mul(bh lh)
        bl2 = @mul(ah hl)
        lh = @add(hl @add(ll h))
      }
    }
  }

  pub fn .mul_n32_n32(a: N32, b: N32) -> N64 {
    inline_ivy! (a <- a, b <- b) -> N64 {
      tup(l h)
      a = dup(a0 a1)
      b = dup(b0 b1)
      a0 = @mul(b0 l)
      a1 = @n32_mul_high(b1 h)
    }
  }

  pub impl div_n32: Div[N64, N32, N64] {
    fn .div(a: N64, b: N32) -> N64 {
      a.div_rem_n32(b).0
    }
  }

  pub impl rem_n32: Rem[N64, N32, N32] {
    fn .rem(a: N64, b: N32) -> N32 {
      a.div_rem_n32(b).1
    }
  }

  pub fn .div_rem_n32(N64(al, ah), d: N32) -> (N64, N32) {
    let qh = ah / d;
    ah %= d;
    if ah > d {
      qh = ah / d;
      ah %= d;
    }
    let ql = 0;
    while ah != 0 {
      let m = (N32::maximum / d) * ah;
      ql += m;
      let N64(l, h) = N64(al, ah) - N64::mul_n32_n32(m, d);
      al = l;
      ah = h;
    }
    ql += al / d;
    al %= d;
    (N64(ql, qh), al)
  }

  pub impl and: And[N64, N64, N64] {
    fn .and(N64(al, ah), N64(bl, bh)) -> N64 {
      N64(al & bl, ah & bh)
    }
  }

  pub impl or: Or[N64, N64, N64] {
    fn .or(N64(al, ah), N64(bl, bh)) -> N64 {
      N64(al | bl, ah | bh)
    }
  }

  pub impl xor: Xor[N64, N64, N64] {
    fn .xor(N64(al, ah), N64(bl, bh)) -> N64 {
      N64(al ^ bl, ah ^ bh)
    }
  }

  pub impl shl: Shl[N64, N32, N64] {
    fn .shl(N64(al, ah), bits: N32) -> N64 {
      if bits & 32 != 0 {
        N64(0, al << bits)
      } else {
        N64(al << bits, ah << bits | al >> -bits)
      }
    }
  }

  pub impl shr: Shr[N64, N32, N64] {
    fn .shr(N64(al, ah), bits: N32) -> N64 {
      if bits & 32 != 0 {
        N64(ah >> bits, 0)
      } else {
        N64(al >> bits | ah << -bits, ah >> bits)
      }
    }
  }

  pub impl eq: Eq[N64] {
    fn .eq(&N64(al, ah), &N64(bl, bh)) -> Bool {
      al == bl && ah == bh
    }

    fn .ne(&N64(al, ah), &N64(bl, bh)) -> Bool {
      al != bl && ah != bh
    }
  }

  pub impl ord: Ord[N64] {
    fn .lt(&N64(al, ah), &N64(bl, bh)) -> Bool {
      ah < bh || ah == bh && al < bl
    }

    fn .le(&N64(al, ah), &N64(bl, bh)) -> Bool {
      ah < bh || ah == bh && al <= bl
    }

    const cmp: fn(&N64, &N64) -> Ord = Ord::cmp_from_lt[N64];
  }

  pub fn .min(a: N64, b: N64) -> N64 {
    if a < b {
      a
    } else {
      b
    }
  }

  pub fn .max(a: N64, b: N64) -> N64 {
    if a > b {
      a
    } else {
      b
    }
  }

  pub fn parse(str: String) -> Option[N64] {
    let String({ chars: List(len, chars, _) }) = str;
    if len == 0 {
      None
    } else {
      let num = N64::from_n32(0);
      while len != 0 {
        let List::Buf(char, tail) = chars;
        chars = tail;
        if !('0' <= char <= '9') {
          return None;
        }
        num *= N64::from_n32(10);
        num += N64::from_n32(char - '0');
        len -= 1;
      }
      Some(num)
    }
  }

  pub impl to_string: ToString[N64] {
    fn .to_string(n: N64) -> String {
      if n != N64::zero {
        let str = "";
        while n != N64::zero {
          let (q, r) = N64::div_rem_n32(n, 10);
          str = String({ chars: ['0' + r] }) ++ str;
          n = q;
        }
        str
      } else {
        "0"
      }
    }
  }

  pub fn .pow_n32(b: N64, e: N32) -> N64 {
    let n = N64::one;
    while e != 0 {
      if e % 2 != 0 {
        n *= b;
      }
      b *= b;
      e /= 2;
    }
    n
  }

  pub fn .log_n32(n: N64, b: N32) -> N32 {
    let l = 0;
    while N64::from_n32(b) < n {
      l += 1;
      let (d, _) = n.div_rem_n32(b);
      n = d;
    }
    l
  }

  pub fn diff(a: N64, b: N64) -> N64 {
    if a > b {
      a - b
    } else {
      b - a
    }
  }
}
