
use ops::{Cast, arithmetic::{Add, Div, Mul, Neg, Pow, Rem, Sub}, comparison::{Eq, Le, Lt}};
use debug::Show;

#[builtin = "F32"]
pub type F32;

pub mod F32 {
  pub const nan: F32 = inline_ivy! () -> F32 { +NaN };
  pub const inf: F32 = inline_ivy! () -> F32 { +inf };
  pub const neg_inf: F32 = inline_ivy! () -> F32 { -inf };

  pub impl fork: Fork[F32] {
    fn fork(&self: &F32) -> F32 {
      unsafe::copy(&self)
    }
  }

  pub impl drop: Drop[F32] {
    fn drop(self: F32) {
      unsafe::erase(self)
    }
  }

  pub impl add: Add[F32, F32, F32] {
    fn add(a: F32, b: F32) -> F32 {
      inline_ivy! (a <- a, b <- b) -> F32 { out a = @f32_add(b out) }
    }
  }

  pub impl sub: Sub[F32, F32, F32] {
    fn sub(a: F32, b: F32) -> F32 {
      inline_ivy! (a <- a, b <- b) -> F32 { out a = @f32_sub(b out) }
    }
  }

  pub impl mul: Mul[F32, F32, F32] {
    fn mul(a: F32, b: F32) -> F32 {
      inline_ivy! (a <- a, b <- b) -> F32 { out a = @f32_mul(b out) }
    }
  }

  pub impl pow_n32: Pow[F32, N32, F32] {
    fn pow(base: F32, exp: N32) -> F32 {
      Pow::pow_by_squaring[F32](base, exp)
    }
  }

  pub impl pow_i32: Pow[F32, I32, F32] {
    fn pow(base: F32, exp: I32) -> F32 {
      if exp < +0 {
        1.0 / (base ** (-exp as N32))
      } else {
        base ** (exp as N32)
      }
    }
  }

  pub impl div: Div[F32, F32, F32] {
    fn div(a: F32, b: F32) -> F32 {
      inline_ivy! (a <- a, b <- b) -> F32 { out a = @f32_div(b out) }
    }
  }

  pub impl rem: Rem[F32, F32, F32] {
    fn rem(a: F32, b: F32) -> F32 {
      inline_ivy! (a <- a, b <- b) -> F32 { out a = @f32_rem(b out) }
    }
  }

  pub impl neg: Neg[F32, F32] {
    fn neg(a: F32) -> F32 {
      inline_ivy! (a <- a) -> F32 { out a = @f32_sub$(-0.0 out) }
    }
  }

  pub impl eq: Eq[F32] {
    fn eq(&a: &F32, &b: &F32) -> Bool {
      inline_ivy! (a <- a, b <- b) -> Bool { out a = @f32_eq(b out) }
    }

    fn ne(&a: &F32, &b: &F32) -> Bool {
      inline_ivy! (a <- a, b <- b) -> Bool { out a = @f32_ne(b out) }
    }
  }

  pub impl lt: Lt[F32] {
    fn lt(&a: &F32, &b: &F32) -> Bool {
      inline_ivy! (a <- a, b <- b) -> Bool { out a = @f32_lt(b out) }
    }
  }

  pub impl le: Le[F32] {
    fn le(&a: &F32, &b: &F32) -> Bool {
      inline_ivy! (a <- a, b <- b) -> Bool { out a = @f32_le(b out) }
    }
  }

  pub impl from_n32: Cast[N32, F32] {
    fn cast(n: N32) -> F32 {
      inline_ivy! (n <- n) -> F32 { out n = @n32_to_f32(0 out) }
    }
  }

  pub impl to_n32: Cast[F32, N32] {
    fn cast(n: F32) -> N32 {
      inline_ivy! (n <- n) -> N32 { out n = @f32_to_n32(0 out) }
    }
  }

  pub fn .to_bits(n: F32) -> N32 {
    inline_ivy! (n <- n) -> N32 { out n = @f32_to_bits(0 out) }
  }

  pub fn .from_bits(n: N32) -> F32 {
    inline_ivy! (n <- n) -> F32 { out n = @f32_from_bits(0 out) }
  }

  pub fn .is_nan(f: F32) -> Bool {
    f != f
  }

  pub impl to_string: Cast[F32, String] {
    fn cast(f: F32) -> String {
      if f.is_nan() {
        "NaN"
      } else if f == F32::inf {
        "+inf"
      } else if f == F32::neg_inf {
        "-inf"
      } else if f == 0.0 {
        if 1.0 / f > 0.0 {
          "+0.0"
        } else {
          "-0.0"
        }
      } else {
        let sign = if f < 0.0 {
          f = -f;
          "-"
        } else {
          "+"
        };
        let exp = if f > 1.0e+5 {
          let exp = 0;
          while f >= 10.0 {
            f /= 10.0;
            exp += 1;
          }
          "e+{exp}"
        } else if f < 1.0e-5 {
          let exp = 0;
          while f <= 1.0 {
            f *= 10.0;
            exp += 1;
          }
          "e-{exp}"
        } else {
          ""
        };
        let int = f as N32;
        f -= int as F32;
        let dec = ((f + 1.0) * 1.0e+5) as N32 as String;
        dec!.at(0).unwrap().* = '.';
        "{sign}{int}{dec}{exp}"
      }
    }
  }

  pub impl show: Show[F32] {
    fn show(&self: &F32) -> Show {
      Show::Literal("{self}")
    }
  }

  // This is not a IEEE-754 compliant parser.
  // * For large and small absolute values, the result is not necessarily the closest representable value.
  // * For strings with 10 or more significant digits, the result is likely completely wrong.
  // TODO: implement fall-back parsing with arbitrary precision
  // TODO: implement Eisel-Lemire algorithm for fast parsing of most cases
  pub fn parse(str: String) -> Option[F32] {
    let prefix = match str!.pop_front() {
      Some(char) { char }
      None { return None }
    };
    let is_negative = if prefix == '-' {
      true
    } else if prefix == '+' {
      false
    } else {
      str!.push_front(prefix);
      false
    };

    let value = if str == "NaN" || str == "nan" {
      F32::nan
    } else if str == "inf" {
      F32::inf
    } else {
      let mantissa = 0;
      let next_char = str!.pop_front();
      let num_digits = 0;
      while next_char is Some(char) && ('0' <= char <= '9') {
        mantissa = mantissa * 10 + (char - '0') as N32;
        num_digits += 1;
        next_char = str!.pop_front();
      }
      let exponent = +0;
      if next_char is Some(char) && char == '.' {
        next_char = str!.pop_front();
        while next_char is Some(char) && ('0' <= char <= '9') {
          mantissa = mantissa * 10 + (char - '0') as N32;
          num_digits += 1;
          exponent -= +1;
          next_char = str!.pop_front();
        }
      }
      if num_digits == 0 {
        return None;
      }
      if next_char is Some(char) && (char == 'e' || char == 'E') {
        match I32::parse(str) {
          Some(exp) {
            exponent += exp;
          }
          None {
            return None;
          }
        }
      } else if next_char is Some(_) {
        return None;
      }
      if exponent < +0 {
        mantissa as F32 / (10.0 ** (-exponent as N32))
      } else {
        mantissa as F32 * (10.0 ** exponent as N32)
      }
    };

    if is_negative {
      Some(-value)
    } else {
      Some(value)
    }
  }
}
