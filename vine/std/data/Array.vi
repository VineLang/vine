
use std::ops::Cast;

pub struct Array[T]((N32, Node[T]));

pub mod Array {
  pub const empty[T]: Array[T] = Array(0, unsafe::eraser);

  pub fn single[T](value: T) -> Array[T] {
    Array(1, value as Node)
  }

  pub fn new[T*](len: N32, value: T) -> Array[T] {
    if len == 0 {
      Array::empty
    } else {
      Array(len, Node::new(len, value))
    }
  }

  pub impl from_list[T]: Cast[List[T], Array[T]] {
    fn cast(List[T](len, buf, _end)) -> Array[T] {
      unsafe::erase(_end);
      let array = Array::from_fn(
        len,
        fn* () {
          let List::Buf(head, tail) = buf;
          buf = tail;
          head
        },
      );
      unsafe::erase(buf);
      array
    }
  }

  pub impl to_list[T]: Cast[Array[T], List[T]] {
    fn cast(self: Array[T]) -> List[T] {
      let end;
      List(self.len(), self.fold_back(~end, fn* (a, b) { List::Buf(b, a) }), end)
    }
  }

  pub fn from_fn[T, F*; fn F() -> T](len: N32, f: F) -> Array[T] {
    if len == 0 {
      Array::empty
    } else {
      let ~ins;
      let (node, outs) = Node::unzip_with(len, ~ins, fn* (f: F) { (f(), f) });
      let outs = Array(len, outs);
      outs.pop_back().unwrap();
      outs.push_front(f);
      let Array(_, outs) = outs;
      ~ins = outs;
      Array(len, node)
    }
  }

  pub fn .for_each[T, F*; fn F(T)](self: Array[T], f: F) {
    self.fold_front(
      f,
      fn* (f: F, value) {
        f(value);
        f
      },
    );
  }

  pub fn .fold_front[T, U, F*; fn F(U, T) -> U](Array[T](len, node), initial: U, f: F) -> U {
    if len == 0 {
      unsafe::erase(node);
      initial
    } else {
      let ~ins;
      let zipped = Array(len, Node::zip_with(len, ~ins, node, f));
      let out = zipped.pop_back().unwrap();
      zipped.push_front(initial);
      let Array(_, node) = zipped;
      ~ins = node;
      out
    }
  }

  pub fn .fold_back[T, U, F*; fn F(U, T) -> U](Array[T](len, node), initial: U, f: F) -> U {
    if len == 0 {
      unsafe::erase(node);
      initial
    } else {
      let ~ins;
      let zipped = Array(len, Node::zip_with(len, ~ins, node, f));
      let out = zipped.pop_front().unwrap();
      zipped.push_back(initial);
      let Array(_, node) = zipped;
      ~ins = node;
      out
    }
  }

  pub fn .len[T](&self: &Array[T]) -> N32 {
    self.0
  }

  pub fn .at[T](&Array[T](len, *node), i: N32) -> Option[&T] {
    if i >= len {
      let &_ = node;
      return None;
    }
    let size = len;
    while size > 1 {
      (node, size) = Node::half(node, size, i % 2);
      i /= 2;
    }
    Some(node as &T)
  }

  pub fn .get[T+](&self: &Array[T], i: N32) -> Option[T] {
    self.at(i).as_forked()
  }

  pub fn .push_back[T](&Array[T](len, *node), value: T) {
    if len == 0 {
      let &node = node;
      unsafe::erase(node);
      node = value as Node;
    } else {
      let size = len;
      while size > 1 {
        (node, size) = Node::half(node, size, size % 2);
      }
      let &node = node;
      node = Node(node, value as Node);
    }
    len += 1;
  }

  pub fn .push_front[T](&Array[T](len, *node), value: T) {
    if len == 0 {
      let &node = node;
      unsafe::erase(node);
      node = value as Node;
    } else {
      let size = len;
      while size > 1 {
        let &Node(left, right) = node;
        (left, right) = (right, left);
        node = &left;
        size = size / 2;
      }
      let &node = node;
      node = Node(value as Node, node);
    }
    len += 1;
  }

  pub fn .pop_back[T](&Array[T](len, *node)) -> Option[T] {
    when {
      len == 0 { None }
      len == 1 {
        len = 0;
        Some(unsafe::move(node) as T)
      }
      _ {
        let size = len;
        len -= 1;
        loop {
          let parity = (size - 1) % 2;
          let &parent = node;
          (node, size) = Node::half(&parent, size, parity);
          if size != 1 {
            continue;
          }
          let value = unsafe::move(node) as T;
          let Node(left, right) = parent;
          parent = if parity == 0 {
            unsafe::erase(left);
            right
          } else {
            unsafe::erase(right);
            left
          };
          Some(value)
        }
      }
    }
  }

  pub fn .pop_front[T](&Array[T](len, *node)) -> Option[T] {
    when {
      len == 0 { None }
      len == 1 {
        len = 0;
        Some(unsafe::move(node) as T)
      }
      _ {
        let size = len;
        len -= 1;
        loop {
          let &parent = node;
          let &Node(left, right) = &parent;
          (left, right) = (right, left);
          node = &right;
          size = (size + 1) / 2;
          if size != 1 {
            continue;
          }
          let value = unsafe::move(node) as T;
          unsafe::erase(parent);
          parent = unsafe::move(&left);
          Some(value)
        }
      }
    }
  }

  pub fn .reverse[T](&Array[T](len, node)) {
    node.reverse(len)
  }

  pub fn .reversed[T](self: Array[T]) -> Array[T] {
    self.reverse();
    self
  }

  #[duplicate]
  pub impl fork[T+]: Fork[Array[T]] {
    fn fork(&Array[T](len, node)) -> Array[T] {
      if len == 0 {
        Array::empty
      } else {
        Array(len, Node::fork(len, &node))
      }
    }
  }

  #[erase]
  pub impl drop[T?]: Drop[Array[T]] {
    fn drop(Array[T](len, node)) {
      if len == 0 {
        unsafe::erase(node)
      } else {
        Node::drop(len, node)
      }
    }
  }
}

struct Node[T]((Node[T], Node[T]));

mod Node {
  pub impl leaf_to_node[T]: Cast[T, Node[T]] {
    fn cast(value: T) -> Node[T] {
      inline_ivy! (x <- value) -> Node[T] { x }
    }
  }

  pub impl node_to_leaf[T]: Cast[Node[T], T] {
    fn cast(value: Node[T]) -> T {
      inline_ivy! (x <- value) -> T { x }
    }
  }

  pub fn new[T+](len: N32, value: T) -> Node[T] {
    if len == 1 {
      value as Node
    } else {
      Node(Node::new((len + 1) / 2, value), Node::new(len / 2, value))
    }
  }

  pub fn .half[T](&Node(l, r): &Node[T], len: N32, x: N32) -> (&Node[T], N32) {
    if x == 0 {
      (&l, (len + 1) / 2)
    } else {
      (&r, len / 2)
    }
  }

  pub fn .swap[T](&Node(l, r): &Node[T], x: N32) {
    if x == 0 {
      (l, r) = (r, l);
    }
  }

  pub fn .reverse[T](&self: &Node[T], len: N32) {
    if len > 1 {
      let &Node(left, right) = &self;
      if len % 2 == 0 {
        (left, right) = (right, left);
      }
      left.reverse((len + 1) / 2);
      right.reverse(len / 2);
    }
  }

  pub fn zip_with[T, U, V, F+; fn F(T, U) -> V](len: N32, x: Node[T], y: Node[U], f: F) -> Node[V] {
    if len == 1 {
      f(x as T, y as U) as Node
    } else {
      let Node(xl, xr) = x;
      let Node(yl, yr) = y;
      Node(zip_with((len + 1) / 2, xl, yl, f), zip_with(len / 2, xr, yr, f))
    }
  }

  pub fn unzip_with[T, U, V, F+; fn F(T) -> (U, V)](len: N32, x: Node[T], f: F) -> (
    Node[U],
    Node[V],
  ) {
    if len == 1 {
      let (u, v) = f(x as T);
      (u as Node, v as Node)
    } else {
      let Node(l, r) = x;
      let (lx, ly) = unzip_with((len + 1) / 2, l, f);
      let (rx, ry) = unzip_with(len / 2, r, f);
      (Node(lx, rx), Node(ly, ry))
    }
  }

  pub fn fork[T+](len: N32, &node: &Node[T]) -> Node[T] {
    if len == 1 {
      (&node).as[&T].*.fork().as[Node[T]]
    } else {
      let &Node(l, r) = &node;
      Node(fork((len + 1) / 2, &l), fork(len / 2, &r))
    }
  }

  pub fn drop[T?](len: N32, node: Node[T]) {
    if len == 1 {
      _ = node as T;
    } else {
      let Node(l, r) = node;
      drop((len + 1) / 2, l);
      drop(len / 2, r);
    }
  }
}
