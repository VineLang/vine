
use data::Iterator;
use debug::Show;
use ops::{Cast, comparison::Ord};

pub struct Map[K, V]((N32, MapData[K, V]));

type MapData[K, V] = (Map[K, V], (K, V), Map[K, V]);

pub mod Map {
  pub const empty[K, V]: Map[K, V] = Map(0, unsafe::eraser);

  fn new[K, V](left: Map[K, V], entry: (K, V), right: Map[K, V]) -> Map[K, V] {
    Map(left.len() + right.len() + 1, (left, entry, right))
  }

  pub impl from_list[K?, V?; Ord[K]]: Cast[List[(K, V)], Map[K, V]] {
    fn cast(entries: List[(K, V)]) -> Map[K, V] {
      let map = Map::empty[K, V];
      for (key, value) in entries.into_iter() {
        map.insert(key, value);
      }
      map
    }
  }

  pub fn .clear[K?, V?](&self: &Map[K, V]) {
    self = Map::empty;
  }

  pub fn .len[K, V](&Map[K, V](len, _)) -> N32 {
    len
  }

  pub fn .insert[K?, V; Ord[K]](&Map[K, V](len, data), key: K, value: V) -> Option[V] {
    if len == 0 {
      len = 1;
      unsafe::erase(data);
      data = (empty, (key, value), empty);
      None
    } else {
      let &(left, (cur_key, cur_value), right) = &data;
      let old;
      match key.cmp(&cur_key) {
        Ord::Lt {
          old = left.insert(key, value);
          len = size(&data);
          balance_right(&data);
        }
        Ord::Eq {
          old = Some(cur_value);
          cur_key = key;
          cur_value = value;
        }
        Ord::Gt {
          old = right.insert(key, value);
          len = size(&data);
          balance_left(&data);
        }
      }
      old
    }
  }

  pub fn .at[K, V; Ord[K]](&Map[K, V](len, data), &key: &K) -> Option[&V] {
    if len == 0 {
      None
    } else {
      let &(left, (cur_key, cur_value), right) = &data;
      match key.cmp(&cur_key) {
        Ord::Lt { left.at(&key) }
        Ord::Eq { Some(&cur_value) }
        Ord::Gt { right.at(&key) }
      }
    }
  }

  pub fn .get[K, V+; Ord[K]](&self: &Map[K, V], key: &K) -> Option[V] {
    self.at(key).as_forked()
  }

  pub fn .at_or_insert[K?, V?; Ord[K]](&self: &Map[K, V], key: K, value: V) -> &V {
    let ~insert;
    let old = self.insert(key, ~insert);
    let value = old.unwrap_or(value);
    let ref = &value;
    ~insert = value;
    ref
  }

  pub fn .get_or_insert[K?, V*; Ord[K]](&self: &Map[K, V], key: K, value: V) -> V {
    self.at_or_insert(key, value).*
  }

  pub fn .at_le[K, V; Ord[K]](&Map[K, V](len, data), &key: &K) -> Option[&(K, V)] {
    if len == 0 {
      None
    } else {
      let &(left, (cur_key, cur_value), right) = &data;
      match key.cmp(&cur_key) {
        Ord::Lt { left.at_le(&key) }
        Ord::Eq { Some(&(cur_key, cur_value)) }
        Ord::Gt {
          if right.at_le(&key) is Some(entry) {
            Some(entry)
          } else {
            Some(&(cur_key, cur_value))
          }
        }
      }
    }
  }

  pub fn .get_le[K+, V+; Ord[K]](&self: &Map[K, V], &key: &K) -> Option[(K, V)] {
    self.at_le(&key).as_forked()
  }

  pub fn .at_ge[K, V; Ord[K]](&Map[K, V](len, data), &key: &K) -> Option[&(K, V)] {
    if len == 0 {
      None
    } else {
      let &(left, (cur_key, cur_value), right) = &data;
      match key.cmp(&cur_key) {
        Ord::Lt {
          if left.at_ge(&key) is Some(entry) {
            Some(entry)
          } else {
            Some(&(cur_key, cur_value))
          }
        }
        Ord::Eq { Some(&(cur_key, cur_value)) }
        Ord::Gt { right.at_ge(&key) }
      }
    }
  }

  pub fn .get_ge[K+, V+; Ord[K]](&self: &Map[K, V], &key: &K) -> Option[(K, V)] {
    self.at_ge(&key).as_forked()
  }

  pub fn .remove[K, V; Ord[K]](&Map[K, V](len, data), &key: &K) -> Option[V] {
    if len == 0 {
      None
    } else {
      let &(left, (cur_key, cur_value), right) = &data;
      let old;
      match key.cmp(&cur_key) {
        Ord::Lt {
          old = left.remove(&key);
          len = Map::size(&data);
          balance_left(&data);
        }
        Ord::Eq {
          old = Some(unsafe::move(&cur_value));
          len -= 1;
          unsafe::erase(data);
          data = merge_balanced(unsafe::move(&left), unsafe::move(&right));
        }
        Ord::Gt {
          old = right.remove(&key);
          len = Map::size(&data);
          balance_right(&data);
        }
      }
      old
    }
  }

  pub fn .remove_min[K, V; Ord[K]](&self: &Map[K, V]) -> Option[(K, V)] {
    if self.len() == 0 {
      None
    } else {
      Some(self._remove_min())
    }
  }

  pub fn .remove_max[K, V; Ord[K]](&self: &Map[K, V]) -> Option[(K, V)] {
    if self.len() == 0 {
      None
    } else {
      Some(self._remove_max())
    }
  }

  fn ._remove_min[K, V](&Map[K, V](len, data)) -> (K, V) {
    len -= 1;
    let &(left, entry, right) = &data;
    if left.len() == 0 {
      let Map(_, right) = unsafe::move(&right);
      unsafe::erase(data);
      data = right;
      unsafe::move(&entry)
    } else {
      let min = left._remove_min();
      balance_left(&data);
      min
    }
  }

  fn ._remove_max[K, V](&Map[K, V](len, data)) -> (K, V) {
    len -= 1;
    let &(left, entry, right) = &data;
    if right.len() == 0 {
      let Map(_, left) = unsafe::move(&left);
      unsafe::erase(data);
      data = left;
      unsafe::move(&entry)
    } else {
      let max = right._remove_max();
      balance_right(&data);
      max
    }
  }

  pub fn .contains_key[K, V; Ord[K]](&Map[K, V](len, data), &key: &K) -> Bool {
    if len == 0 {
      false
    } else {
      let &(left, (cur_key, cur_value), right) = &data;
      match key.cmp(&cur_key) {
        Ord::Lt { left.contains_key(&key) }
        Ord::Eq { true }
        Ord::Gt { right.contains_key(&key) }
      }
    }
  }

  pub fn .map_values[K, V, U, F*; Ord[K], fn F(V) -> U](Map[K, V](len, data), f: F) -> Map[K, U] {
    if len == 0 {
      unsafe::erase(data);
      Map::empty[K, U]
    } else {
      let (left, (key, value), right) = data;
      Map(len, (left.map_values(f), (key, f(value)), right.map_values(f)))
    }
  }

  pub fn .iter[K, V](&self: &Map[K, V]) -> Iter[K, V] {
    Iter(&self, [])
  }

  pub struct Iter[K, V]((&Map[K, V], List[&((K, V), Map[K, V])]));

  pub mod Iter {
    pub impl iterator[K, V]: Iterator[Iter[K, V], &(K, V)] {
      fn advance(Iter[K, V](node, stack)) -> Option[(&(K, V), Iter[K, V])] {
        loop {
          let &Map(len, data) = node;
          if len == 0 {
            break;
          }
          let &(left, entry, right) = &data;
          stack.push_front(&(entry, right));
          node = &left;
          continue;
        }
        if stack.head_tail() is Some(&(entry, node), stack) {
          Some(&entry, Iter(&node, stack))
        } else {
          None
        }
      }
    }

    pub impl fork[K, V]: Fork[Iter[K, V]] {
      fn fork(&Iter[K, V](node, stack)) -> Iter[K, V] {
        Iter(node.fork(), stack.fork())
      }
    }

    pub impl drop[K, V]: Drop[Iter[K, V]] {
      fn drop(Iter[K, V](_)) {}
    }
  }

  pub fn .into_iter[K, V](self: Map[K, V]) -> IntoIter[K, V] {
    IntoIter(self, [])
  }

  pub struct IntoIter[K, V]((Map[K, V], List[((K, V), Map[K, V])]));

  pub mod IntoIter {
    pub impl iterator[K, V]: Iterator[IntoIter[K, V], (K, V)] {
      fn advance(IntoIter[K, V](node, stack)) -> Option[((K, V), IntoIter[K, V])] {
        loop {
          let Map(len, data) = node;
          if len == 0 {
            unsafe::erase(data);
            break;
          }
          let (left, entry, right) = data;
          stack.push_front((entry, right));
          node = left;
          continue;
        }
        if stack.head_tail() is Some((entry, node), stack) {
          Some(entry, IntoIter(node, stack))
        } else {
          None
        }
      }
    }

    pub impl fork[K+, V+]: Fork[IntoIter[K, V]] {
      fn fork(&IntoIter[K, V](node, stack)) -> IntoIter[K, V] {
        IntoIter(node.fork(), stack.fork())
      }
    }

    pub impl drop[K?, V?]: Drop[IntoIter[K, V]] {
      fn drop(IntoIter[K, V](_)) {}
    }
  }

  pub impl to_list[K, V]: Cast[Map[K, V], List[(K, V)]] {
    fn cast(Map[K, V](len, data)) -> List[(K, V)] {
      if len == 0 {
        unsafe::erase(data);
        []
      } else {
        let (left, entry, right) = data;
        left as List ++ [entry] ++ right as List
      }
    }
  }

  pub impl show[K, V; Show[K], Show[V]]: Show[Map[K, V]] {
    fn show(&self: &Map[K, V]) -> Show {
      let entries = [];
      for &(key, value) in self.iter() {
        entries.push_back((key.show(), value.show()));
      }
      Show::Constructor("Map", Show::Object(entries))
    }
  }

  // TODO(#118): make private once tests can be written inline
  pub fn .balanced[K, V](&Map[K, V](len, data)) -> Bool {
    if len == 0 {
      true
    } else {
      let &(left, _, right) = &data;
      let x = is_balanced(&left, &right) && is_balanced(&right, &left);
      x && left.balanced() && right.balanced()
    }
  }

  #[duplicate]
  pub impl fork[K+, V+]: Fork[Map[K, V]] {
    fn fork(&Map[K, V](len, data)) -> Map[K, V] {
      if len == 0 {
        Map::empty
      } else {
        Map(len, data.fork())
      }
    }
  }

  #[erase]
  pub impl drop[K?, V?]: Drop[Map[K, V]] {
    fn drop(Map[K, V](len, data)) {
      if len == 0 {
        unsafe::erase(data);
      } else {
        _ = data;
      }
    }
  }
}

fn balance_left[K, V](&data: &MapData[K, V]) {
  let (l, e, r) = data;
  data = if is_balanced(&l, &r) {
    (l, e, r)
  } else {
    let Map(_, (rl, re, rr)) = r;
    if is_single(&rl, &rr) {
      (Map::new(l, e, rl), re, rr)
    } else {
      let Map(_, (rll, rle, rlr)) = rl;
      (Map::new(l, e, rll), rle, Map::new(rlr, re, rr))
    }
  }
}

fn balance_right[K, V](&data: &MapData[K, V]) {
  let (l, e, r) = data;
  data = if is_balanced(&r, &l) {
    (l, e, r)
  } else {
    let Map(_, (ll, le, lr)) = l;
    if is_single(&lr, &ll) {
      (ll, le, Map::new(lr, e, r))
    } else {
      let Map(_, (lrl, lre, lrr)) = lr;
      (Map::new(ll, le, lrl), lre, Map::new(lrr, e, r))
    }
  }
}

fn merge_balanced[K, V](left: Map[K, V], right: Map[K, V]) -> MapData[K, V] {
  when {
    left.len() == 0 {
      unsafe::erase(left);
      let Map(_, data) = right;
      data
    }
    right.len() == 0 {
      let Map(_, data) = left;
      unsafe::erase(right);
      data
    }
    left.len() > right.len() {
      let entry = left._remove_max();
      (left, entry, right)
    }
    _ {
      let entry = right._remove_min();
      (left, entry, right)
    }
  }
}

fn is_balanced[K, V](&Map[K, V](a, _), &Map[K, V](b, _)) -> Bool {
  3 * a + 2 >= b
}

fn is_single[K, V](&Map[K, V](a, _), &Map[K, V](b, _)) -> Bool {
  a <= 2 * b
}

fn size[K, V](&(Map(l, _), _, Map(r, _)): &MapData[K, V]) -> N32 {
  l + r + 1
}
