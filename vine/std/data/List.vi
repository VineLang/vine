
use data::Iterator;
use ops::{Cast, Concat, comparison::{Eq, Ord}, range::{Bound, Range}};
use debug::Show;

#[builtin = "List"]
pub struct List[T](pub.std (N32, Buf[T], ~Buf[T]));

pub.std struct Buf[T](pub.std (T, Buf[T]));

pub mod List {
  pub const empty[T]: List[T] = [];

  pub fn .len[T](&self: &List[T]) -> N32 {
    self.0
  }

  pub fn new[T*](len: N32, value: T) -> List[T] {
    let list = [];
    while len > 0 {
      list.push_back(value);
      len -= 1;
    }
    list
  }

  pub fn .at[T](&List[T](len, *buf, _), i: N32) -> Option[&T] {
    if i >= len {
      let &_ = buf;
      return None;
    }
    while i != 0 {
      let &Buf(_, *tail) = buf;
      buf = tail;
      i -= 1;
    }
    let &Buf(*head, _) = buf;
    Some(head)
  }

  pub fn .get[T+](&self: &List[T], i: N32) -> Option[T] {
    self.at(i).as_forked()
  }

  pub fn .slice[T?, B1?, B2?; Bound[B1, N32], Bound[B2, N32]](
    self: List[T],
    Range[B1, B2](start, end),
  ) -> List[T] {
    // Underflow does not matter, still correct
    let end_index = self.len() - 1;
    let i = 0;
    let slice = [];

    while !start.left_of(&i) && self.pop_front() is Some(_) {
      i += 1;
    }
    if end.right_of(&end_index) {
      return self;
    }
    while end.right_of(&i) && self.pop_front() is Some(value) {
      slice.push_back(value);
      i += 1;
    }
    slice
  }

  pub fn .split_at[T](self: List[T], i: N32) -> (List[T], List[T]) {
    if i >= self.len() {
      return (self, []);
    }
    let prefix = [];
    while i != 0 && self.pop_front() is Some(value) {
      prefix.push_back(value);
      i -= 1;
    }
    (prefix, self)
  }

  pub fn .map[T, U, F*; fn F(T) -> U](List[T](l, buf, _end), f: F) -> List[U] {
    unsafe::erase(_end);
    let len = l;
    let cur;
    let result = ~cur;
    while l != 0 {
      let Buf(head, tail) = buf;
      buf = tail;
      let next;
      ~cur = Buf(f(head), ~next);
      ~next = ~cur;
      l -= 1;
    }
    unsafe::erase(buf);
    List(len, result, cur)
  }

  pub fn .filter[T?, F*; fn F(&T) -> Bool](self: List[T], pred: F) -> List[T] {
    let result = [];
    for value in self.into_iter() {
      if pred(&value) {
        result.push_back(value);
      }
    }
    result
  }

  pub fn .pop_front[T](&List[T](len, buf, _)) -> Option[T] {
    if len != 0 {
      len -= 1;
      let Buf(head, tail) = buf;
      buf = tail;
      Some(head)
    } else {
      None
    }
  }

  pub fn .head_tail[T](List[T](len, buf, end)) -> Option[(T, List[T])] {
    if len != 0 {
      let Buf(head, tail) = buf;
      Some(head, List(len - 1, tail, end))
    } else {
      unsafe::erase((buf, end));
      None
    }
  }

  pub impl concat[T]: Concat[List[T], List[T], List[T]] {
    fn concat(a: List[T], b: List[T]) -> List[T] {
      let List(a_len, a_buf, ~a_end) = a;
      let List(b_len, b_buf, ~b_end) = b;
      a_end = b_buf;
      List(a_len + b_len, a_buf, ~b_end)
    }
  }

  pub fn .push_back[T](&list: &List[T], el: T) {
    list ++= [el];
  }

  pub fn .push_front[T](&list: &List[T], el: T) {
    list = [el] ++ list;
  }

  pub fn .insert[T](&List[T](len, *buf, _), i: N32, el: T) {
    len += 1;
    while i != 0 {
      let &Buf(_, *tail) = buf;
      buf = tail;
      i -= 1;
    }
    let &buf = buf;
    buf = Buf(el, buf);
  }

  pub fn .find[T, F*; fn F(&T) -> Bool](&self: &List[T], pred: F) -> Option[&T] {
    for &value in self.iter() {
      if pred(&value) {
        break Some(&value);
      }
    } else {
      None
    }
  }

  pub fn .contains[T; Eq[T]](&self: &List[T], &el: &T) -> Bool {
    self.find(fn* (&e: &T) { e == el }) is Some(&_)
  }

  pub fn .join[T; Cast[T, String]](list: List[T], sep: String) -> String {
    if list.head_tail() is Some(head, tail) {
      let str = "{head}";
      for val in tail.into_iter() {
        str ++= "{sep}{val}";
      }
      str
    } else {
      ""
    }
  }

  pub fn .drop_while[T?, F*; fn F(&T) -> Bool](&List[T](len, buf, _), pred: F) {
    while len != 0 {
      let Buf(head, tail) = buf;
      if !pred(&head) {
        // Assign buffer again to prevent cloning in the else case
        buf = Buf(head, tail);
        break;
      }
      buf = tail;
      len -= 1;
    }
  }

  pub impl show[T; Show[T]]: Show[List[T]] {
    fn show(&self: &List[T]) -> Show {
      let entries = [];
      for &value in self.iter() {
        entries.push_back(value.show());
      }
      Show::List(entries)
    }
  }

  pub fn .sort_by[T, F*; fn F(&T, &T) -> Bool](&self: &List[T], cmp: F) {
    let output = [];
    for a in self.into_iter() {
      let left = [];
      while output.pop_front() is Some(b) {
        if cmp(&a, &b) {
          output.push_front(b);
          break;
        } else {
          left.push_back(b);
        }
      }
      output = left ++ [a] ++ output;
    }
    self = output;
  }

  pub struct Iter[T]((N32, &Buf[T], &(N32, ~Buf[T])));

  pub fn .iter[T](&List[T](len, buf, end)) -> Iter[T] {
    Iter(len, &buf, &(len, end))
  }

  pub mod Iter {
    pub impl iterator[T]: Iterator[Iter[T], &T] {
      fn advance(Iter[T](len, &buf, &full)) -> Option[(&T, Iter[T])] {
        if len != 0 {
          let &Buf(head, tail) = &buf;
          Some(&head, Iter(len - 1, &tail, &full))
        } else {
          None
        }
      }
    }

    pub impl fork[T]: Fork[Iter[T]];
    pub impl drop[T]: Drop[Iter[T]];

    pub fn .tail[T](&Iter[T](len, &buf, &(full_len, end))) -> &List[T] {
      full_len -= len;
      let ref = &List(len, buf, end);
      full_len += len;
      ref
    }
  }

  pub struct IntoIter[T](List[T]);

  pub fn .into_iter[T](self: List[T]) -> IntoIter[T] {
    IntoIter(self)
  }

  pub mod IntoIter {
    pub impl iterator[T]: Iterator[IntoIter[T], T] {
      fn advance(IntoIter[T](List(len, buf, end))) -> Option[(T, IntoIter[T])] {
        if len != 0 {
          let Buf(head, tail) = buf;
          Some(head, IntoIter(List(len - 1, tail, end)))
        } else {
          unsafe::erase((buf, end));
          None
        }
      }
    }

    pub impl fork[T+]: Fork[IntoIter[T]];
    pub impl drop[T?]: Drop[IntoIter[T]];

    pub impl to_list[T]: Cast[IntoIter[T], List[T]] {
      fn cast(IntoIter[T](list)) -> List[T] {
        list
      }
    }
  }

  pub fn .reversed[T](self: List[T]) -> List[T] {
    let reversed = [];
    for value in self.into_iter() {
      reversed.push_front(value);
    }
    reversed
  }

  pub fn .reverse[T](&self: &List[T]) {
    self = self.reversed();
  }

  pub impl eq[T; Eq[T]]: Eq[List[T]] {
    fn eq(&a: &List[T], &b: &List[T]) -> Bool {
      if a.len() != b.len() {
        return false;
      }
      let a_iter = a.iter();
      let b_iter = b.iter();
      for &a in a_iter {
        let (&b, _b_iter) = b_iter.advance().unwrap();
        b_iter = _b_iter;
        if a != b {
          break false;
        }
      } else {
        true
      }
    }

    fn ne(&a: &List[T], &b: &List[T]) -> Bool {
      !(a == b)
    }
  }

  pub impl ord[T; Ord[T]]: Ord[List[T]] {
    fn cmp(&a: &List[T], &b: &List[T]) -> Ord {
      let a_iter = a.iter();
      let b_iter = b.iter();
      let ord = loop {
        match (a_iter.advance(), b_iter.advance()) {
          (None, None) { Ord::Eq }
          (None, Some(_)) { Ord::Lt }
          (Some(_), None) { Ord::Gt }
          (Some(&a, _a_iter), Some(&b, _b_iter)) {
            (a_iter, b_iter) = (_a_iter, _b_iter);
            match a.cmp(&b) {
              Ord::Lt { Ord::Lt }
              Ord::Eq {
                continue;
              }
              Ord::Gt { Ord::Gt }
            }
          }
        }
      };
      ord
    }

    fn lt(a: &List[T], b: &List[T]) -> Bool {
      Ord::lt_from_cmp(a, b)
    }

    fn le(a: &List[T], b: &List[T]) -> Bool {
      Ord::le_from_cmp(a, b)
    }
  }

  #[become(unsafe::duplicate)]
  pub impl fork[T+]: Fork[List[T]] {
    fn fork(&self: &List[T]) -> List[T] {
      let out = [];
      for &value in self.iter() {
        out.push_back(value);
      }
      out
    }
  }

  #[become(unsafe::erase)]
  pub impl drop[T?]: Drop[List[T]] {
    fn drop(self: List[T]) {
      for _ in self.into_iter() {}
    }
  }
}
