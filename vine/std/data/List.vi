
use Map::{Cmp, Ord};

#[builtin = "List"]
pub struct List[T](N32, Buf[T], ~Buf[T]);

pub(std) struct Buf[T](T, Buf[T]);

pub mod List {
  pub fn len[T](&self: &List[T]) -> N32 {
    self.0
  }

  pub fn new[T](len: N32, value: T) -> List[T] {
    let list = [];
    while len > 0 {
      list.push_back(value);
      len -= 1;
    }
    list
  }

  pub fn get[T](&List[T](len, *buf, _), i: N32) -> &T {
    while i != 0 {
      let &Buf(_, *tail) = buf;
      buf = tail;
      i -= 1;
    }
    let &Buf(*head, _) = buf;
    head
  }

  pub fn slice[T](List[T](len, buf, end), i: N32) -> List[T] {
    if i >= len {
      []
    } else {
      len -= i;
      while i != 0 {
        Buf(_, buf) = buf;
        i -= 1;
      }
      List(len, buf, end)
    }
  }

  pub fn map[T, U](List[T](l, buf, ~_), f: fn(T) -> U) -> List[U] {
    let len = l;
    let cur;
    let result = move ~cur;
    while l != 0 {
      let Buf(head, tail) = buf;
      buf = tail;
      let next;
      ~cur = Buf(f(head), move ~next);
      ~next = move ~cur;
      l -= 1;
    }
    List(len, result, move cur)
  }

  pub fn pop_front[T](&List[T](len, buf, _)) -> Option[T] {
    if len != 0 {
      len -= 1;
      let Buf(head, tail) = buf;
      buf = tail;
      Some(head)
    } else {
      None
    }
  }

  #[builtin = "concat"]
  pub fn concat[T](a: List[T], b: List[T]) -> List[T] {
    let List(a_len, a_buf, ~a_end) = a;
    let List(b_len, b_buf, ~b_end) = b;
    a_end = b_buf;
    List(a_len + b_len, a_buf, move ~b_end)
  }

  pub fn push_back[T](&list: &List[T], el: T) {
    list ++= [el];
  }

  pub fn push_front[T](&list: &List[T], el: T) {
    list = [el] ++ list;
  }

  pub fn insert[T](&List[T](len, *buf, _), i: N32, el: T) {
    len += 1;
    while i != 0 {
      let &Buf(_, *tail) = buf;
      buf = tail;
      i -= 1;
    }
    let &buf = buf;
    buf = Buf(el, buf);
  }

  pub fn join(list: List[String], sep: String) -> String {
    let it = list.into_iter();
    if it.next() is Some(str) {
      while it.next() is Some(val) {
        str ++= sep ++ val;
      }
      str
    } else {
      ""
    }
  }

  pub fn to_string[T](list: List[T], elem_to_string: fn(T) -> String) -> String {
    "[" ++ list.map(elem_to_string).join(", ") ++ "]"
  }

  pub fn sort_by[T](&self: &List[T], cmp: fn(&T, &T) -> Bool) {
    let output = [];
    while self.pop_front() is Some(a) {
      let left = [];
      while output.pop_front() is Some(b) {
        if cmp(&a, &b) {
          output.push_front(b);
          break;
        } else {
          left.push_back(b);
        }
      }
      output = left ++ [a] ++ output;
    }
    self = output;
  }

  pub struct Iter[T](N32, &Buf[T]);

  pub fn iter[T](&List[T](len, buf, _)) -> Iter[T] {
    Iter(len, &buf)
  }

  pub mod Iter {
    pub fn next[T](&Iter[T](len, buf)) -> Option[&T] {
      if len != 0 {
        len -= 1;
        let &Buf(*head, *tail) = buf;
        buf = tail;
        Some(head)
      } else {
        let &_ = move buf;
        None
      }
    }

    pub fn drop[T](&iter: &Iter[T]) {
      let Iter(_, &_) = move iter;
    }
  }

  pub struct IntoIter[T](N32, Buf[T]);

  pub fn into_iter[T](List[T](len, buf, _)) -> IntoIter[T] {
    IntoIter(len, buf)
  }

  pub mod IntoIter {
    pub fn next[T](&IntoIter[T](len, buf)) -> Option[T] {
      if len != 0 {
        len -= 1;
        let Buf(head, tail) = buf;
        buf = tail;
        Some(head)
      } else {
        None
      }
    }
  }

  pub fn reversed[T](self: List[T]) -> List[T] {
    let reversed = [];
    while self.pop_front() is Some(value) {
      reversed.push_front(value);
    }
    reversed
  }

  pub fn reverse[T](&self: &List[T]) {
    self = self.reversed();
  }

  pub fn cmp[T](cmp_el: Cmp[T]) -> Cmp[List[T]] {
    (
      fn(&a: &List[T], &b: &List[T]) {
        let a = a.iter();
        let b = b.iter();
        let ord = loop {
          match (a.next(), b.next()) {
            (None, None) { break Ord::Eq }
            (None, Some(_)) { break Ord::Lt }
            (Some(_), None) { break Ord::Gt }
            (Some(a), Some(b)) {
              match cmp_el(a, b) {
                Ord::Lt { break Ord::Lt }
                Ord::Eq {}
                Ord::Gt { break Ord::Gt }
              }
            }
          }
        };
        a.drop();
        b.drop();
        ord
      }
    )
  }
}
