
pub trait Iterator[Self, Item] {
  #[builtin = "advance"]
  fn .advance(self: Self) -> Option[(Item, Self)];
}

pub struct Fused[I](pub Option[I]);

pub mod Fused {
  pub fn new[I](iter: I) -> Fused[I] {
    Fused(Some(iter))
  }

  pub fn .next[I, T; Iterator[I, T]](&Fused[I](inner)) -> Option[T] {
    if inner is Some(iter) && iter.advance() is Some(value, iter) {
      inner = Some(iter);
      Some(value)
    } else {
      inner = None;
      None
    }
  }

  #[become(unsafe::duplicate)]
  pub impl fork[I+]: Fork[Fused[I]] {
    fn fork(&Fused[I](inner)) -> Fused[I] {
      Fused(inner)
    }
  }

  #[become(unsafe::erase)]
  pub impl drop[I?]: Drop[Fused[I]] {
    fn drop(Fused[I](_)) {}
  }
}
