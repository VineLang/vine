
use ops::Cast;

pub fn duplicate[T](&value: &T) -> T {
  inline_ivy! (x <- value, x1 -> value) -> T {
    x2
    x = dup(x1 x2)
  }
}

#[manual]
#[builtin = "duplicate"]
pub impl duplicate[T]: Fork[T] {
  fn fork(&self: &T) -> T {
    unsafe::duplicate(&self)
  }
}

pub const eraser[T]: T = inline_ivy! () -> T { _ };

pub fn erase[T](value: T) {
  ~eraser = value;
}

#[manual]
#[builtin = "erase"]
pub impl erase[T]: Drop[T] {
  fn drop(self: T) {
    unsafe::erase(self)
  }
}

pub fn unreachable[T, U](ignored: T) -> U {
  unsafe::erase(ignored)
  eraser
}

pub fn move[T](&value: &T) -> T {
  let result = value;
  value = eraser;
  result
}

pub fn transmute[C, T](value: C) -> T {
  inline_ivy! (value <- value) -> T { value }
}

#[manual]
pub impl transmute[C, T]: Cast[C, T] {
  fn cast(value: C) -> T {
    unsafe::transmute(value)
  }
}
