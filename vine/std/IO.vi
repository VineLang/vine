
#[builtin = "IO"]
pub type IO;

pub mod IO {
  pub fn .println(&io: &IO, str: String) {
    debug::synchronize_io(&io);
    io._print(str);
    io.print_char('\n');
    debug::synchronize_io(&io);
  }

  pub fn .print(&io: &IO, str: String) {
    debug::synchronize_io(&io);
    io._print(str);
    debug::synchronize_io(&io);
  }

  pub.std fn ._print(&io: &IO, str: String) {
    for char in str!.into_iter() {
      io.print_char(char);
    }
  }

  pub fn .print_char(&io: &IO, char: Char) {
    inline_ivy! (io0 <- io, io1 -> io, char <- char) -> () { _
      io0 = @io_print_char(char io1) 
    }
  }

  pub fn .print_bytes(&io: &IO, bytes: List[N32]) {
    for byte in bytes.into_iter() {
      io.print_byte(byte);
    }
  }

  pub fn .print_byte(&io: &IO, byte: N32) {
    inline_ivy! (io0 <- io, io1 -> io, byte <- byte) -> () { _
      io0 = @io_print_byte(byte io1) 
    }
  }

  pub fn .flush(&io: &IO) {
    inline_ivy! (io0 <- io, io1 -> io) -> () { _
      io0 = @io_flush(0 io1) 
    }
  }

  pub fn .prompt(&io: &IO, msg: String) -> Option[String] {
    io.print(msg);
    io.flush();
    io.read_line()
  }

  pub fn .read_line(&io: &IO) -> Option[String] {
    let byte = io.read_byte('\0');
    if byte != '\0' {
      Some(if byte == '\n' {
        ""
      } else {
        let chars = [byte];
        loop {
          byte = io.read_byte('\n');
          if byte != '\n' {
            chars ++= [byte];
            continue;
          }
        }
        String(chars)
      })
    } else {
      None
    }
  }

  pub fn .full_input(&io: &IO) -> String {
    let chars = [];
    loop {
      let byte = io.read_byte('\0');
      if byte == '\0' {
        String(chars)
      } else {
        chars ++= [byte];
        continue;
      }
    }
  }

  pub fn .read_byte(&io: &IO, default: Char) -> Char {
    inline_ivy! (io0 <- io, io3 -> io, default <- default) -> Char {
      byte
      io0 = dup(io1 io2)
      io1 = @io_read_byte(default dup(byte @seq$(io2 io3))) 
    }
  }

  pub.std fn .synchronize(&io0: &IO, &io1: &IO) {
    inline_ivy! (i0 <- io0, i1 <- io1, o0 -> io0, o1 -> io1) -> () { _
      i0 = @seq(i1 dup(o0 o1))
    }
  }
}
