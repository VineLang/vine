
#[builtin = "IO"]
pub mod IO {
  pub fn .println(&io: &IO, str: String) {
    io.print(str);
    io.print_char('\n');
  }

  pub fn .print(&io: &IO, str: String) {
    let List(len, chars, _) = str as List;
    while len != 0 {
      len = len - 1;
      let List::Buf(char, tail) = chars;
      chars = tail;
      io.print_char(char);
    }
  }

  pub fn .print_char(&io: &IO, char: Char) {
    inline_ivy! (io0 <- io, io1 -> io, char <- char) -> () { _
      io0 = @io_print_char(char io1) 
    }
  }

  pub fn .print_bytes(&io: &IO, bytes: List[N32]) {
    let List(len, bytes, _) = bytes;
    while len != 0 {
      len = len - 1;
      let List::Buf(byte, tail) = bytes;
      bytes = tail;
      io.print_byte(byte);
    }
  }

  pub fn .print_byte(&io: &IO, byte: N32) {
    inline_ivy! (io0 <- io, io1 -> io, byte <- byte) -> () { _
      io0 = @io_print_byte(byte io1) 
    }
  }

  pub fn .flush(&io: &IO) {
    inline_ivy! (io0 <- io, io1 -> io) -> () { _
      io0 = @io_flush(0 io1) 
    }
  }

  pub fn .prompt(&io: &IO, msg: String) -> Option[String] {
    io.print(msg);
    io.flush();
    io.read_line()
  }

  pub fn .read_line(&io: &IO) -> Option[String] {
    let byte = io.read_byte('\0');
    if byte != '\0' {
      Some(if byte == '\n' {
        ""
      } else {
        let chars = [byte];
        loop {
          byte = io.read_byte('\n');
          if byte != '\n' {
            chars ++= [byte];
          } else {
            break;
          }
        }
        String({ chars })
      })
    } else {
      None
    }
  }

  pub fn .full_input(&io: &IO) -> String {
    let chars = [];
    loop {
      let byte = io.read_byte('\0');
      if byte != '\0' {
        chars ++= [byte];
      } else {
        return String({ chars });
      }
    }
  }

  pub fn .read_byte(&io: &IO, default: Char) -> Char {
    inline_ivy! (io0 <- io, io3 -> io, default <- default) -> Char {
      byte
      io0 = dup(io1 io2)
      io1 = @io_read_byte(default dup(byte @seq$(io2 io3))) 
    }
  }
}
