
use std::{list::Buf, option::Option::{Option, Some, None}};

#[builtin = "N32"]
pub mod N32 {
  pub fn to_string(n: N32) -> String {
    if n != 0 {
      let str = "";
      while n != 0 {
        str = ['0' + n % 10] ++ str;
        n = n / 10;
      }
      str
    } else {
      "0"
    }
  }

  pub fn parse(str: String) -> Option[N32] {
    let List(len, chars, _) = str;
    if len == 0 {
      None
    } else {
      let num = 0;
      while len != 0 {
        let Buf(char, tail) = chars;
        chars = tail;
        if !('0' <= char <= '9') {
          return None;
        }
        num *= 10;
        num += char - '0';
        len -= 1;
      }
      Some(num)
    }
  }

  pub inline_ivy! rotate_left: fn(N32, N32) -> N32 {
    fn(@n32_rotl(x y) fn(x y))
  }

  pub inline_ivy! rotate_right: fn(N32, N32) -> N32 {
    fn(@n32_rotr(x y) fn(x y))
  }
}
