
use std::option::Option::{Option, Some, None};

#[builtin = "List"]
pub struct List[T](u32, Buf[T], ~Buf[T]);

pub(std) struct Buf[T](T, Buf[T]);

pub type String = List[u32];

pub mod List {
  pub fn len[T](&List(len, _, _): &List[T]) -> u32 {
    len
  }

  pub fn map[T, U](List(l, buf, ~_): List[T], f: fn(T) -> U) -> List[U] {
    let len = l;
    let cur;
    let result = move ~cur;
    while l {
      let Buf(head, tail) = buf;
      buf = tail;
      let next;
      ~cur = Buf(f(head), move ~next);
      ~next = move ~cur;
      l -= 1;
    };
    List(len, result, move cur)
  }

  pub fn pop_front[T](&List(len, buf, _): &List[T]) -> Option[T] {
    if len {
      len -= 1;
      let Buf(head, tail) = buf;
      buf = tail;
      Some(head)
    } else {
      None
    }
  }

  #[builtin = "concat"]
  pub fn concat[T](a: List[T], b: List[T]) -> List[T] {
    let List(a_len, a_buf, ~a_end) = a;
    let List(b_len, b_buf, ~b_end) = b;
    a_end = b_buf;
    List(a_len + b_len, a_buf, move ~b_end)
  }

  pub fn push_back[T](&list: &List[T], el: T) {
    list ++= [el];
  }

  pub fn push_front[T](&list: &List[T], el: T) {
    list = [el] ++ list;
  }

  pub fn join(list: List[String], sep: String) -> String {
    let it = list.into_iter();
    if it.next() is Some(str) {
      while it.next() is Some(val) {
        str ++= sep ++ val;
      }
      str
    } else {
      ""
    }
  }

  pub fn to_string[T](list: List[T], elem_to_string: fn(T) -> String) -> String {
    "[" ++ list.map(elem_to_string).join(", ") ++ "]"
  }

  pub struct Iter[T](u32, &Buf[T]);

  pub fn iter[T](&List(len, buf, _): &List[T]) -> Iter[T] {
    Iter(len, &buf)
  }

  pub mod Iter {
    pub fn next[T](&Iter(len, buf): &Iter[T]) -> Option[&T] {
      if len {
        len -= 1;
        let &Buf(*head, *tail) = buf;
        buf = tail;
        Some(head)
      } else {
        let &_ = move buf;
        None
      }
    }
  }

  pub struct IntoIter[T](u32, Buf[T]);

  pub fn into_iter[T](List(len, buf, _): List[T]) -> IntoIter[T] {
    IntoIter(len, buf)
  }

  pub mod IntoIter {
    pub fn next[T](&IntoIter(len, buf): &IntoIter[T]) -> Option[T] {
      if len {
        len -= 1;
        let Buf(head, tail) = buf;
        buf = tail;
        Some(head)
      } else {
        None
      }
    }
  }
}
