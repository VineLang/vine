
use std::option::Option::{Some, None};

mod List {
  fn len(&(len, _, _)) {
    len
  }

  fn map(&move (l, buf, ~_), f) {
    let len = l;
    let cur;
    let result = move ~cur;
    while l {
      let (head, tail) = buf;
      buf = tail;
      let next;
      ~cur = (f(head), move ~next);
      ~next = move ~cur;
      l -= 1;
    };
    (len, result, move cur)
  }

  fn pop_front(&(len, buf, _)) {
    if len {
      len -= 1;
      let (head, tail) = buf;
      buf = tail;
      Some(head)
    } else {
      None
    }
  }

  fn push_back(&list, el) {
    list ++= [el];
  }

  fn push_front(&list, el) {
    list = [el] ++ list;
  }

  fn join(&move list, sep) {
    let it = list.into_iter();
    if it.into_iter::next() is Some(str) {
      while it.into_iter::next() is Some(val) {
        str ++= sep ++ val;
      }
      str
    } else {
      ""
    }
  }

  fn to_string(elem_to_string, list) {
    "[" ++ list.map(elem_to_string).join(", ") ++ "]"
  }

  fn iter(&(len, buf, _)) {
    (len, &buf)
  }

  mod iter {
    fn next(&(len, buf)) {
      if len {
        len -= 1;
        let &(*head, *tail) = buf;
        buf = tail;
        Some(head)
      } else {
        let &_ = move buf;
        None
      }
    }
  }

  fn into_iter(&move (len, buf, _)) {
    (len, buf)
  }

  mod into_iter {
    fn next(&(len, buf)) {
      if len {
        len -= 1;
        let (head, tail) = buf;
        buf = tail;
        Some(head)
      } else {
        None
      }
    }
  }
}
