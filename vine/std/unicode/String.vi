
use ops::{Cast, Concat, comparison::{Eq, Ord}};
use debug::Show;

#[builtin = "String"]
pub struct String(pub List[Char]);

pub mod String {
  pub impl fork: Fork[String] = unsafe::duplicate;
  pub impl drop: Drop[String] = unsafe::erase;

  pub fn .len(&String(List(len, _, _))) -> N32 {
    len
  }

  pub fn .split(self: String, sep: String) -> List[String] {
    let list = [];
    loop {
      let (found, remaining) = self.split_once(sep);
      list ++= [found];
      if remaining is Some(remaining) {
        self = remaining;
        continue;
      } else {
        list
      }
    }
  }

  pub fn .split_trim(self: String, sep: String) -> List[String] {
    let list = [];
    let start = true;
    let ~end = true;
    loop {
      let (found, remaining) = self.split_once(sep);
      let empty = found.len() == 0;
      start = empty && start;
      if !start && !~end {
        list ++= [found];
      }
      ~end ~= empty && ~end;
      if remaining is Some(remaining) {
        self = remaining;
        continue;
      } else {
        list
      }
    }
  }

  pub fn .split_once(self: String, sep: String) -> (String, Option[String]) {
    let prefix = "";
    let suffix = self;
    while suffix.len() >= sep.len() {
      let iter = suffix!.iter();
      for &a in sep!.iter() {
        let (&b, _iter) = iter.advance().unwrap();
        iter = _iter;
        if a != b {
          break;
        }
      } else {
        return (prefix, Some(String(unsafe::move(iter.tail()))));
      }
      if suffix!.pop_front() is Some(char) {
        prefix ++= String([char]);
      } else {
        break;
      }
    }
    (prefix ++ suffix, None)
  }

  pub fn .strip_prefix(self: String, &prefix: &String) -> Result[String, String] {
    if self.len() < prefix.len() {
      return Err(prefix);
    }
    let iter = self!.iter();
    for &a in prefix!.iter() {
      let (&b, _iter) = iter.advance().unwrap();
      iter = _iter;
      if a != b {
        return Err(self);
      }
    }
    Ok(String(unsafe::move(iter.tail())))
  }

  pub fn .trim_front(String(chars)) -> String {
    chars.drop_while(fn* (&c: &Char) { c.is_whitespace() });
    String(chars)
  }

  pub fn .trim_back(String(chars)) -> String {
    let trimmed_chars = [];
    let ~trailing_whitespace = true;
    for char in chars.into_iter() {
      if !~trailing_whitespace {
        trimmed_chars.push_back(char);
      }
      if !char.is_whitespace() {
        ~trailing_whitespace = false;
      }
    }
    String(trimmed_chars)
  }

  pub fn .trim(self: String) -> String {
    self.trim_front().trim_back()
  }

  pub fn .starts_with(&self: &String, &prefix: &String) -> Bool {
    if self.len() < prefix.len() {
      return false;
    }
    let self_iter = self!.iter();
    for &a in prefix!.iter() {
      let (&b, _self_iter) = self_iter.advance().unwrap();
      self_iter = _self_iter;
      if a != b {
        break false;
      }
    } else {
      true
    }
  }

  pub fn .split_at(String(chars), i: N32) -> (String, String) {
    let (prefix, suffix) = chars.split_at(i);
    (String(prefix), String(suffix))
  }

  pub impl eq: Eq[String] {
    fn eq(&self: &String, &other: &String) -> Bool {
      self! == other!
    }

    fn ne(&self: &String, &other: &String) -> Bool {
      self! != other!
    }
  }

  pub impl ord: Ord[String] {
    fn cmp(&a: &String, &b: &String) -> Ord {
      a!.cmp(&b!)
    }

    fn lt(a: &String, b: &String) -> Bool {
      Ord::lt_from_cmp(a, b)
    }

    fn le(a: &String, b: &String) -> Bool {
      Ord::le_from_cmp(a, b)
    }
  }

  pub impl concat: Concat[String, String, String] {
    fn concat(String(a), String(b)) -> String {
      String(a ++ b)
    }
  }

  pub fn .repeat(self: String, count: N32) -> String {
    let out = "";
    for _ in 0..count {
      out ++= self;
    }
    out
  }

  pub impl from_chars: Cast[List[Char], String] {
    fn cast(chars: List[Char]) -> String {
      String(chars)
    }
  }

  pub impl to_chars: Cast[String, List[Char]] {
    fn cast(String(chars)) -> List[Char] {
      chars
    }
  }

  pub impl show: Show[String] {
    fn show(&self: &String) -> Show {
      Show::Literal("\"{self}\"")
    }
  }
}
