
use ops::Cast;

#[builtin = "Tuple"]
pub trait Tuple[Tuple, Init, Rest] {
  fn deconstruct(tuple: Tuple) -> (Init, Rest);
  fn reconstruct(init: Init, rest: Rest) -> Tuple;
}

pub mod Tuple {
  pub use Composite::{cast_deconstruct, cast_reconstruct};
}

#[builtin = "Object"]
pub trait Object[Object, Init, Rest] {
  const key: String;
  fn deconstruct(object: Object) -> (Init, Rest);
  fn reconstruct(init: Init, rest: Rest) -> Object;
}

pub mod Object {
  pub use Composite::{cast_deconstruct, cast_reconstruct};
}

pub trait Composite[Composite, Init, Rest] {
  fn deconstruct(composite: Composite) -> (Init, Rest);
  fn reconstruct(init: Init, rest: Rest) -> Composite;
}

pub mod Composite {
  pub impl tuple[C, I, R; Tuple[C, I, R]]: Composite[C, I, R] {
    fn deconstruct(composite: C) -> (I, R) {
      Tuple::deconstruct(composite)
    }

    fn reconstruct(init: I, rest: R) -> C {
      Tuple::reconstruct(init, rest)
    }
  }

  pub impl object[C, I, R; Object[C, I, R]]: Composite[C, I, R] {
    fn deconstruct(composite: C) -> (I, R) {
      Object::deconstruct(composite)
    }

    fn reconstruct(init: I, rest: R) -> C {
      Object::reconstruct(init, rest)
    }
  }

  pub impl cast_deconstruct[C, I, R; Composite[C, I, R]]: Cast[C, (I, R)] {
    fn cast(composite: C) -> (I, R) {
      Composite::deconstruct(composite)
    }
  }

  pub impl cast_reconstruct[C, I, R; Composite[C, I, R]]: Cast[(I, R), C] {
    fn cast((init: I, rest: R)) -> C {
      Composite::reconstruct(init, rest)
    }
  }
}

#[builtin = "Struct"]
pub trait Struct[Struct, Content] {
  const name: String;
  fn deconstruct(struct_: Struct) -> Content;
  fn reconstruct(content: Content) -> Struct;
}

pub mod Struct {
  pub impl cast_deconstruct[S, C; Struct[S, C]]: Cast[S, C] {
    fn cast(struct_: S) -> C {
      Struct::deconstruct(struct_)
    }
  }

  pub impl cast_reconstruct[S, C; Struct[S, C]]: Cast[C, S] {
    fn cast(content: C) -> S {
      Struct::reconstruct(content)
    }
  }
}

#[builtin = "Enum"]
pub trait Enum[Enum, Variants] {
  const name: String;
  const variant_names: List[String];
  fn match_[F, T; fn F(Variants) -> T](enum_: Enum, f: F) -> T;
  fn reconstruct(variant: Variants) -> Enum;
}

pub mod Enum {
  pub fn match_ref[E, V, F, T; Enum[E, V], fn F(&V) -> T](&enum_: &E, f: F) -> T {
    Enum::match_(
      enum_,
      fn (variant: V) {
        let result = f(&variant);
        enum_ = Enum::reconstruct(variant);
        result
      },
    )
  }
}

#[builtin = "Variant"]
pub enum Variant[I, R] {
  Init(I),
  Rest(R),
}
