
// A PCG random number generator (XSH RR 64/32 (LCG) variant).

use std::{n64::N64, option::Option::Some};

pub struct Rng(N64, N64);

pub mod Rng {
  pub fn new(state: N64, increment: N64) -> Rng {
    increment = increment.or(N64::from_n32(1));
    state = state.add(increment);
    state = state.mul(multiplier).add(increment);
    Rng(state, increment)
  }

  pub const default: Rng = new(N64(0xd15ea5e5, 0xcafef00d), N64(0xf767814f, 0x14057b7e));

  const multiplier: N64 = N64(0x4c957f2d, 0x5851f42d);

  pub fn gen_n32(&Rng(state, increment): &Rng) -> N32 {
    let N64(lo, hi) = state;
    state = N64::add(N64::mul(state, multiplier), increment);
    N32::rotate_right((hi >> 13) ^ (hi << 5) ^ (lo >> 27), hi >> 27)
  }

  pub fn mix(&Rng(state, increment): &Rng, n: N32) {
    state = state.xor(N64(0, n));
    state = N64::add(N64::mul(state, multiplier), increment);
  }

  pub fn seeded(seed: String) -> Rng {
    let rng = Rng::default;
    let iter = seed.into_iter();
    while iter.next() is Some(char) {
      rng.mix(char.as_n32());
    }
    rng
  }
}
