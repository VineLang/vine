// A PCG random number generator (XSH RR 64/32 (LCG) variant).

use std::{u32, u64};

struct Rng(u64, u64);

mod Rng {
  fn new(state: u64, increment: u64) -> Rng {
    increment |= u64::from_u32(1);
    state = u64::add(state, increment);
    state = u64::add(u64::mul(state, multiplier), increment);
    Rng(state, increment)
  }

  const default: Rng = new(
    (0xd15ea5e5, 0xcafef00d),
    (0xf767814f, 0x14057b7e),
  );

  const multiplier: u64 = (0x4c957f2d, 0x5851f42d);

  fn gen_u32(&Rng(state, increment): &Rng) -> u32 {
    let (lo, hi) = state;
    state = u64::add(u64::mul(state, multiplier), increment);
    u32::rotate_right((hi >> 13) ^ (hi << 5) ^ (lo >> 27), hi >> 27)
  }
}
