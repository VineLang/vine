
use ops::Cast;
use data::List as List_;
use derive::{Enum, Object as Object_, Struct, Tuple as Tuple_, Variant};

pub trait Show[T] {
  fn .show(self: &T) -> Show;
}

pub enum Show {
  Literal(String),
  Constructor((String, Show)),
  Tuple(List_[Show]),
  Object(List_[(Show, Show)]),
  List(List_[Show]),
}

pub mod Show {
  pub impl to_string: Cast[Show, String] {
    fn cast(self: Show) -> String {
      self.format(80)
    }
  }

  pub fn .format(self: Show, max_width: N32) -> String {
    self._format(max_width, 0).1
  }

  fn ._format(self: Show, max_width: N32, indent: N32) -> (N32, String) {
    match self {
      Literal(literal) { (literal.len(), literal) }
      Constructor(name, data) {
        let omit_parens = &data is &Tuple(tuple) && tuple.len() != 1;
        let (width, data) = data._format(max_width, indent);
        if omit_parens {
          (width + name.len(), "{name}{data}")
        } else {
          (width + name.len() + 2, "{name}({data})")
        }
      }
      Tuple(tuple) {
        when {
          tuple.len() == 0 { (2, "()") }
          tuple.len() == 1 {
            let (width, inner) = tuple.pop_front().unwrap()._format(max_width, indent);
            (width + 3, "({inner},)")
          }
          _ {
            let (width, str, _) = format_comma_sep(tuple, fn* (show) { [show] }, max_width, indent);
            (width, "({str})")
          }
        }
      }
      List(list) {
        if list.len() == 0 {
          (2, "[]")
        } else {
          let (width, str, _) = format_comma_sep(list, fn* (show) { [show] }, max_width, indent);
          (width, "[{str}]")
        }
      }
      Object(entries) {
        if entries.len() == 0 {
          (2, "\{}")
        } else {
          let (width, str, multiline) = format_comma_sep(
            entries,
            fn* ((key, show)) { [key, Literal(": "), show] },
            max_width,
            indent,
          );
          let str = if multiline {
            "\{{str}}"
          } else {
            "\{ {str} }"
          };
          (width, str)
        }
      }
    }
  }

  fn format_comma_sep[E?, F*; fn F(E) -> List_[Show]](
    entries: List_[E],
    process_entry: F,
    max_width: N32,
    indent: N32,
  ) -> (N32, String, Bool) {
    let ~_multiline;
    let multiline: Bool = ~_multiline;
    let total_width = 0;
    let str = "";
    let first = true;
    for entry in entries.into_iter() {
      total_width += 2;
      if multiline {
        str ++= newline(indent + 2);
      } else {
        if !first {
          str ++= ", ";
        }
      }
      for show in process_entry(entry).into_iter() {
        let (width, show_str) = show._format(max_width, indent + 2);
        total_width += width;
        str ++= show_str;
      }
      if multiline {
        str ++= ",";
      }
      first = false;
    }
    if multiline {
      str ++= newline(indent);
    }
    ~_multiline = total_width > max_width;
    (total_width, str, multiline)
  }

  fn newline(indent: N32) -> String {
    "\n" ++ String(List_::new(indent, ' '))
  }

  pub impl fork: Fork[Show];
  pub impl drop: Drop[Show];

  pub trait ShowTuple[T] {
    fn .show_tuple(&self: &T) -> List_[Show];
  }

  pub impl tuple[T; ShowTuple[T]]: Show[T] {
    fn show(&self: &T) -> Show {
      Show::Tuple(self.show_tuple())
    }
  }

  pub mod ShowTuple {
    pub impl nil: ShowTuple[()] {
      fn show_tuple(&()) -> List_[Show] {
        []
      }
    }

    pub impl tuple[T, I, R; Tuple_[T, I, R], Show[I], ShowTuple[R]]: ShowTuple[T] {
      fn show_tuple(&tuple: &T) -> List_[Show] {
        let &(init, rest) = &tuple as &(I, R);
        [init.show()] ++ rest.show_tuple()
      }
    }
  }

  pub trait ShowObject[T] {
    fn .show_object(&self: &T) -> List_[(Show, Show)];
  }

  pub impl object[T; ShowObject[T]]: Show[T] {
    fn show(&self: &T) -> Show {
      Show::Object(self.show_object())
    }
  }

  pub mod ShowObject {
    pub impl nil: ShowObject[{}] {
      fn show_object(&{}) -> List_[(Show, Show)] {
        []
      }
    }

    pub impl object[O, I, R; Object_[O, I, R], Show[I], ShowObject[R]]: ShowObject[O] {
      fn show_object(&object: &O) -> List_[(Show, Show)] {
        let &(init, rest) = &object as &(I, R);
        [(Show::Literal(Object_::key), init.show())] ++ rest.show_object()
      }
    }
  }

  #[basic]
  pub impl struct_[S, C; Struct[S, C], Show[C]]: Show[S] {
    fn show(&struct_: &S) -> Show {
      Show::Constructor(Struct::name, Show::show(&struct_ as &C))
    }
  }

  pub trait ShowVariant[V] {
    fn .show_variant(&self: &V, variant_names: List_[String]) -> Show;
  }

  #[basic]
  pub impl enum_[E, V; Enum[E, V], ShowVariant[V]]: Show[E] {
    fn show(&enum_: &E) -> Show {
      Enum::match_ref(&enum_, fn (&variant: &V) { variant.show_variant(Enum::variant_names) })
    }
  }

  pub mod ShowVariant {
    pub impl never: ShowVariant[!] {
      fn show_variant(&never: &!, _: List_[String]) -> Show {
        never as Show
      }
    }

    pub impl variant[I, R; Show[I], ShowVariant[R]]: ShowVariant[Variant[I, R]] {
      fn show_variant(&self: &Variant[I, R], variant_names: List_[String]) -> Show {
        let (init_name, rest_names) = variant_names.head_tail().unwrap();
        match &self {
          &Variant::Init(init) { Show::Constructor(init_name, init.show()) }
          &Variant::Rest(rest) { rest.show_variant(rest_names) }
        }
      }
    }
  }
}
