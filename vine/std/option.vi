
use std::bool::{true, false};

enum Option {
  Some(value),
  None,
}

mod Option {
  fn map(&move self, f) {
    match self {
      Some(val) => Some(f(val)),
      None => None,
    }
  }

  fn as_ref(&self) {
    match &self {
      &Some(val) => Some(&val),
      &None => None,
    }
  }

  fn flatten(&move self) {
    match self {
      Some(Some(val)) => Some(val),
      _ => None,
    }
  }

  fn and_then(&move self, f) {
    self.map(f).flatten()
  }

  fn or(&move self, default) {
    match self {
      None => default,
      x => x,
    }
  }

  fn unwrap_or(&move self, default) {
    match self {
      Some(val) => val,
      None => default,
    }
  }

  fn unwrap(&move self) {
    match self { Some(val) => val }
  }
}
