
use std::{str, option::Option::{Some, None}};

fn println(&io, str) {
  io.print(str);
  io.print_char('\n');
}

fn print(&io, str) {
  let (len, chars, _) = str;
  let char;
  while len {
    len = len - 1;
    (char, chars) = chars;
    io.print_char(char);
  }
}

inline_ivy! print_char {
  fn(ref(@io_print_char(char io) io) fn(char _))
}

fn print_bytes(&io, bytes) {
  let (len, bytes, _) = bytes;
  let byte;
  while len {
    len = len - 1;
    (byte, bytes) = bytes;
    io.print_byte(byte);
  }
}

inline_ivy! print_byte {
  fn(ref(@io_print_byte(char io) io) fn(char _))
}

inline_ivy! flush {
  fn(ref(@io_flush(0 io) io) _)
}

fn prompt(&io, msg) {
  io.print(msg);
  io.flush();
  io.read_line()
}

fn read_line(&io) {
  let byte = io.read_byte(0);
  if byte {
    Some(if byte == '\n' {
      ""
    } else {
      let str = str::single(byte);
      loop {
        byte = io.read_byte('\n');
        if byte != '\n' {
          str ++= str::single(byte);
        } else {
          break;
        }
      }
      str
    })
  } else {
    None
  }
}

inline_ivy! read_byte {
  fn(ref(dup(io0 @io_read_byte(default dup(byte @seq$(io0 io1)))) io1) fn(default byte))
}
