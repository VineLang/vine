
use debug::Show;

#[builtin = "Result"]
pub enum Result[T, E] {
  Ok(T),
  Err(E),
}

pub mod Result {
  pub fn .map[T, U, E, F?; fn F(T) -> U](self: Result[T, E], f: F) -> Result[U, E] {
    match self {
      Ok(val) { Ok(f(val)) }
      Err(err) { Err(err) }
    }
  }

  pub fn .as_ref[T, E](&self: &Result[T, E]) -> Result[&T, &E] {
    match &self {
      &Ok(val) { Ok(&val) }
      &Err(err) { Err(&err) }
    }
  }

  pub fn .flatten[T, E](self: Result[Result[T, E], E]) -> Result[T, E] {
    match self {
      Ok(Ok(val)) { Ok(val) }
      Ok(Err(err)) { Err(err) }
      Err(err) { Err(err) }
    }
  }

  pub fn .and_then[T, U, E, F?; fn F(T) -> Result[U, E]](self: Result[T, E], f: F) -> Result[U, E] {
    self.map(f).flatten()
  }

  pub fn .or[T?, E?](self: Result[T, E], default: Result[T, E]) -> Result[T, E] {
    match self {
      Err(_) { default }
      x { x }
    }
  }

  pub fn .unwrap_or[T?, E?](self: Result[T, E], default: T) -> T {
    match self {
      Ok(val) { val }
      Err(_) { default }
    }
  }

  pub fn .unwrap[T, E](self: Result[T, E]) -> T {
    match self {
      Ok(val) { val }
      Err(err) { unsafe::unreachable(err) }
    }
  }

  pub impl show[T, E; Show[T], Show[E]]: Show[Result[T, E]] {
    fn show(&self: &Result[T, E]) -> Show {
      match &self {
        &Ok(value) { Show::Constructor("Ok", value.show()) }
        &Err(value) { Show::Constructor("Err", value.show()) }
      }
    }
  }

  #[duplicate]
  pub impl fork[T+, E+]: Fork[Result[T, E]] {
    fn fork(&self: &Result[T, E]) -> Result[T, E] {
      match &self {
        &Ok(value) { Ok(value) }
        &Err(value) { Err(value) }
      }
    }
  }

  #[erase]
  pub impl drop[T?, E?]: Drop[Result[T, E]] {
    fn drop(self: Result[T, E]) {
      match self {
        Ok(_) {}
        Err(_) {}
      }
    }
  }
}
