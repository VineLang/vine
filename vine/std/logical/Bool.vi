
use ops::{bitwise::{And, Not, Or, Xor}, comparison::{Eq, Ord}};
use unicode::ToString;

#[builtin = "Bool"]
pub mod Bool {
  pub impl and: And[Bool, Bool, Bool] {
    fn .and(a: Bool, b: Bool) -> Bool {
      inline_ivy! (a <- a, b <- b) -> Bool { out a = @n32_and(b out) }
    }
  }

  pub impl or: Or[Bool, Bool, Bool] {
    fn .or(a: Bool, b: Bool) -> Bool {
      inline_ivy! (a <- a, b <- b) -> Bool { out a = @n32_or(b out) }
    }
  }

  pub impl xor: Xor[Bool, Bool, Bool] {
    fn .xor(a: Bool, b: Bool) -> Bool {
      inline_ivy! (a <- a, b <- b) -> Bool { out a = @n32_xor(b out) }
    }
  }

  #[builtin = "bool_not"]
  pub impl not: Not[Bool, Bool] {
    fn .not(a: Bool) -> Bool {
      inline_ivy! (a <- a) -> Bool { out a = @n32_eq(0 out) }
    }
  }

  pub impl eq: Eq[Bool] {
    fn .eq(&a: &Bool, &b: &Bool) -> Bool {
      inline_ivy! (a <- a, b <- b) -> Bool { out a = @n32_eq(b out) }
    }

    fn .ne(&a: &Bool, &b: &Bool) -> Bool {
      inline_ivy! (a <- a, b <- b) -> Bool { out a = @n32_ne(b out) }
    }
  }

  pub impl ord: Ord[Bool] {
    fn .lt(&a: &Bool, &b: &Bool) -> Bool {
      inline_ivy! (a <- a, b <- b) -> Bool { out a = @n32_lt(b out) }
    }

    fn .le(&a: &Bool, &b: &Bool) -> Bool {
      inline_ivy! (a <- a, b <- b) -> Bool { out a = @n32_le(b out) }
    }

    const cmp: fn(&Bool, &Bool) -> Ord = Ord::cmp_from_lt[Bool];
  }

  pub impl to_string: ToString[Bool] {
    fn .to_string(self: Bool) -> String {
      if self {
        "true"
      } else {
        "false"
      }
    }
  }
}
