
#[builtin = "Fork"]
pub trait Fork[T] {
  fn .fork(&self: &T) -> T;
}

#[builtin = "Drop"]
pub trait Drop[T] {
  fn .drop(self: T);
}

pub mod Fork {
  pub impl ref[T]: Fork[&T] {
    fn fork(&&value: &&T) -> &T {
      &value
    }
  }

  pub impl nil: Fork[()] {
    fn fork(&()) -> () {}
  }

  pub impl unary[A+]: Fork[(A,)] {
    fn fork(&(a: A,)) -> (A,) {
      (a,)
    }
  }

  pub impl pair[A+, B+]: Fork[(A, B)] {
    fn fork(&(a: A, b: B)) -> (A, B) {
      (a, b)
    }
  }

  pub impl triple[A+, B+, C+]: Fork[(A, B, C)] {
    fn fork(&(a: A, b: B, c: C)) -> (A, B, C) {
      (a, b, c)
    }
  }

  pub impl quad[A+, B+, C+, D+]: Fork[(A, B, C, D)] {
    fn fork(&(a: A, b: B, c: C, d: D)) -> (A, B, C, D) {
      (a, b, c, d)
    }
  }
}

pub mod Drop {
  pub impl ref[T]: Drop[&T] {
    fn drop(&_: &T) {}
  }

  pub impl nil: Drop[()] {
    fn drop(()) {}
  }

  pub impl unary[A?]: Drop[(A,)] {
    fn drop((_: A,)) {}
  }

  pub impl pair[A?, B?]: Drop[(A, B)] {
    fn drop((_: A, _: B)) {}
  }

  pub impl triple[A?, B?, C?]: Drop[(A, B, C)] {
    fn drop((_: A, _: B, _: C)) {}
  }

  pub impl quad[A?, B?, C?, D?]: Drop[(A, B, C, D)] {
    fn drop((_: A, _: B, _: C, _: D)) {}
  }
}
