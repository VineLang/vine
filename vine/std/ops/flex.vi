
use derive::Composite;

#[builtin = "Fork"]
pub trait Fork[T] {
  fn .fork(&self: &T) -> T;
}

#[builtin = "Drop"]
pub trait Drop[T] {
  fn .drop(self: T);
}

pub mod Fork {
  pub impl ref[T]: Fork[&T] {
    fn fork(&&value: &&T) -> &T {
      &value
    }
  }

  #[become(unsafe::duplicate)]
  pub impl tuple_nil: Fork[()] {
    fn fork(&()) -> () {}
  }

  #[become(unsafe::duplicate)]
  pub impl object_nil: Fork[{}] {
    fn fork(&{}) -> {} {
      {}
    }
  }

  #[become(unsafe::duplicate)]
  pub impl composite[C, I, R; Composite[C, I, R], Fork[I], Fork[R]]: Fork[C] {
    fn fork(&composite: &C) -> C {
      let &(init, rest) = &composite as &(I, R);
      (init, rest) as C
    }
  }
}

pub mod Drop {
  pub impl ref[T]: Drop[&T] {
    fn drop(&_: &T) {}
  }

  #[become(unsafe::erase)]
  pub impl tuple_nil: Drop[()] {
    fn drop(()) {}
  }

  #[become(unsafe::erase)]
  pub impl object_nil: Drop[{}] {
    fn drop({}) {}
  }

  #[become(unsafe::erase)]
  pub impl composite[C, I, R; Composite[C, I, R], Drop[I], Drop[R]]: Drop[C] {
    fn drop(composite: C) {
      (_, _) = composite as (I, R);
    }
  }
}
