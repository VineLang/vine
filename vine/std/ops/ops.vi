
pub mod arithmetic;
pub mod bitwise;
pub mod comparison;
pub mod flex;
pub mod range;
pub mod elementwise;

pub trait Concat[A, B, O] {
  #[builtin = "concat"]
  fn .concat(a: A, b: B) -> O;
}

pub trait Cast[C, T] {
  #[builtin = "cast"]
  fn .cast(value: C) -> T;
}

pub mod Cast {
  pub impl identity[T]: Cast[T, T] {
    fn cast(value: T) -> T {
      value
    }
  }

  pub impl ref[C, T; Cast[C, T], Cast[T, C]]: Cast[&C, &T] {
    fn cast(&c: &C) -> &T {
      let t = c as T;
      let ref = &t;
      c = t as C;
      ref
    }
  }

  pub impl never[T]: Cast[!, T] {
    fn cast(_: !) -> T {
      unsafe::eraser
    }
  }
}

#[builtin = "Fn"]
pub trait Fn[F, P, R] {
  fn .call(f: F, params: P) -> R;
}
