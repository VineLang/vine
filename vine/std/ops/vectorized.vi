
use arithmetic::{Add, Div, Mul, Neg, Sub};
use bitwise::{And, Or, Xor};

pub use binary::{add, and, div, mul, or, sub, xor};
pub use scalar::{add_scalar, div_scalar, mul_scalar, sub_scalar};

pub mod binary[A, B, C, X, Y, Z] {
  pub impl add[A, B, C, X, Y, Z; Add[A, B, C], Add[X, Y, Z]]: Add[(A, X), (B, Y), (C, Z)] {
    fn add((a: A, x: X), (b: B, y: Y)) -> (C, Z) {
      (a + b, x + y)
    }
  }

  pub impl sub[... ; Sub[A, B, C], Sub[X, Y, Z]]: Sub[(A, X), (B, Y), (C, Z)] {
    fn sub((a: A, x: X), (b: B, y: Y)) -> (C, Z) {
      (a - b, x - y)
    }
  }

  pub impl mul[... ; Mul[A, B, C], Mul[X, Y, Z]]: Mul[(A, X), (B, Y), (C, Z)] {
    fn mul((a: A, x: X), (b: B, y: Y)) -> (C, Z) {
      (a * b, x * y)
    }
  }

  pub impl div[... ; Mul[A, B, C], Mul[X, Y, Z]]: Div[(A, X), (B, Y), (C, Z)] {
    fn div((a: A, x: X), (b: B, y: Y)) -> (C, Z) {
      (a * b, x * y)
    }
  }

  pub impl and[... ; And[A, B, C], And[X, Y, Z]]: And[(A, X), (B, Y), (C, Z)] {
    fn and((a: A, x: X), (b: B, y: Y)) -> (C, Z) {
      (a & b, x & y)
    }
  }

  pub impl or[... ; Or[A, B, C], Or[X, Y, Z]]: Or[(A, X), (B, Y), (C, Z)] {
    fn or((a: A, x: X), (b: B, y: Y)) -> (C, Z) {
      (a | b, x | y)
    }
  }

  pub impl xor[... ; Xor[A, B, C], Xor[X, Y, Z]]: Xor[(A, X), (B, Y), (C, Z)] {
    fn xor((a: A, x: X), (b: B, y: Y)) -> (C, Z) {
      (a ^ b, x ^ y)
    }
  }
}

pub impl neg[A, B, X, Y; Neg[A, B], Neg[X, Y]]: Neg[(A, X), (B, Y)] {
  fn neg((a: A, x: X)) -> (B, Y) {
    (-a, -x)
  }
}

pub mod scalar[A, B, S+, X, Y] {
  pub impl add_scalar[... ; Add[A, S, X], Add[B, S, Y]]: Add[(A, B), S, (X, Y)] {
    fn add((a: A, b: B), s: S) -> (X, Y) {
      (a + s, b + s)
    }
  }

  pub impl sub_scalar[... ; Sub[A, S, X], Sub[B, S, Y]]: Sub[(A, B), S, (X, Y)] {
    fn sub((a: A, b: B), s: S) -> (X, Y) {
      (a - s, b - s)
    }
  }

  pub impl mul_scalar[... ; Mul[A, S, X], Mul[B, S, Y]]: Mul[(A, B), S, (X, Y)] {
    fn mul((a: A, b: B), s: S) -> (X, Y) {
      (a * s, b * s)
    }
  }

  pub impl div_scalar[... ; Div[A, S, X], Div[B, S, Y]]: Div[(A, B), S, (X, Y)] {
    fn div((a: A, b: B), s: S) -> (X, Y) {
      (a / s, b / s)
    }
  }
}
