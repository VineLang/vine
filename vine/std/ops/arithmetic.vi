
pub trait Add[A, B, O] {
  #[builtin = "add"]
  fn .add(a: A, b: B) -> O;
}

pub trait Sub[A, B, O] {
  #[builtin = "sub"]
  fn .sub(a: A, b: B) -> O;
}

pub trait Mul[A, B, O] {
  #[builtin = "mul"]
  fn .mul(a: A, b: B) -> O;
}

pub trait Pow[B, E, O] {
  #[builtin = "pow"]
  fn .pow(base: B, exp: E) -> O;
}

pub mod Pow {
  pub fn pow_by_squaring[B; Cast[N32, B], Mul[B, B, B]](base: B, exp: N32) -> B {
    let result = 1 as B;
    while exp != 0 {
      if exp % 2 != 0 {
        result *= base;
      }
      base *= base;
      exp /= 2;
    }
    result
  }
}

pub trait Div[A, B, O] {
  #[builtin = "div"]
  fn .div(a: A, b: B) -> O;
}

pub trait Rem[A, B, O] {
  #[builtin = "rem"]
  fn .rem(a: A, b: B) -> O;
}

pub trait Neg[A, O] {
  #[builtin = "neg"]
  fn .neg(a: A) -> O;
}
