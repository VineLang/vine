
use comparison::Ord;
use data::Iterator;
use ops::arithmetic::{Add, Sub};
use numeric::N64;

pub trait Bound[B, T] {
  fn .left_of(self: &B, value: &T) -> Bool;
  fn .right_of(self: &B, value: &T) -> Bool;
}

pub mod Bound {
  #[builtin = "BoundUnbounded"]
  pub struct Unbounded(pub ());
  #[builtin = "BoundInclusive"]
  pub struct Inclusive[T](pub T);
  #[builtin = "BoundExclusive"]
  pub struct Exclusive[T](pub T);

  pub mod Unbounded {
    pub impl bound[T]: Bound[Unbounded, T] {
      fn left_of(self: &Unbounded, &_value: &T) -> Bool {
        true
      }
      fn right_of(self: &Unbounded, &_value: &T) -> Bool {
        true
      }
    }

    pub impl fork: Fork[Unbounded];
    pub impl drop: Drop[Unbounded];
  }

  pub mod Inclusive {
    pub impl bound[T; Ord[T]]: Bound[Inclusive[T], T] {
      fn left_of(&Inclusive[T](bound), &value: &T) -> Bool {
        bound <= value
      }
      fn right_of(&Inclusive[T](bound), &value: &T) -> Bool {
        value <= bound
      }
    }

    pub impl fork[T+]: Fork[Inclusive[T]];
    pub impl drop[T?]: Drop[Inclusive[T]];
  }

  pub mod Exclusive {
    pub impl bound[T; Ord[T]]: Bound[Exclusive[T], T] {
      fn left_of(&Exclusive[T](bound), &value: &T) -> Bool {
        bound < value
      }
      fn right_of(&Exclusive[T](bound), &value: &T) -> Bool {
        value < bound
      }
    }

    pub impl fork[T+]: Fork[Exclusive[T]];
    pub impl drop[T?]: Drop[Exclusive[T]];
  }
}

#[builtin = "Range"]
pub struct Range[B1, B2](pub (B1, B2));

pub mod Range {
  pub fn .contains[B1, B2, T; Bound[B1, T], Bound[B2, T]](&Range[B1, B2](start, end), &value: &T) -> Bool {
    start.left_of(&value) && end.right_of(&value)
  }

  use Bound::{Exclusive, Inclusive};

  pub trait Step[T] {
    fn .step(x: T) -> T;
  }

  pub mod Step {
    pub impl n32: Step[N32] {
      fn step(x: N32) -> N32 {
        x + 1
      }
    }

    pub impl i32: Step[I32] {
      fn step(x: I32) -> I32 {
        x + +1
      }
    }

    pub impl n64: Step[N64] {
      fn step(x: N64) -> N64 {
        x + N64::one
      }
    }
  }

  pub impl iterator[T*; Ord[T], Step[T]]: Iterator[Range[Inclusive[T], Exclusive[T]], T] {
    fn advance(Range[Inclusive[T], Exclusive[T]](Inclusive[T](start), end)) -> Option[
      (T, Range[Inclusive[T], Exclusive[T]]);
    ] {
      if end.right_of(&start) {
        Some(start, Range(Inclusive(start.step()), end))
      } else {
        None
      }
    }
  }

  pub impl fork[B1+, B2+]: Fork[Range[B1, B2]];
  pub impl drop[B1?, B2?]: Drop[Range[B1, B2]];
}
