
const max_iter: N32 = 50;
const width: N32 = 512;
const height: N32 = 512;
const scale: F32 = 2.6;
const center: (F32, F32) = (-0.8, 0.0);

pub fn main(&io: &IO) {
  io.print_bytes([27, 80, 113]);

  let c = 0;
  while c <= 100 {
    io.print_char('#');
    io.print(c.to_string());
    io.print_char(';');
    io.print_char('2');
    io.print_char(';');
    io.print(c.to_string());
    io.print_char(';');
    io.print(c.to_string());
    io.print_char(';');
    io.print(c.to_string());
    c += 1;
  }

  let j = 0;
  let row = 1;
  while j < height {
    let last_color = 0;
    let count = 0;
    io.print("#0");

    let i = 0;
    while i < width {
      let (x, y) = center + scale / width * ((i, j) + 0.5 - (width, height) / 2.0);
      let color = mandelbrot(x, y);

      if color != last_color {
        io.print_char('!');
        io.print(count.to_string());
        io.print_byte(63 + row);
        io.print_char('#');
        io.print(color.to_string());
        count = 1;
      } else {
        count += 1;
      }
      last_color = color;

      i += 1;
    }

    io.print_char('!');
    io.print(count.to_string());
    io.print_byte(63 + row);

    row *= 2;
    io.print_char(if row > 32 {
      row = 1;
      '-'
    } else {
      row = row;
      '$'
    });

    j += 1;
  }
  io.print_bytes([27, 92]);
  io.flush();
}

fn mandelbrot(x0: F32, y0: F32) -> N32 {
  let x = 0.0;
  let y = 0.0;
  let x2 = 0.0;
  let y2 = 0.0;
  let i = 0;
  while (i < max_iter) & (x2 + y2 < 4.0) {
    i += 1;
    (x, y) = (x2 - y2 + x0, 2.0 * x * y + y0);
    x2 = x * x;
    y2 = y * y;
  }
  (i * 101 / max_iter) % 101
}
