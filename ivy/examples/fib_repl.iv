
::main {
  fn(io0 _)
  io0 = @io_print_byte(62 @io_print_byte(32 @io_flush(0 io1)))
  ::read_num = fn(ref(io1 io2) dup(n0 n1))
  n0 = ?(_ ::main::cont fn(io2 fn(n1 _)))
}

::main::cont {
  fn(io0 fn(n _))
  ::fib = fn(n f)
  ::print_num = fn(ref(io0 io1) f)
  ::main = fn(io1 _)
}

::fib {
  fn(n o)
  ::fib::loop = fn(n fn(0 fn(1 o)))
}

::fib::loop {
  fn(dup(n0 n1) r)
  n0 = ?(
    ::fib::end
    ::fib::cont
    fn(n1 r)
  )
}

::fib::cont {
  fn(n0 fn(a fn(dup(b0 b1) o)))
  n0 = @n32_sub(1 n1)
  a = @n32_add(b0 c)
  ::fib::loop = fn(n1 fn(b1 fn(c o)))
}

::fib::end {
  fn(_ fn(a fn(_ a)))
}

::read_num {
  fn(ior n)
  ::read_num::loop = fn(ior fn(0 n))
}

::read_num::loop {
  fn(ref(dup(io0 io1) io2) s)
  io0 = @io_read_byte(10 dup(byte0 byte1))
  byte0 = @n32_eq(10 ?(
    ::read_num::cont
    ::read_num::end
    fn(ref(io1 io2) fn(byte1 s))
  ))
}

::read_num::cont {
  fn(ior fn(byte fn(n0 n2)))
  byte = @n32_sub(48 digit)
  n0 = @n32_mul(10 @n32_add(digit n1))
  ::read_num::loop = fn(ior fn(n1 n2))
}

::read_num::end {
  fn(ref(io io) fn(_ fn(n n)))
}

::print_num {
  fn(ref(io0 io2) fn(dup(num0 num1) _))
  num0 = ?(
    ::print_num::zero
    ::print_num::loop
    fn(ref(io0 io1) fn(num1 _))
  )
  io1 = @io_print_byte(10 @io_flush(0 io2))
}

::print_num::zero {
  fn(ref(io0 io1) _)
  io0 = @io_print_byte(48 io1)
}

::print_num::loop {
  fn(ref(io0 io2) fn(dup(n0 n1) _))
  n0 = @n32_rem(10 @n32_add(48 digit))
  n1 = @n32_div(10 dup(rest0 rest1))
  rest0 = ?(
    ::print_num::end
    ::print_num::loop
    fn(ref(io0 io1) fn(rest1 _))
  )
  io1 = @io_print_byte(digit io2)
}

::print_num::end {
  fn(ref(io io) _)
}
