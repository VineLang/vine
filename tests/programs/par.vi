
use std::{ops::Cast, rng::Pcg32};

trait Session[A, B] {
  fn _fork(a: ~A) -> B;
}

mod Session {
  pub fn fork[A, B, F; Session[A, B], fn F(A)](f: F) -> B {
    let a;
    let b = Session::_fork[A, B](~a);
    f(a);
    b
  }
}

impl nil_session: Session[(), ()] {
  fn _fork(~()) -> () {}
}

struct Channel[T, S]((T, S));

type Recv[T, S] = Channel[T, S];
type Send[T, S] = Channel[~T, S];

mod Channel {
  pub fn .recv[T, S](Channel[T, S](t, s)) -> (T, S) {
    (t, s)
  }

  pub fn .recv1[T](Channel[T, ()](t, ())) -> T {
    t
  }

  pub fn .send[T, S](Channel[~T, S](~out, s), value: T) -> S {
    out = value;
    s
  }

  pub fn .send1[T](Channel[~T, ()](~out, ()), value: T) {
    out = value;
  }

  pub fn .choose[T, P, Q, F; Session[P, Q], fn F(P) -> T](Channel[~T, ()](~out, ()), choice: F) -> Q {
    Session::fork[P, Q, _](fn (p: P) {
      out = choice(p);
    })
  }
}

impl channel_session[T, P, Q; Session[P, Q]]: Session[Recv[T, P], Send[T, Q]] {
  fn _fork(~out: ~Recv[T, P]) -> Send[T, Q] {
    let value;
    Channel(~value, Session::fork[P, Q, _](fn (s) { out = Channel(value, s) }))
  }
}

enum Move {
  Up,
  Down,
}

mod Move {
  pub impl to_string: Cast[Move, String] {
    fn cast(self: Move) -> String {
      match self {
        Up { "Up" }
        Down { "Down" }
      }
    }
  }

  pub impl fork: Fork[Move] {
    fn fork(&self: &Move) -> Move {
      match &self {
        &Up { Up }
        &Down { Down }
      }
    }
  }
}

enum Outcome {
  Win,
  Loss,
  Draw(Round),
}

type Round = Send[Move, Recv[Outcome, ()]];
type Player = Recv[Move, Send[Outcome, ()]];

enum Winner {
  First,
  Second,
  Third,
}

type Game = Send[(Player, Player, Player), Recv[Winner, ()]];
type GameDual = Recv[(Player, Player, Player), Send[Winner, ()]];

fn start_playing(&io: &IO) -> Game {
  use Move::{Down, Up};
  use Outcome::{Draw, Loss, Win};
  use Winner::{First, Second, Third};

  Session::fork[_, Game, _](fn (game: GameDual) {
    let ((player1, player2, player3), winner) = game.recv();

    loop {
      let (move1, outcome1) = player1.recv();
      let (move2, outcome2) = player2.recv();
      let (move3, outcome3) = player3.recv();

      io.println("{move1} {move2} {move3}");

      let fn win1() {
        outcome1.send1(Win);
        outcome2.send1(Loss);
        outcome3.send1(Loss);
        winner.send1(First);
      }

      let fn win2() {
        outcome1.send1(Loss);
        outcome2.send1(Win);
        outcome3.send1(Loss);
        winner.send1(Second);
      }

      let fn win3() {
        outcome1.send1(Loss);
        outcome2.send1(Loss);
        outcome3.send1(Win);
        winner.send1(Third);
      }

      let fn draw() {
        player1 = outcome1.choose[_, _, Player, _](fn (x) { Draw(x) });
        player2 = outcome2.choose[_, _, Player, _](fn (x) { Draw(x) });
        player3 = outcome3.choose[_, _, Player, _](fn (x) { Draw(x) });
        io.println("Draw...");
      }

      match (move1, move2, move3) {
        (Up, Down, Down) { win1() }
        (Down, Up, Up) { win1() }
        (Down, Up, Down) { win2() }
        (Up, Down, Up) { win2() }
        (Down, Down, Up) { win3() }
        (Up, Up, Down) { win3() }
        (Up, Up, Up) {
          draw();
          continue;
        }
        (Down, Down, Down) {
          draw();
          continue;
        }
      }
    }
  })
}

fn random_player(&rng: &Pcg32) -> Player {
  let fn random_move() {
    if rng.gen_n32() & 1 == 0 {
      Move::Up
    } else {
      Move::Down
    }
  }
  Session::fork[Round, _, _](fn (round: Round) {
    while round.send(random_move()).recv1() is Outcome::Draw(next_round) {
      round = next_round;
    }
  })
}

pub fn main(&io: &IO) {
  let p1 = Pcg32::seeded("Alice");
  let p2 = Pcg32::seeded("Bob");
  let p3 = Pcg32::seeded("Charlie");
  let i = 0;
  while i < 10 {
    let winner = start_playing(&io).send((
      random_player(&p1),
      random_player(&p2),
      random_player(&p3),
    )).recv1();
    io.println(match winner {
      Winner::First { "Alice wins!\n" }
      Winner::Second { "Bob wins!\n" }
      Winner::Third { "Charlie wins!\n" }
    });
    i += 1;
  }
}
