
pub fn main(&io: &IO) {
  let list = [0];
  while list.len() < 32 {
    list ++= list.map(fn(x: N32) { list.len() + x });
  }

  while list.pop_front() is Some(val) {
    cycle(&list, val);
    io.println("{val};\t{list}");
  }
}

fn cycle[T](&list: &List[T], count: N32) {
  let len = list.len();
  if len != 0 {
    count = count % len;
    while count != 0 {
      let el = list.pop_front().unwrap();
      list.push_back(el);
      count -= 1;
    }
  }
}
