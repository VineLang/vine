
use std::numeric::N64;

pub fn main(&io: &IO) {
  let input = io.full_input();

  let machines = input.split("\n\n");

  let offset = 10.as[N64].pow_n32(13);

  let part1 = 0;
  let part2 = N64::zero;
  while machines.pop_front() is Some(machine) {
    let (_, r) = machine.split_once("+");
    let (ax, r) = r.unwrap().split_once(", Y+");
    let (ay, r) = r.unwrap().split_once("\nButton B: X+");
    let (bx, r) = r.unwrap().split_once(", Y+");
    let (by, r) = r.unwrap().split_once("\nPrize: X=");
    let (px, r) = r.unwrap().split_once(", Y=");
    let (py, _) = r.unwrap().split_once("\n");
    let ax = N32::parse(ax).unwrap();
    let ay = N32::parse(ay).unwrap();
    let bx = N32::parse(bx).unwrap();
    let by = N32::parse(by).unwrap();
    let px = N32::parse(px).unwrap();
    let py = N32::parse(py).unwrap();

    let det = N32::diff(ax * by, ay * bx);
    let a = N32::diff(by * px, bx * py) / det;
    let b = N32::diff(ax * py, ay * px) / det;
    let x = ax * a + bx * b;
    let y = ay * a + by * b;
    if x == px && y == py {
      part1 += a * 3 + b;
    }

    let px = offset + px as N64;
    let py = offset + py as N64;
    let (a, _) = N64::diff(by as N64 * px, bx as N64 * py).div_rem_n32(det);
    let (b, _) = N64::diff(ax as N64 * py, ay as N64 * px).div_rem_n32(det);
    let x = a * ax as N64 + b * bx as N64;
    let y = a * ay as N64 + b * by as N64;
    if x == px && y == py {
      part2 += a * 3 as N64 + b;
    }
  }

  io.println("Part 1: {part1}");
  io.println("Part 2: {part2}");
}
