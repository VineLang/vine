
use std::{data::{Array, Map}, numeric::N64};

pub fn main(&io: &IO) {
  let map = Map::empty[String, _];

  while io.read_line() is Some(line) && line.len() != 0 {
    let (name, value) = line.split_once(": ");
    let value = value.unwrap()!.get(0).unwrap() == '1';
    unsafe::erase(map.insert(name, Wire::input(value)));
  }

  let fn at_wire(wire) {
    map.at_or_insert[; _, _, unsafe::erase](wire, Wire::new())
  }

  while io.read_line() is Some(line) {
    let pieces = line.split(" ");
    let wire_a = unsafe::move(pieces.at(0).unwrap());
    let wire_b = unsafe::move(pieces.at(2).unwrap());
    let wire_out = unsafe::move(pieces.at(4).unwrap());
    let a = (*at_wire(wire_a)).get();
    let b = (*at_wire(wire_b)).get();
    let op = (*pieces.at(1).unwrap())!.get(0).unwrap();
    let out = when {
      op == 'A' { a & b }
      op == 'O' { a | b }
      _ { a ^ b }
    };
    (*at_wire(wire_out)).set(out);
  }

  let part1 = N64::zero;
  let &~n = &part1;
  let i = 0;
  loop {
    let wire = ['z', '0' + i / 10, '0' + i % 10] as String;
    if map.at(&wire) is Some(&wire) {
      let bit = if wire.get() {
        N64::one
      } else {
        N64::zero
      };
      ~n ~= (~n << 1) | bit;
      i += 1;
      continue;
    }
  }

  io.println("Part 1: {part1}");

  unsafe::erase(map);
}

struct Wire((~Bool, Bool));

mod Wire {
  pub fn new() -> Wire {
    let x;
    Wire(~x, x)
  }

  pub fn .input(value: Bool) -> Wire {
    Wire(unsafe::eraser, value)
  }

  pub fn .get(&Wire(_, value)) -> Bool {
    value
  }

  pub fn .set(&Wire(~out, _), value: Bool) {
    out = value;
  }
}
