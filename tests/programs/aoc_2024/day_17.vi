
use std::data::Array;

pub fn main(&io: &IO) {
  let input = io.full_input();

  let fn read_value() {
    let (_, rest) = input.split_once(": ");
    let (value, rest) = rest.unwrap().split_once("\n");
    input = rest.unwrap();
    value
  }

  let a = N32::parse(read_value()).unwrap();
  let b = N32::parse(read_value()).unwrap();
  let c = N32::parse(read_value()).unwrap();

  let program = read_value().split(",").map(fn* (x) { N32::parse(x).unwrap() });
  let program = program as Array;

  let output = [];

  let ip = 0;
  let steps = 100;
  while ip < program.len() && steps != 0 {
    steps -= 1;
    let &opcode = program.at(ip).unwrap();
    let &operand = program.at(ip + 1).unwrap();
    let fn combo() {
      when {
        operand == 4 { a }
        operand == 5 { b }
        operand == 6 { c }
        _ { operand }
      }
    }
    when {
      opcode == 0 {
        a >>= combo();
      }
      opcode == 1 {
        b ^= operand;
      }
      opcode == 2 {
        b = combo() & 7;
      }
      opcode == 3 {
        if a != 0 {
          ip = operand - 2;
        }
      }
      opcode == 4 {
        b ^= c;
      }
      opcode == 5 {
        let n = combo() & 7;
        output ++= [n];
      }
      opcode == 6 {
        b = a >> combo();
      }
      opcode == 7 {
        c = a >> combo();
      }
    }
    ip += 2;
  }

  let output = output.map(fn* (x: N32) { "{x}" }).join(",");
  io.println("Part 1: {output}");
}
