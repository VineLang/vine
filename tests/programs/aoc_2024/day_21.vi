
use std::{data::Array, numeric::N64};

pub fn main(&io: &IO) {
  let lines = io.full_input().split_trim("\n");

  let sum = 0;
  for line in lines.into_iter() {
    let fn test_seed(seed: N32) {
      let line = control_string('A', line, seed, control_numeric);
      let line = control_string('A', line, 0, control_directional);
      let line = control_string('A', line, 0, control_directional);
      line.len()
    }
    let len = test_seed(0).min(test_seed(1)).min(test_seed(2)).min(test_seed(3));
    let (num, _) = line.split_once("A");
    let num = N32::parse(num).unwrap();
    sum += num * len;
  }

  io.println("Part 1: {sum}");

  let c = base_cost_func();
  let i = 0;
  while i < 25 {
    c = cost_func(c, 6, 1);
    i += 1;
  }
  c = cost_func(c, 12, 0);

  let sum = N64::zero;
  for line in lines.into_iter() {
    let orig = line;
    let cost = N64::zero;
    let last = 2;
    for char in line!.into_iter() {
      let fn pos(x: Char) {
        if x == '0' {
          1
        } else if x == 'A' {
          2
        } else {
          (x - '1') + 3
        }
      }
      let to = pos(char);
      cost += (*c.at(last).unwrap()).get(to).unwrap();
      last = to;
    }
    let (num, _) = orig.split_once("A");
    let num = N32::parse(num).unwrap();
    sum += cost * num as N64;
  }

  io.println("Part 2: {sum}");
}

fn control_string[F*; fn F(Char, Char, Bool) -> String](cur: Char, string: String, seed: N32, f: F) -> String {
  let out = "";
  for next in string!.into_iter() {
    out ++= f(cur, next, seed & 1 != 0);
    cur = next;
    seed /= 2;
  }
  out
}

fn control_numeric(from: Char, to: Char, horiz: Bool) -> String {
  let fn pos(x: Char) {
    if x == '0' {
      1
    } else if x == 'A' {
      2
    } else {
      (x - '1') + 3
    }
  }
  let str = "";
  let from = pos(from);
  let to = pos(to);
  let fx = from % 3;
  let fy = from / 3;
  let tx = to % 3;
  let ty = to / 3;
  horiz = (horiz || (fx == 0 && ty == 0)) && !(fy == 0 && tx == 0);
  let str = "";
  if horiz {
    str ++= ">".repeat(pos_diff(tx, fx));
    str ++= "<".repeat(pos_diff(fx, tx));
  }
  str ++= "v".repeat(pos_diff(fy, ty));
  str ++= "^".repeat(pos_diff(ty, fy));
  if !horiz {
    str ++= ">".repeat(pos_diff(tx, fx));
    str ++= "<".repeat(pos_diff(fx, tx));
  }
  str ++ "A"
}

fn control_directional(from: Char, to: Char, _: Bool) -> String {
  let fn pos(x: Char) {
    if x == '<' {
      0
    } else if x == 'v' {
      1
    } else if x == '>' {
      2
    } else if x == '^' {
      4
    } else {
      5
    }
  }
  let str = "";
  let from = pos(from);
  let to = pos(to);
  let fx = from % 3;
  let fy = from / 3;
  let tx = to % 3;
  let ty = to / 3;
  let str = "";
  str ++= "v".repeat(pos_diff(fy, ty));
  str ++= "<".repeat(pos_diff(fx, tx));
  str ++= ">".repeat(pos_diff(tx, fx));
  str ++= "^".repeat(pos_diff(ty, fy));
  str ++ "A"
}

fn pos_diff(a: N32, b: N32) -> N32 {
  if b > a {
    0
  } else {
    a - b
  }
}

type CostFunc = Array[Array[N64]];

fn base_cost_func() -> CostFunc {
  Array::new(6, Array::new(6, N64::one))
}

fn cost_func(c: CostFunc, size: N32, dead_row: N32) -> CostFunc {
  let o = Array::new(size, Array::new(size, unsafe::eraser[N64]));
  let from = 0;
  while from < size {
    let to = 0;
    while to < size {
      let fn test(horiz: Bool) {
        let cost = N64::zero;
        let fx = from % 3;
        let fy = from / 3;
        let tx = to % 3;
        let ty = to / 3;
        let last = 5;
        let fn press(button: N32) {
          cost += (*c.at(last).unwrap()).get(button).unwrap();
          last = button;
        }
        let fn do_horiz() {
          while fx < tx {
            press(2)
            fx += 1;
          }
          while fx > tx {
            press(0)
            fx -= 1;
          }
        }
        let fn do_vert() {
          while fy < ty {
            press(4)
            fy += 1;
          }
          while fy > ty {
            press(1)
            fy -= 1;
          }
        }
        let horiz = (horiz || fx == 0 && ty == dead_row) && !(fy == dead_row && tx == 0);
        if horiz {
          do_horiz();
          do_vert();
        } else {
          do_vert();
          do_horiz();
        }
        press(5);
        cost
      }
      let cost = test(true).min(test(false));
      *(*o.at(from).unwrap()).at(to).unwrap() = cost;
      to += 1;
    }
    from += 1;
  }
  o
}
