
use std::{data::Array, numeric::N64};

pub fn main(&io: &IO) {
  let patterns = io.read_line().unwrap().split(", ");

  io.read_line();

  let possible = 0;
  let ways = N64::zero;
  while io.read_line() is Some(design) {
    let count = match_counts(design, patterns).pop_back().unwrap();
    if count != N64::zero {
      possible += 1;
      ways += count;
    }
  }

  io.println("Part 1: {possible}");
  io.println("Part 2: {ways}");
}

fn match_counts(design: String, patterns: List[String]) -> Array[N64] {
  if design.len() == 0 {
    Array::single(N64::one)
  } else {
    let tail = design;
    tail!.pop_front();
    let array = match_counts(tail, patterns);
    let total = N64::zero;
    for pat in patterns.into_iter() {
      if design.strip_prefix(&pat) is Ok(remaining) {
        total += array.get(remaining.len()).unwrap();
      }
    }
    array.push_back(total);
    array
  }
}
