
use std::{
  option::Option::{Option, Some, None},
  result::Result::{Result, Ok, Err},
  array::Array,
  n64::N64,
};

pub fn main(&io: &IO) {
  let patterns = io.read_line().unwrap().split(", ");

  io.read_line();

  let possible = 0;
  let ways = N64::zero;
  while io.read_line() is Some(design) {
    let count = (match_counts(design, patterns); _).pop_back().unwrap();
    if !count.eq(N64::zero) {
      possible += 1;
      ways = ways.add(count);
    }
  }

  io.println("Part 1: " ++ possible.to_string());
  io.println("Part 2: " ++ ways.to_string());
}

fn match_counts(design: String, patterns: List[String]) -> Array[N64] {
  if design.len() == 0 {
    Array::single(N64::one)
  } else {
    let tail = design;
    tail.pop_front();
    let array = match_counts(tail, patterns);
    let total = N64::zero;
    while patterns.pop_front() is Some(pat) {
      if design.strip_prefix(&pat) is Ok(remaining) {
        total = total.add(*array.get(remaining.len()));
      }
    }
    array.push_back(total);
    array
  }
}
