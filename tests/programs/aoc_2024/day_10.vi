
use std::{data::Iterator::Fused, ops::elementwise};

pub fn main(&io: &IO) {
  let input = io.full_input();

  let id = 0;
  let scores = 0;
  let ratings = 0;
  cross(
    input.split_trim("\n").map(fn* (String(chars)) { chars }),
    fn* (char: Char, Neighbors(n, s, e, w)) {
      let Channel((nit, nis), ~(not, nos)) = n;
      let Channel((sit, sis), ~(sot, sos)) = s;
      let Channel((eit, eis), ~(eot, eos)) = e;
      let Channel((wit, wis), ~(wot, wos)) = w;
      not = char;
      sot = char;
      eot = char;
      wot = char;
      let x = if char == '0' {
        let i = id;
        id += 1;
        (set(i), 1)
      } else {
        let prev = char - 1;
        let in_s = zero_set;
        let in_n = 0;
        let fn recv(t: Char, (s: Set, n: N32)) {
          if t == prev {
            in_s |= s;
            in_n += n;
          }
        }
        recv(nit, nis);
        recv(sit, sis);
        recv(eit, eis);
        recv(wit, wis);
        if char == '9' {
          scores += count(in_s);
          ratings += in_n;
          unsafe::eraser
        } else {
          (in_s, in_n)
        }
      };
      nos = x;
      sos = x;
      eos = x;
      wos = x;
    },
    ('.', (zero_set, 0)),
  );

  io.println("Scores: {scores}");
  io.println("Ratings: {ratings}");
}

type Set = (N32, N32, N32, N32, N32, N32, N32, N32);

const zero_set: Set = (0, 0, 0, 0, 0, 0, 0, 0);

fn set(n: N32) -> Set {
  let x = 1 << n;
  fn f[T](b: N32, x: T, z: T) -> (T, T) {
    if b == 0 {
      (x, z)
    } else {
      (z, x)
    }
  }
  let x = f(n & 32, x, 0);
  let x = f(n & 64, x, (0, 0));
  let (((a, b), (c, d)), ((e, f), (g, h))) = f(n & 128, x, ((0, 0), (0, 0)));
  (a, b, c, d, e, f, g, h)
}

fn count((a, b, c, d, e, f, g, h): Set) -> N32 {
  let fn c32(x: N32) {
    let n = 0;
    while x != 0 {
      n += x & 1;
      x >>= 1;
    }
    n
  }
  c32(a) + c32(b) + c32(c) + c32(d) + c32(e) + c32(f) + c32(g) + c32(h)
}

struct Channel[M]((M, ~M));

mod Channel {
  pub fn .send[M](Channel[M](got, ~out), value: M) -> M {
    out = value;
    got
  }

  pub fn get[M+](&Channel[M](i, _)) -> M {
    i
  }
}

fn relay(Channel[Char](ai, ~ao), Channel[Char](bi, ~bo), recv: Char, send: Char) {
  bo = if ai == recv {
    send
  } else {
    '_'
  };
  ao = if bi == recv {
    send
  } else {
    '_'
  };
}

fn check(Channel[Char](i, ~o), recv: Char) -> N32 {
  o = '_';
  if i == recv {
    1
  } else {
    0
  }
}

struct Neighbors[M]((Channel[M], Channel[M], Channel[M], Channel[M]));

fn cross[M*, F*; fn F(Char, Neighbors[M])](grid: List[List[Char]], f: F, d: M) {
  let width = (*grid.at(0).unwrap()).len();
  let north = List::new[; unsafe::duplicate, unsafe::erase](width, neglect_channel(d));
  for row in grid.into_iter() {
    let west = neglect_channel(d);
    do {
      let north = Fused::new(north.iter());
      for cell in row.into_iter() {
        let (w, e) = foo_channel(&west);
        let (n, s) = foo_channel(north.next().unwrap());
        f(cell, Neighbors(n, s, e, w));
      }
    }
    west.send(d);
  }
  drop_all(north, d);
}

fn drop_all[M*](c: List[Channel[M]], d: M) {
  for c in c.into_iter() {
    c.send(d);
  }
}

fn foo_channel[M](&c: &Channel[M]) -> (Channel[M], Channel[M]) {
  let x = c;
  let (a, b) = new_channel();
  c = a;
  (x, b)
}

fn new_channel[M]() -> (Channel[M], Channel[M]) {
  let a;
  let b;
  let x = ~a;
  let y = ~b;
  (Channel(a, y), Channel(b, x))
}

fn neglect_channel[M](d: M) -> Channel[M] {
  Channel(d, unsafe::eraser)
}
