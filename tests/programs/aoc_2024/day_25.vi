
pub fn main(&io: &IO) {
  let locks = [];
  let keys = [];

  while io.read_line() is Some(line) {
    let on = line!.get(0).unwrap();
    let is_lock = on == '#';
    let heights = List::new(5, 1);
    while io.read_line() is Some(line) && line.len() != 0 {
      let i = 0;
      for char in line!.into_iter() {
        if char == on {
          *heights.at(i).unwrap() += 1;
        }
        i += 1;
      }
    }
    if is_lock {
      locks.push_back(heights);
    } else {
      keys.push_back(heights);
    }
  }

  let sum = 0;
  for key in keys.into_iter() {
    let n = 0;
    for lock in locks.into_iter() {
      if fits(lock, key) {
        n += 1;
      }
    }
    sum += n;
  }

  io.println("Part 1: {sum}");
}

fn fits(lock: List[N32], key: List[N32]) -> Bool {
  while lock.pop_front() is Some(a) && key.pop_front() is Some(b) {
    if a > b {
      break false;
    }
  } else {
    true
  }
}
