
use std::{data::{Array, Map}, ops::elementwise};

pub fn main(&io: &IO) {
  let grid = [];
  let start = (0, 0);
  let end = (0, 0);
  while io.read_line() is Some(line) {
    let row = [];
    for char in line!.into_iter() {
      when {
        char == 'S' {
          start = (row.len(), grid.len());
        }
        char == 'E' {
          end = (row.len(), grid.len());
        }
      }
      row.push_back((
        char != '#',
        [
          (N32::maximum, unsafe::eraser),
          (N32::maximum, unsafe::eraser),
          (N32::maximum, unsafe::eraser),
          (N32::maximum, unsafe::eraser),
        ],
        false,
      ));
    }
    grid.push_back(row as Array);
  }
  let grid = grid as Array;

  let pq = Map::empty[N32, _];
  pq.insert(0, [(start, 0)]);

  let fn try_insert(dist: N32, pos: (N32, N32), dir) {
    let (x, y) = pos;
    let &(passable, dirs, _) = (*grid.at(y).unwrap()).at(x).unwrap();
    if passable {
      let &(min_dist, used) = dirs.at(dir).unwrap();
      if dist < min_dist {
        ~used = false;
        min_dist = dist;
        (*pq.at_or_insert(dist, [])).push_back((pos, dir))
      }
      if dist == min_dist {
        ~used
      } else {
        false
      }
    } else {
      false
    }
  }

  let part1 = 0;
  let part2 = 0;
  let done = false;
  while !done && pq.remove_min() is Some(dist, heads) {
    for (pos, dir) in heads.into_iter() {
      let (px, py) = pos;
      let &(_, dirs, counted) = (*grid.at(py).unwrap()).at(px).unwrap();
      let &(min_dist, ~used) = dirs.at(dir).unwrap();
      if dist <= min_dist {
        min_dist = dist;
        let (ex, ey) = end;
        if px == ex && py == ey {
          used = true;
          done = true;
          part1 = dist;
        }
        if !done {
          let dir_l = (dir + 3) % 4;
          let dir_r = (dir + 1) % 4;
          used |= try_insert(dist + 1, pos + delta(dir), dir);
          used |= try_insert(dist + 1000, pos, dir_l);
          used |= try_insert(dist + 1000, pos, dir_r);
        }
        if used && !counted {
          part2 += 1;
          counted = true;
        }
      }
    }
  }

  for row in grid.as[List].into_iter() {
    for (_, dirs, _) in row.as[List].into_iter() {
      for x in dirs.into_iter() {
        let (_, ~used) = x;
        used = false;
      }
    }
  }

  io.println("Part 1: {part1}");

  io.println("Part 2: {part2}");
}

fn delta(dir: N32) -> (N32, N32) {
  let x = if dir & 2 == 0 {
    1
  } else {
    -1 as N32
  };
  if dir & 1 == 0 {
    (x, 0)
  } else {
    (0, x)
  }
}
