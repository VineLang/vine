
pub fn main(&io: &IO) {
  let input = io.full_input();

  let lines = input.split_trim("\n");

  let safe_count = 0;
  let dampened_safe_count = 0;

  for line in lines.into_iter() {
    let report = line.split(" ").map(fn* (x) { N32::parse(x).unwrap() });
    when {
      is_safe(report) {
        safe_count += 1;
        dampened_safe_count += 1;
      }
      problem_dampener(report) {
        dampened_safe_count += 1;
      }
    }
  }

  io.println("Safe Count: {safe_count}");
  io.println("Dampened Safe Count: {dampened_safe_count}");
}

fn is_safe(report: List[N32]) -> Bool {
  let last = None[N32];
  let order = None[Bool];
  for level in report.into_iter() {
    if last is Some(last) {
      let diff = if last > level {
        last - level
      } else {
        level - last
      };
      if !(1 <= diff <= 3) {
        break false;
      }
      if order is Some(order) && order != (last > level) {
        break false;
      }
      order = Some(last > level);
    }
    last = Some(level);
  } else {
    true
  }
}

fn problem_dampener(report: List[N32]) -> Bool {
  let prefix = [];
  let suffix = report;
  while suffix.pop_front() is Some(level) {
    if is_safe(prefix ++ suffix) {
      break true;
    }
    prefix ++= [level];
  } else {
    false
  }
}
