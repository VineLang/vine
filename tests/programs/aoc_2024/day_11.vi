
use std::{data::Map, numeric::N64};

const max: N32 = 75;

pub fn main(&io: &IO) {
  let input = io.read_line().unwrap();

  let stones = Map::empty[N64, _];
  let input = input.split(" ");
  for stone in input.into_iter() {
    let stone = N32::parse(stone).unwrap() as N64;
    stones.insert(stone, N64::one);
  }

  let i = 0;
  while i < max {
    stones = blink(&io, stones);
    i += 1;
    io.println("{i}: {count(&stones)}");
  }
}

fn blink(&io: &IO, old: Map[N64, N64]) -> Map[N64, N64] {
  let new = Map::empty[N64, _];
  let fn add_stones(number: N64, count: N64) {
    let &c = new.at_or_insert(number, N64::zero);
    c += count;
  }
  for (number, count) in old.into_iter() {
    if number == N64::zero {
      add_stones(N64::one, count);
    } else {
      let digits = number.log_n32(10) + 1;
      if digits % 2 == 0 {
        let d = 10 ** (digits / 2);
        let (a, b) = number.div_rem_n32(d);
        add_stones(a, count);
        add_stones(b as N64, count);
      } else {
        add_stones(number * 2024 as N64, count);
      }
    }
  }
  new
}

fn count(&stones: &Map[N64, N64]) -> N64 {
  let n = N64::zero;
  for &(_, count) in stones.iter() {
    n += count;
  }
  n
}
