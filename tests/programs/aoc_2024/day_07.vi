
use std::numeric::N64;

pub fn main(&io: &IO) {
  let part1 = 0 as N64;
  let part2 = 0 as N64;
  while io.read_line() is Some(line) {
    let (goal, rest) = line.split_once(": ");
    let goal = N64::parse(goal).unwrap();
    let nums = rest.unwrap().split(" ");
    let results = [N32::parse(nums.pop_front().unwrap()).unwrap() as N64];
    let results2 = [];
    for num in nums.into_iter() {
      let len = num.len();
      let num = N32::parse(num).unwrap() as N64;
      let add = results.map(fn* (x: N64) { x + num });
      let mul = results.map(fn* (x: N64) { x * num });
      let pow = 1;
      while len > 0 {
        pow *= 10;
        len -= 1;
      }
      let add2 = results2.map(fn* (x: N64) { x + num });
      let mul2 = results2.map(fn* (x: N64) { x * num });
      let concat = (results ++ results2).map(fn* (x: N64) { x * pow as N64 + num });
      results = add ++ mul;
      results2 = add2 ++ mul2 ++ concat;
    }
    do {
      for num in results.into_iter() {
        if num == goal {
          part1 += goal;
          part2 += goal;
          break.do;
        }
      }
      for num in results2.into_iter() {
        if num == goal {
          part2 += goal;
          break.do;
        }
      }
    }
  }

  io.println("Part 1: {part1}");
  io.println("Part 2: {part2}");
}
