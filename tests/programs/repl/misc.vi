use std::{array::Array, n64::N64};
(1, _)
fn _foo() {}
1.to_string()
1.0.to_string()
((1,2),(3,4)).0
((1,2),(3,4)).0.0
((1,2),(3,4)).0.0.to_string()
((1,2),(3,4)).1.1.to_string()
"abc" ++ 123
[true, false].to_string(Bool::to_string)
[1,2,3,4].slice(2)
[1,2,3,4].reversed()
let a = Array::from_fn(5, &(0; _), fn(&x: &N32) { let n = x; x += 1; n });
a.for_each(&io, fn(&io: &IO, v: N32) { io.println(v.to_string() )})
-a.fold_front(0, fn(a: N32, b: N32) a - b)
-a.fold_back(5, fn(a: N32, b: N32) a - b)
move a
Array::from_list([1,2,3,4,5,6,7,8,9]).reversed().to_list()
List::new(100, "")
2.pow(10)
1024.log(2)
1000.log(2)
1025.log(2)
10.max(100)
10.min(100)
10.diff(100)
123.gcd(456)
99.sqrt()
100.sqrt()
101.sqrt()
N64::parse("1234567890123456789000").unwrap().add(N64::parse("46").unwrap()).to_string()
N64::parse("")
N64::parse("one")
N64::parse("1.0")
N64::from_n32(3).pow_n32(33).to_string()
N64::from_n32(3).pow_n32(33).log_n32(3)
N64::from_n32(3).pow_n32(33).sub(N64::from_n32(1)).log_n32(3)
N64::from_n32(3).pow_n32(33).add(N64::from_n32(1)).log_n32(3)
"1,2,3,4".split(",")
"      1 2  3 4   ".split_trim(" ")
"1,2, 3,4, 5,6".split_once(", ")
123.to_string(2)
let x = [[1]];
x.get(0).*.get(0).*
x.get(0).*.get(0).* = 2
~x.get(0).*.get(0).*.~
move x
