
use std::{io::println, u32};

fn main(&io) { 
  refs(&io);
  io.println("");
  fns(&io);
  io.println("");
  rev(&io);
}

fn refs(&io){
  let x = 0;
  inc((move x, move ~x));
  io.println("x = " ++ u32::to_string(x));
  inc((move x, move ~x));
  io.println("x = " ++ u32::to_string(x));
  inc((move x, move ~x));
  io.println("x = " ++ u32::to_string(x));
}

mod refs {
  fn inc((init, ~fin)) {
    fin = init + 1;
  }
}

fn fns(&io) {
  let f = { let n; (move ~n, n * n) };
  io.println("f(1) = " ++ u32::to_string(call(f, 1)));
  io.println("f(2) = " ++ u32::to_string(call(f, 2)));
  io.println("f(3) = " ++ u32::to_string(call(f, 3)));
}

mod fns {
  fn call(f, a) {
    let (~i, o) = f;
    i = a;
    o
  }
}

fn rev(&io) {
  let s;
  ~s = "0";
  io.println("s = " ++ ~s);
  io.println("s = " ++ ~s);
  ~s = "1";
  io.println("s = " ++ get(&s));
  io.println("s = " ++ get(&s));
  set(&s, "2");
}

mod rev {
  fn get(&x) { ~x }
  fn set(&x, value) { ~x = value }
}
