
pub fn main(&io: &IO) {
  refs(&io);
  io.println("");
  fns(&io);
  io.println("");
  rev(&io);
}

fn refs(&io: &IO) {
  let x = 0;
  inc((x, ~x));
  io.println("x = {x}");
  inc((x, ~x));
  io.println("x = {x}");
  inc((x, ~x));
  io.println("x = {x}");
}

mod refs {
  fn inc((init: N32, ~fin: ~N32)) {
    fin = init + 1;
  }
}

fn fns(&io: &IO) {
  let f = do {
    let n: N32;
    (~n, n * 2)
  };
  io.println("f(1) = {call(unsafe::duplicate(&f), 1)}");
  io.println("f(2) = {call(unsafe::duplicate(&f), 2)}");
  io.println("f(3) = {call(unsafe::duplicate(&f), 3)}");
  unsafe::erase(f);
}

mod fns {
  fn call(f: (~N32, N32), a: N32) -> N32 {
    let (~i, o) = f;
    i = a;
    o
  }
}

fn rev(&io: &IO) {
  let s;
  ~s = "0";
  io.println("s = {~s}");
  io.println("s = {~s}");
  set(&s, "1");
  io.println("s = {get(&s)}");
  io.println("s = {get(&s)}");
  ~s = "2";
}

mod rev {
  fn get[T+](&x: &~T) -> T {
    ~x
  }
  fn set[T?](&x: &~T, value: T) {
    ~x = value
  }
}
