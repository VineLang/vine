
::main { ::find_primes::main }

::find_primes::main {
  fn(ref(n0 n1) _)
  ::find_primes::main::1 = x(n0 x(n1 1))
}

::find_primes::main::1 {
  x(n0 x(n1 @add(1 n2)))
  ::find_primes::main::2 = x(n0 x(n1 x(n2 2)))
}

::find_primes::main::2 { x(n0 x(n1 x(dup3(n2 n3) dup4(@mul(n4 @le(n2 ?(::find_primes::main::12 ::find_primes::main::3 x(n0 x(n1 x(n3 n5)))))) dup4(n4 n5))))) }

::find_primes::main::3 { x(n0 x(n1 x(n2 dup4(@le$(100 ?(::find_primes::main::7 ::find_primes::main::4 x(n0 x(n1 x(n2 n3))))) n3)))) }

::find_primes::main::4 { x(n0 x(n0 _)) }

::find_primes::main::7 { x(n0 x(n1 x(dup3(@rem(n3 ?(::find_primes::main::9 ::find_primes::main::11 x(n0 x(n1 x(n2 n4))))) n2) dup4(n3 n4)))) }

::find_primes::main::9 {
  x(n0 x(n1 x(n2 _)))
  ::find_primes::main::1 = x(n0 x(n1 n2))
}

::find_primes::main::11 {
  x(n0 x(n1 x(n2 @add(1 n3))))
  ::find_primes::main::2 = x(n0 x(n1 x(n2 n3)))
}

::find_primes::main::12 {
  x(n0 x(n1 x(n2 _)))
  ::find_primes::main::13 = x(n0 x(n1 n2))
}

::find_primes::main::13 {
  x(n1 x(n3 dup3(n4 n5)))
  ::std::io::IO::println = fn(ref(n1 n2) fn(n0 _))
  ::std::n32::N32::to_string = fn(n4 n0)
  ::find_primes::main::1 = x(n2 x(n3 n5))
}

::std::io::IO::println {
  fn(ref(n0 n3) fn(n1 _))
  ::std::io::IO::print = fn(ref(n0 n2) fn(n1 _))
  ::std::io::IO::print_char = fn(ref(n2 n3) fn(10 _))
}

::std::io::IO::print {
  fn(ref(n0 n1) fn(tup(n2 tup(n3 _)) _))
  ::std::io::IO::print::1 = x(n0 x(n1 x(n2 n3)))
}

::std::io::IO::print::1 { x(n0 x(n1 x(dup213(?(::std::io::IO::print::3 ::std::io::IO::print::2 x(n0 x(n1 x(n3 n2)))) n3) n2))) }

::std::io::IO::print::2 {
  x(n1 x(n3 x(@sub(1 n4) tup(n0 n5))))
  ::std::io::IO::print_char = fn(ref(n1 n2) fn(n0 _))
  ::std::io::IO::print::1 = x(n2 x(n3 x(n4 n5)))
}

::std::io::IO::print::3 { x(n0 x(n0 _)) }

::std::io::IO::print_char { fn(ref(@io_print_char(char io) io) fn(char _)) }

::std::list::List::concat { fn(tup(@add(n1 n2) tup(n3 n0)) fn(tup(n1 tup(n0 n4)) tup(n2 tup(n3 n4)))) }

::std::n32::N32::to_string { fn(dup826(?(::std::n32::N32::to_string::5 ::std::n32::N32::to_string::1 x(n1 n0)) n1) n0) }

::std::n32::N32::to_string::1 {
  x(n1 n2)
  ::std::n32::N32::to_string::2 = x(n1 x(tup(0 tup(n0 n0)) n2))
}

::std::n32::N32::to_string::2 { x(dup826(?(::std::n32::N32::to_string::4 ::std::n32::N32::to_string::3 x(n2 n0)) n2) n0) }

::std::n32::N32::to_string::3 {
  x(dup826(@rem(10 n0) @div(10 n4)) x(n3 n6))
  48 = @add(n0 n1)
  ::std::list::List::concat = fn(tup(1 tup(tup(n1 n2) n2)) fn(n3 n5))
  ::std::n32::N32::to_string::2 = x(n4 x(n5 n6))
}

::std::n32::N32::to_string::4 { x(_ x(n0 n0)) }

::std::n32::N32::to_string::5 { x(_ tup(1 tup(tup(48 n0) n0))) }

