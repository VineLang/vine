
::main { ::find_primes::main }

::find_primes::main {
  fn(ref(w3 w12) w9)
  ::find_primes::main::2 = x(x(w3 w12) x(1 w9))
}

::find_primes::main::2 {
  x(w12 x(@add(1 w1) w13))
  ::find_primes::main::3 = x(w12 x(w1 x(2 w13)))
}

::find_primes::main::3 { x(w9 x(dup17(w3 w12) x(dup18(@mul(w1 @le(w3 ?(::find_primes::main::5 ::find_primes::main::4 x(w9 x(w12 x(w11 w10)))))) dup18(w1 w11)) w10))) }

::find_primes::main::4 { x(w8 x(w6 x(dup23(@le$(100 ?(::find_primes::main::8 ::find_primes::main::7 x(w8 x(w6 x(w12 w11))))) w12) w11))) }

::find_primes::main::5 {
  x(x(w4 w17) x(dup28(w11 w15) x(_ w14)))
  ::std::n32::N32::to_string = fn(w11 w12)
  ::std::io::IO::println = fn(ref(w4 w9) fn(w12 _))
  ::find_primes::main::2 = x(x(w9 w17) x(w15 w14))
}

::find_primes::main::7 { x(x(w4 w4) _) }

::find_primes::main::8 { x(w4 x(dup34(@rem(w10 ?(::find_primes::main::11 ::find_primes::main::10 x(w4 x(w14 x(w13 w12))))) w14) x(dup35(w10 w13) w12))) }

::find_primes::main::10 {
  x(w4 x(w2 x(@add(1 w8) w9)))
  ::find_primes::main::3 = x(w4 x(w2 x(w8 w9)))
}

::find_primes::main::11 {
  x(w4 x(w2 x(_ w5)))
  ::find_primes::main::2 = x(w4 x(w2 w5))
}

::std::io::IO::println {
  fn(ref(w3 w14) fn(w5 _))
  ::std::io::IO::print = fn(ref(w3 w9) fn(w5 _))
  ::std::io::IO::print_char = fn(ref(w9 w14) fn(10 _))
}

::std::io::IO::print {
  fn(ref(w3 w15) fn(tup(w9 tup(w10 _)) _))
  ::std::io::IO::print::2 = x(x(w3 w15) x(w9 w10))
}

::std::io::IO::print::2 { x(w4 x(dup517(?(::std::io::IO::print::4 ::std::io::IO::print::3 x(w4 x(w6 w1))) w6) w1)) }

::std::io::IO::print::3 {
  x(x(w17 w21) x(@sub(1 w1) tup(w4 w5)))
  ::std::io::IO::print_char = fn(ref(w17 w10) fn(w4 _))
  ::std::io::IO::print::2 = x(x(w10 w21) x(w1 w5))
}

::std::io::IO::print::4 { x(x(w3 w3) _) }

::std::io::IO::print_char { fn(ref(@io_print_char(char io) io) fn(char _)) }

::std::list::List::concat { fn(tup(@add(w12 w20) tup(w8 w13)) fn(tup(w12 tup(w13 w23)) tup(w20 tup(w8 w23)))) }

::std::n32::N32::to_string { fn(dup2210(?(::std::n32::N32::to_string::4 ::std::n32::N32::to_string::3 x(w8 w7)) w8) w7) }

::std::n32::N32::to_string::3 {
  x(w4 w7)
  ::std::n32::N32::to_string::5 = x(w4 x(tup(0 tup(w5 w5)) w7))
}

::std::n32::N32::to_string::4 { x(_ tup(1 tup(tup(48 w3) w3))) }

::std::n32::N32::to_string::5 { x(dup2220(?(::std::n32::N32::to_string::7 ::std::n32::N32::to_string::6 x(w6 w2)) w6) w2) }

::std::n32::N32::to_string::6 {
  x(dup2223(@rem(10 w1) @div(10 w8)) x(w11 w15))
  48 = @add(w1 w2)
  ::std::list::List::concat = fn(tup(1 tup(tup(w2 w13) w13)) fn(w11 w5))
  ::std::n32::N32::to_string::5 = x(w8 x(w5 w15))
}

::std::n32::N32::to_string::7 { x(_ x(w1 w1)) }

