
::std::data::Array::Node::to_leaf { fn(n0 n0) }

::std::data::Array::Node::as_leaf { fn(n0 n0) }

::std::data::Array::Node::leaf { fn(n0 n0) }

::std::logical::Option::None { enum(_ enum(n0 n0)) }

::std::IO::print_char { fn(ref(@io_print_char(n0 n1) n1) fn(n0 _)) }

::main { ::segmented_sieve::main }

::segmented_sieve::main {
  fn(ref(w1 w28) _)
  ::std::numeric::N32::sqrt = fn(1000000 dup5(@sub(1 w8) dup5(w21 w26)))
  ::std::data::Array::new = fn(w8 fn(1 w9))
  ::segmented_sieve::main::1 = x(x(w1 w23) x(w21 x(w9 x(x(2 w19) x(tup(0 tup(w15 w15)) w17)))))
  ::segmented_sieve::main::12 = x(x(w23 w28) x(w26 x(w19 w17)))
}

::segmented_sieve::main::1 {
  x(w12 x(w10 x(w9 w8)))
  ::std::data::Array::pop_front = fn(ref(w9 w1) enum(::segmented_sieve::main::4 enum(::segmented_sieve::main::5 x(w12 x(w10 x(w1 w8))))))
}

::segmented_sieve::main::4 {
  enum(?(::segmented_sieve::main::8 ::segmented_sieve::main::7 x(x(w9 w25) x(w23 x(x(w6 w22) x(w20 x(x(w3 w19) x(w10 _))))))) x(x(w9 w33) x(dup26(w23 w31) x(w6 x(x(dup30(w10 @add(1 dup31(w20 w28))) w29) x(w3 w27))))))
  ::segmented_sieve::main::1 = x(x(w25 w33) x(w31 x(w22 x(x(w28 w29) x(w19 w27)))))
}

::segmented_sieve::main::5 { x(x(w7 w7) x(_ x(_ x(x(w3 w3) x(w1 w1))))) }

::segmented_sieve::main::7 {
  x(x(w24 w1) x(w22 x(w21 x(w19 x(x(w18 w7) x(dup50(w3 dup50(w9 dup50(@mul(w12 w13) dup50(w12 w26)))) _))))))
  ::std::numeric::N32::to_string::to_string = fn(w3 w4)
  ::std::IO::println = fn(ref(w24 w1) fn(w4 _))
  ::std::data::List::push_back = fn(ref(w18 w7) fn(w9 _))
  ::segmented_sieve::main::9 = x(w22 x(w21 x(w19 x(w26 w13))))
}

::segmented_sieve::main::8 { x(x(w9 w9) x(_ x(x(w6 w6) x(_ x(x(w3 w3) _))))) }

::segmented_sieve::main::9 { x(dup56(w1 w14) x(w7 x(w5 x(w4 dup61(@le(w1 ?(::segmented_sieve::main::11 ::segmented_sieve::main::10 x(w14 x(w7 x(w5 x(w4 w9)))))) w9))))) }

::segmented_sieve::main::10 {
  x(w17 x(x(w16 w22) x(dup66(w4 w20) x(dup67(w9 w19) dup68(@sub(w4 w5) @add(w9 w11))))))
  ::std::data::Array::get = fn(ref(w16 w1) fn(w5 ref(_ 0)))
  ::segmented_sieve::main::9 = x(w17 x(x(w1 w22) x(w20 x(w19 w11))))
}

::segmented_sieve::main::11 { x(_ x(x(w4 w4) _)) }

::segmented_sieve::main::12 { x(w6 x(w4 x(dup74(@lt(1000000 ?(::segmented_sieve::main::14 ::segmented_sieve::main::13 x(w6 x(w4 x(w8 w2))))) w8) w2))) }

::segmented_sieve::main::13 {
  x(x(w22 w36) x(dup79(w1 dup79(w15 w34)) x(dup80(@add(w1 w2) dup80(w6 dup80(w27 dup80(w13 @add(w15 w17))))) dup82(w10 w32))))
  ::std::numeric::N32::min = fn(w2 fn(1000000 dup83(@sub(w6 w7) w26)))
  ::std::data::Array::new = fn(w7 fn(1 w8))
  ::std::data::List::into_iter = fn(w10 w11)
  ::segmented_sieve::main::15 = x(w27 x(w26 x(x(w8 w25) w11)))
  ::segmented_sieve::main::23 = x(x(w22 w31) x(w25 w13))
  ::segmented_sieve::main::12 = x(x(w31 w36) x(w34 x(w17 w32)))
}

::segmented_sieve::main::14 { x(x(w4 w4) _) }

::segmented_sieve::main::15 {
  x(w9 x(w8 x(w7 w5)))
  ::std::data::List::IntoIter::next = fn(ref(w5 w1) enum(::segmented_sieve::main::18 enum(::segmented_sieve::main::19 x(w9 x(w8 x(w7 w1))))))
}

::segmented_sieve::main::18 {
  enum(dup102(@mul(w8 w9) dup102(w8 dup102(w12 dup102(w15 w20)))) x(dup96(@sub(1 @div(w12 @add(1 @mul(w15 w16)))) dup96(w24 w29)) x(dup97(w23 w28) x(x(w4 w27) w2))))
  ::std::numeric::N32::max = fn(w9 fn(w16 w17))
  ::segmented_sieve::main::20 = x(w24 x(w23 x(x(w4 w22) x(w20 w17))))
  ::segmented_sieve::main::15 = x(w29 x(w28 x(x(w22 w27) w2)))
}

::segmented_sieve::main::19 { x(_ x(_ x(x(w2 w2) _))) }

::segmented_sieve::main::20 { x(w8 x(dup107(w1 w13) x(w6 x(w4 dup111(@lt(w1 ?(::segmented_sieve::main::22 ::segmented_sieve::main::21 x(w8 x(w13 x(w6 x(w4 w9)))))) w9))))) }

::segmented_sieve::main::21 {
  x(dup112(w4 w23) x(w16 x(x(w15 w21) x(dup117(w9 w19) dup118(@sub(w4 w5) @add(w9 w11))))))
  ::std::data::Array::get = fn(ref(w15 w1) fn(w5 ref(_ 0)))
  ::segmented_sieve::main::20 = x(w23 x(w16 x(x(w1 w21) x(w19 w11))))
}

::segmented_sieve::main::22 { x(_ x(_ x(x(w3 w3) _))) }

::segmented_sieve::main::23 {
  x(w8 x(w6 w5))
  ::std::data::Array::pop_front = fn(ref(w6 w1) enum(::segmented_sieve::main::26 enum(::segmented_sieve::main::27 x(w8 x(w1 w5)))))
}

::segmented_sieve::main::26 {
  enum(?(::segmented_sieve::main::30 ::segmented_sieve::main::29 x(x(w5 w13) x(w11 _))) x(x(w5 w17) x(w3 dup131(w11 @add(1 w8)))))
  ::segmented_sieve::main::23 = x(x(w13 w17) x(w3 w8))
}

::segmented_sieve::main::27 { x(x(w3 w3) _) }

::segmented_sieve::main::29 {
  x(x(w9 w1) x(w7 _))
  ::std::numeric::N32::to_string::to_string = fn(w7 w4)
  ::std::IO::println = fn(ref(w9 w1) fn(w4 _))
}

::segmented_sieve::main::30 { x(x(w3 w3) _) }

::std::numeric::N32::to_string::to_string { fn(dup142(?(::std::numeric::N32::to_string::to_string::3 ::std::numeric::N32::to_string::to_string::2 x(n0 n1)) n0) n1) }

::std::numeric::N32::to_string::to_string::2 { x(dup151(?(::std::numeric::N32::to_string::to_string::6 ::std::numeric::N32::to_string::to_string::5 x(n0 x(tup(0 tup(n1 n1)) n2))) n0) n2) }

::std::numeric::N32::to_string::to_string::3 { x(_ tup(1 tup(tup(48 n0) n0))) }

::std::numeric::N32::to_string::to_string::4 { x(dup151(?(::std::numeric::N32::to_string::to_string::6 ::std::numeric::N32::to_string::to_string::5 x(n0 n1)) n0) n1) }

::std::numeric::N32::to_string::to_string::5 { x(dup154(@rem(10 @add$(48 n0)) @div(10 dup151(?(::std::numeric::N32::to_string::to_string::6 ::std::numeric::N32::to_string::to_string::5 x(n1 x(tup(n2 tup(tup(n0 n3) n4)) n5))) n1))) x(tup(@add$(1 n2) tup(n3 n4)) n5)) }

::std::numeric::N32::to_string::to_string::6 { x(_ x(n0 n0)) }

::std::data::List::concat { fn(tup(@add(n0 n1) tup(n2 n3)) fn(tup(n0 tup(n3 n4)) tup(n1 tup(n2 n4)))) }

::std::data::List::push_back { fn(ref(tup(@add(1 n0) tup(n1 tup(n2 n3))) tup(n0 tup(n1 n3))) fn(n2 _)) }

::std::data::List::into_iter { fn(tup(n0 tup(n1 _)) tup(n0 n1)) }

::std::data::List::IntoIter::next { fn(ref(tup(dup432(?(::std::data::List::IntoIter::next::3 ::std::data::List::IntoIter::next::2 x(x(n0 n1) x(x(n2 n3) n4))) n0) n2) tup(n1 n3)) n4) }

::std::data::List::IntoIter::next::2 { x(x(@sub(1 n0) n0) x(x(tup(n1 n2) n2) enum(enum(n1 n3) enum(_ n3)))) }

::std::data::List::IntoIter::next::3 { x(x(n0 n0) x(x(n1 n1) ::std::logical::Option::None)) }

::std::data::Array::new { fn(dup473(n0 dup761(@eq(1 ?(::std::data::Array::Node::new::3 ::std::data::Array::Node::new::2 x(n1 x(n2 n3)))) n1)) fn(n2 tup(n0 n3))) }

::std::data::Array::get { fn(ref(tup(dup575(n0 dup585(@lt$(1 ?(::std::data::Array::get::3 ::std::data::Array::get::2 x(x(ref(n1 n2) n3) x(n4 n5)))) n5)) n1) tup(n0 n2)) fn(n4 n3)) }

::std::data::Array::get::1 { x(n0 x(n1 dup585(@lt$(1 ?(::std::data::Array::get::3 ::std::data::Array::get::2 x(n0 x(n1 n2)))) n2))) }

::std::data::Array::get::2 { x(x(ref(tup(n0 n1) tup(n2 n3)) n4) x(dup589(@rem(2 ?(::std::data::Array::Node::half::3 ::std::data::Array::Node::half::2 x(x(n0 n2) x(x(n1 n3) x(n5 tup(n6 dup585(@lt$(1 ?(::std::data::Array::get::3 ::std::data::Array::get::2 x(x(n6 n4) x(n7 n8)))) n8))))))) @div(2 n7)) n5)) }

::std::data::Array::get::3 { x(x(n0 n0) _) }

::std::data::Array::pop_front { fn(ref(tup(dup705(?(::std::data::Array::pop_front::3 ::std::data::Array::pop_front::2 x(x(n0 n1) x(ref(n2 n3) n4))) n0) n2) tup(n1 n3)) n4) }

::std::data::Array::pop_front::2 { x(x(dup710(@eq(1 ?(::std::data::Array::pop_front::5 ::std::data::Array::pop_front::4 x(x(n0 n1) n2))) n0) n1) n2) }

::std::data::Array::pop_front::3 { x(x(n0 n0) x(_ ::std::logical::Option::None)) }

::std::data::Array::pop_front::4 { x(x(_ 0) x(ref(n0 _) enum(enum(n0 n1) enum(_ n1)))) }

::std::data::Array::pop_front::5 { x(x(dup721(@add(1 @div(2 dup728(@eq(1 ?(::std::data::Array::pop_front::9 ::std::data::Array::pop_front::8 x(ref(n0 n1) x(n2 x(x(tup(n3 n1) n4) x(x(n5 n3) n6)))))) n2))) @sub(1 n7)) n7) x(ref(tup(n0 n5) n4) n6)) }

::std::data::Array::pop_front::6 { x(ref(tup(n0 n1) n2) x(@add(1 @div(2 dup728(@eq(1 ?(::std::data::Array::pop_front::9 ::std::data::Array::pop_front::8 x(ref(n0 n3) x(n4 x(x(tup(n5 n3) n2) x(x(n1 n5) n6)))))) n4))) n6)) }

::std::data::Array::pop_front::8 { x(ref(n0 _) x(_ x(x(_ n1) x(x(n1 _) enum(enum(n0 n2) enum(_ n2)))))) }

::std::data::Array::pop_front::9 { x(ref(tup(n0 n1) n2) x(@add(1 @div(2 dup728(@eq(1 ?(::std::data::Array::pop_front::9 ::std::data::Array::pop_front::8 x(ref(n0 n3) x(n4 x(x(tup(n5 n3) n2) x(x(n1 n5) n6)))))) n4))) x(x(n7 n7) x(x(n8 n8) n6)))) }

::std::data::Array::pop_front::10 { x(n0 n0) }

::std::data::Array::Node::new { fn(dup761(@eq(1 ?(::std::data::Array::Node::new::3 ::std::data::Array::Node::new::2 x(n0 x(n1 n2)))) n0) fn(n1 n2)) }

::std::data::Array::Node::new::2 { x(_ x(n0 n0)) }

::std::data::Array::Node::new::3 { x(dup768(@add(1 @div(2 dup761(@eq(1 ?(::std::data::Array::Node::new::3 ::std::data::Array::Node::new::2 x(n0 x(n1 n2)))) n0))) @div(2 dup761(@eq(1 ?(::std::data::Array::Node::new::3 ::std::data::Array::Node::new::2 x(n3 x(n4 n5)))) n3))) x(dup769(n1 n4) tup(n2 n5))) }

::std::data::Array::Node::half { fn(ref(tup(n0 n1) tup(n2 n3)) fn(n4 fn(?(::std::data::Array::Node::half::3 ::std::data::Array::Node::half::2 x(x(n0 n2) x(x(n1 n3) x(n4 n5)))) n5))) }

::std::data::Array::Node::half::2 { x(x(n0 n0) x(x(n1 n2) x(@div(2 n3) tup(ref(n1 n2) n3)))) }

::std::data::Array::Node::half::3 { x(x(n0 n1) x(x(n2 n2) x(@add(1 @div(2 n3)) tup(ref(n0 n1) n3)))) }

::std::numeric::N32::min { fn(dup1390(@lt(n0 ?(::std::numeric::N32::min::3 ::std::numeric::N32::min::2 x(n1 x(n2 n3)))) n1) fn(dup1391(n0 n2) n3)) }

::std::numeric::N32::min::2 { x(n0 x(_ n0)) }

::std::numeric::N32::min::3 { x(_ x(n0 n0)) }

::std::numeric::N32::max { fn(dup1399(@lt$(n0 ?(::std::numeric::N32::max::3 ::std::numeric::N32::max::2 x(n1 x(n2 n3)))) n1) fn(dup1400(n0 n2) n3)) }

::std::numeric::N32::max::2 { x(n0 x(_ n0)) }

::std::numeric::N32::max::3 { x(_ x(n0 n0)) }

::std::numeric::N32::sqrt { fn(dup1443(@le$(1073741824 ?(::std::numeric::N32::sqrt::6 ::std::numeric::N32::sqrt::5 x(x(0 dup1447(@add(16384 dup1449(@mul(n0 @le(n1 ?(::std::numeric::N32::sqrt::6 ::std::numeric::N32::sqrt::5 x(x(n2 dup1447(@add(8192 dup1449(@mul(n3 @le(n4 ?(::std::numeric::N32::sqrt::6 ::std::numeric::N32::sqrt::5 x(x(n5 dup1447(@add(4096 dup1449(@mul(n6 @le(n7 ?(::std::numeric::N32::sqrt::6 ::std::numeric::N32::sqrt::5 x(x(n8 dup1447(@add(2048 dup1449(@mul(n9 @le(n10 ?(::std::numeric::N32::sqrt::6 ::std::numeric::N32::sqrt::5 x(x(n11 dup1447(@add(1024 dup1449(@mul(n12 @le(n13 ?(::std::numeric::N32::sqrt::6 ::std::numeric::N32::sqrt::5 x(x(n14 dup1447(@add(512 dup1449(@mul(n15 @le(n16 ?(::std::numeric::N32::sqrt::6 ::std::numeric::N32::sqrt::5 x(x(n17 dup1447(@add(256 dup1449(@mul(n18 @le(n19 ?(::std::numeric::N32::sqrt::6 ::std::numeric::N32::sqrt::5 x(x(n20 dup1447(@add(128 dup1449(@mul(n21 @le(n22 ?(::std::numeric::N32::sqrt::6 ::std::numeric::N32::sqrt::5 x(x(n23 dup1447(@add(64 dup1449(@mul(n24 @le(n25 ?(::std::numeric::N32::sqrt::6 ::std::numeric::N32::sqrt::5 x(x(n26 dup1447(@add(32 dup1449(@mul(n27 @le(n28 ?(::std::numeric::N32::sqrt::6 ::std::numeric::N32::sqrt::5 x(x(n29 dup1447(@add(16 dup1449(@mul(n30 @le(n31 ?(::std::numeric::N32::sqrt::6 ::std::numeric::N32::sqrt::5 x(x(n32 dup1447(@add(8 dup1449(@mul(n33 @le(n34 ?(::std::numeric::N32::sqrt::6 ::std::numeric::N32::sqrt::5 x(x(n35 dup1447(@add(4 dup1449(@mul(n36 @le(n37 ?(::std::numeric::N32::sqrt::6 ::std::numeric::N32::sqrt::5 x(x(n38 dup1447(@add(2 dup1449(@mul(n39 @le(n40 ?(::std::numeric::N32::sqrt::6 ::std::numeric::N32::sqrt::5 x(x(n41 dup1447(@add(1 dup1449(@mul(n42 @le(n43 ?(::std::numeric::N32::sqrt::6 ::std::numeric::N32::sqrt::5 x(x(n44 n45) x(n46 _))))) dup1449(n42 n46))) n44)) x(n47 _))))) dup1449(n39 n47))) n41)) x(n48 _))))) dup1449(n36 n48))) n38)) x(n49 _))))) dup1449(n33 n49))) n35)) x(n50 _))))) dup1449(n30 n50))) n32)) x(n51 _))))) dup1449(n27 n51))) n29)) x(n52 _))))) dup1449(n24 n52))) n26)) x(n53 _))))) dup1449(n21 n53))) n23)) x(n54 _))))) dup1449(n18 n54))) n20)) x(n55 _))))) dup1449(n15 n55))) n17)) x(n56 _))))) dup1449(n12 n56))) n14)) x(n57 _))))) dup1449(n9 n57))) n11)) x(n58 _))))) dup1449(n6 n58))) n8)) x(n59 _))))) dup1449(n3 n59))) n5)) x(n60 _))))) dup1449(n0 n60))) n2)) x(32768 _)))) dup1443(n1 dup1443(n4 dup1443(n7 dup1443(n10 dup1443(n13 dup1443(n16 dup1443(n19 dup1443(n22 dup1443(n25 dup1443(n28 dup1443(n31 dup1443(n34 dup1443(n37 dup1443(n40 dup1443(n43 _)))))))))))))))) n45) }

::std::numeric::N32::sqrt::1 { x(n0 x(dup1440(?(::std::numeric::N32::sqrt::3 ::std::numeric::N32::sqrt::2 x(n0 x(n1 n2))) n1) n2)) }

::std::numeric::N32::sqrt::2 { x(dup1443(n0 n1) x(dup1444(n2 @n32_shr(1 dup1440(?(::std::numeric::N32::sqrt::3 ::std::numeric::N32::sqrt::2 x(n1 x(n3 x(n4 n5)))) n3))) x(dup1447(@add(n2 dup1449(@mul(n6 @le(n0 ?(::std::numeric::N32::sqrt::6 ::std::numeric::N32::sqrt::5 x(x(n7 n4) x(n8 _))))) dup1449(n6 n8))) n7) n5))) }

::std::numeric::N32::sqrt::3 { x(_ x(_ x(n0 n0))) }

::std::numeric::N32::sqrt::5 { x(x(_ n0) x(n0 _)) }

::std::numeric::N32::sqrt::6 { x(x(n0 n0) _) }

::std::IO::println { fn(ref(n0 n1) fn(tup(dup2316(?(::std::IO::print::3 ::std::IO::print::2 x(x(n0 @io_print_char(10 n1)) x(n2 n3))) n2) tup(n3 _)) _)) }

::std::IO::print { fn(ref(n0 n1) fn(tup(dup2316(?(::std::IO::print::3 ::std::IO::print::2 x(x(n0 n1) x(n2 n3))) n2) tup(n3 _)) _)) }

::std::IO::print::1 { x(n0 x(dup2316(?(::std::IO::print::3 ::std::IO::print::2 x(n0 x(n1 n2))) n1) n2)) }

::std::IO::print::2 { x(x(@io_print_char(n0 n1) n2) x(@sub(1 dup2316(?(::std::IO::print::3 ::std::IO::print::2 x(x(n1 n2) x(n3 n4))) n3)) tup(n0 n4))) }

::std::IO::print::3 { x(x(n0 n0) _) }

