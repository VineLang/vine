
::std::data::Array::Node::to_leaf { fn(x x) }

::std::data::Array::Node::leaf { fn(x x) }

::std::logical::Option::None { enum(_ enum(r r)) }

::std::IO::print_char { fn(ref(@io_print_char(char io) io) fn(char _)) }

::main { ::array_from_list::main }

::array_from_list::main {
  fn(w1 _)
  ::std::data::List::new = fn(1000000 fn(0 w5))
  ::std::data::Array::from_list = fn(w5 w8)
  ::std::data::Array::len = fn(ref(w8 _) w16)
  ::std::numeric::N32::to_string::to_string = fn(w16 w17)
  ::std::IO::println = fn(w1 fn(w17 _))
}

::std::numeric::N32::to_string::to_string {
  fn(dup7(w5 w7) w6)
  w5 = ?(::std::numeric::N32::to_string::to_string::3 ::std::numeric::N32::to_string::to_string::2 x(w7 w6))
}

::std::numeric::N32::to_string::to_string::2 {
  x(w6 w4)
  ::std::numeric::N32::to_string::to_string::4 = x(w6 x(tup(0 tup(w7 w7)) w9))
  w4 = w9
}

::std::numeric::N32::to_string::to_string::3 {
  x(_ w0)
  w0 = tup(w3 tup(tup(48 w4) w5))
  1 = w3
  w4 = w5
}

::std::numeric::N32::to_string::to_string::4 {
  x(dup16(w0 w6) w2)
  w0 = ?(::std::numeric::N32::to_string::to_string::6 ::std::numeric::N32::to_string::to_string::5 x(w6 w2))
}

::std::numeric::N32::to_string::to_string::5 {
  x(dup19(w0 w7) x(w11 w15))
  w0 = @rem(10 w1)
  48 = @add(w1 w2)
  ::std::data::List::concat = fn(tup(1 tup(tup(w2 w13) w13)) fn(w11 w5))
  w7 = @div(10 w8)
  ::std::numeric::N32::to_string::to_string::4 = x(w8 x(w5 w15))
}

::std::numeric::N32::to_string::to_string::6 { x(_ x(w1 w1)) }

::std::data::List::new {
  fn(w0 fn(w1 w10))
  ::std::data::List::new::1 = x(w0 x(w1 x(tup(0 tup(w8 w8)) w10)))
}

::std::data::List::new::1 {
  x(dup36(w0 w9) w4)
  w0 = @lt$(0 w1)
  w1 = ?(::std::data::List::new::3 ::std::data::List::new::2 x(w9 w4))
}

::std::data::List::new::2 {
  x(w10 x(dup42(w3 w13) x(w8 w12)))
  ::std::data::List::push_back = fn(ref(w8 w1) fn(w3 _))
  w10 = @sub(1 w6)
  ::std::data::List::new::1 = x(w6 x(w13 x(w1 w12)))
}

::std::data::List::new::3 { x(_ x(_ x(w1 w1))) }

::std::data::List::concat {
  fn(w0 fn(w1 w22))
  tup(w5 tup(w6 w15)) = w0
  tup(w10 tup(w11 w21)) = w1
  w15 = w11
  w5 = @add(w10 w18)
  w22 = tup(w18 tup(w6 w21))
}

::std::data::List::push_back {
  fn(ref(w1 w9) fn(w3 _))
  ::std::data::List::concat = fn(w1 fn(tup(1 tup(tup(w3 w11) w11)) w9))
}

::std::data::Array::empty { tup(0 _) }

::std::data::Array::from_list {
  fn(tup(w0 tup(w1 _)) w10)
  ::std::data::Array::from_fn = fn(w0 fn(ref(w1 _) fn(fn(ref(tup(w18 w19) w19) w18) w10)))
}

::std::data::Array::from_fn {
  fn(dup362(w9 w13) fn(ref(dup363(w1 w12) w1) fn(w4 w10)))
  w9 = ?(::std::data::Array::from_fn::3 ::std::data::Array::from_fn::2 x(w13 x(w12 x(w4 w10))))
}

::std::data::Array::from_fn::2 {
  x(dup368(w1 dup368(w9 w29)) x(w34 x(w33 w31)))
  w33 = fn(ref(w36 w41) w43)
  ::std::data::Array::Node::unzip_with = fn(w1 fn(w3 fn(fn(w36 tup(w43 w41)) w5)))
  tup(w6 w7) = w5
  ::std::data::Array::pop_back = fn(ref(tup(w9 w7) w14) w16)
  ::std::logical::Option::unwrap = fn(w16 _)
  ::std::data::Array::push_front = fn(ref(w14 w20) fn(w34 _))
  tup(_ w25) = w20
  w3 = w25
  w31 = tup(w29 w6)
}

::std::data::Array::from_fn::3 { x(_ x(_ x(_ ::std::data::Array::empty))) }

::std::data::Array::len {
  fn(ref(w1 w6) w10)
  w1 = tup(w9 w8)
  w6 = tup(w7 w8)
  w9 = dup435(w10 w7)
}

::std::data::Array::push_front {
  fn(ref(tup(dup488(w15 dup488(w19 w12)) w3) tup(w13 w4)) fn(w8 _))
  w15 = ?(::std::data::Array::push_front::3 ::std::data::Array::push_front::2 x(w19 x(ref(w3 w4) x(w8 _))))
  w12 = @add(1 w13)
}

::std::data::Array::push_front::2 {
  x(w14 x(w13 x(w12 _)))
  ::std::data::Array::push_front::4 = x(x(w13 w17) w14)
  ref(w4 w10) = w17
  ::std::data::Array::Node::leaf = fn(w12 w7)
  w10 = tup(w7 w4)
}

::std::data::Array::push_front::3 {
  x(_ x(w9 x(w8 _)))
  ref(_ w6) = w9
  ::std::data::Array::Node::leaf = fn(w8 w5)
  w6 = w5
}

::std::data::Array::push_front::4 {
  x(w4 dup508(w0 w5))
  w0 = @lt$(1 w1)
  w1 = ?(::std::data::Array::push_front::6 ::std::data::Array::push_front::5 x(w4 w5))
}

::std::data::Array::push_front::5 {
  x(x(w23 w26) w21)
  ref(tup(w2 w4) tup(w15 w12)) = w23
  tup(w11 w12) = tup(w4 w2)
  w21 = @div(2 w19)
  ::std::data::Array::push_front::4 = x(x(ref(w11 w15) w26) w19)
}

::std::data::Array::push_front::6 { x(x(w2 w2) _) }

::std::data::Array::pop_back {
  fn(ref(tup(dup521(w12 w15) w3) tup(w16 w4)) w13)
  w12 = ?(::std::data::Array::pop_back::3 ::std::data::Array::pop_back::2 x(x(w15 w16) x(ref(w3 w4) w13)))
}

::std::data::Array::pop_back::2 {
  x(x(dup526(w0 w8) w9) w3)
  w0 = @eq(1 w1)
  w1 = ?(::std::data::Array::pop_back::5 ::std::data::Array::pop_back::4 x(x(w8 w9) w3))
}

::std::data::Array::pop_back::3 {
  x(x(w3 w3) x(_ w5))
  ::std::data::Array::pop_back::13 = x(w5 ::std::logical::Option::None)
}

::std::data::Array::pop_back::4 {
  x(x(_ w0) x(w7 w12))
  w0 = 0
  w7 = ref(w2 _)
  ::std::data::Array::Node::to_leaf = fn(w2 w4)
  ::std::data::Array::pop_back::13 = x(w12 enum(enum(w4 w10) enum(_ w10)))
}

::std::data::Array::pop_back::5 {
  x(x(dup537(w0 w2) w3) x(w6 w9))
  w2 = @sub(1 w3)
  ::std::data::Array::pop_back::6 = x(w6 x(w0 w9))
}

::std::data::Array::pop_back::6 {
  x(w20 x(dup543(w0 w11) w23))
  w0 = @sub(1 w1)
  w1 = @rem(2 w2)
  dup545(w12 w26) = w2
  ref(w6 w25) = w20
  ::std::data::Array::Node::half = fn(ref(w6 w9) fn(w11 fn(w12 w13)))
  tup(w14 dup544(w21 w27)) = w13
  w21 = @eq(1 w22)
  w22 = ?(::std::data::Array::pop_back::9 ::std::data::Array::pop_back::8 x(w14 x(w27 x(w26 x(x(w9 w25) w23)))))
}

::std::data::Array::pop_back::8 {
  x(w18 x(_ x(w16 x(x(w15 w10) w12))))
  w18 = ref(w1 _)
  ::std::data::Array::Node::to_leaf = fn(w1 w3)
  tup(w6 w7) = w15
  w16 = ?(::std::data::Array::pop_back::12 ::std::data::Array::pop_back::11 x(w6 x(w7 w20)))
  w10 = w20
  w12 = enum(enum(w3 w23) enum(_ w23))
}

::std::data::Array::pop_back::9 {
  x(w5 x(w4 x(_ x(x(w2 w2) w24))))
  ::std::data::Array::pop_back::6 = x(w5 x(w4 w24))
}

::std::data::Array::pop_back::11 { x(w3 x(_ w3)) }

::std::data::Array::pop_back::12 { x(_ x(w2 w2)) }

::std::data::Array::pop_back::13 { x(w11 w11) }

::std::data::Array::Node::half {
  fn(ref(tup(w1 w3) tup(w19 w17)) fn(w7 fn(w8 w14)))
  w8 = ?(::std::data::Array::Node::half::3 ::std::data::Array::Node::half::2 x(x(w1 w19) x(x(w3 w17) x(w7 w14))))
}

::std::data::Array::Node::half::2 {
  x(x(w11 w11) x(x(w9 w1) x(w7 w5)))
  w7 = @div(2 w4)
  w5 = tup(ref(w9 w1) w4)
}

::std::data::Array::Node::half::3 {
  x(x(w12 w1) x(x(w10 w10) x(w8 w6)))
  w8 = @add(1 w4)
  w4 = @div(2 w5)
  w6 = tup(ref(w12 w1) w5)
}

::std::data::Array::Node::unzip_with {
  fn(dup715(w7 w12) fn(w1 fn(w2 w9)))
  w7 = @eq(1 w8)
  w8 = ?(::std::data::Array::Node::unzip_with::3 ::std::data::Array::Node::unzip_with::2 x(w12 x(w1 x(w2 w9))))
}

::std::data::Array::Node::unzip_with::2 {
  x(_ x(w14 x(w13 w11)))
  ::std::data::Array::Node::to_leaf = fn(w14 w2)
  w13 = fn(w2 w3)
  tup(w4 w5) = w3
  ::std::data::Array::Node::leaf = fn(w4 w8)
  ::std::data::Array::Node::leaf = fn(w5 w10)
  w11 = tup(w8 w10)
}

::std::data::Array::Node::unzip_with::3 {
  x(dup726(w4 w13) x(w30 x(dup728(w8 w16) w27)))
  tup(w1 w2) = w30
  w4 = @add(1 w5)
  w5 = @div(2 w6)
  ::std::data::Array::Node::unzip_with = fn(w6 fn(w1 fn(w8 w9)))
  tup(w10 w11) = w9
  w13 = @div(2 w14)
  ::std::data::Array::Node::unzip_with = fn(w14 fn(w2 fn(w16 w17)))
  tup(w18 w19) = w17
  w27 = tup(tup(w10 w18) tup(w11 w19))
}

::std::logical::Option::unwrap {
  fn(w0 w7)
  w0 = enum(::std::logical::Option::unwrap::3 enum(_ w7))
}

::std::logical::Option::unwrap::3 { enum(w0 w0) }

::std::IO::println {
  fn(ref(w1 w12) fn(w3 _))
  ::std::IO::print = fn(ref(w1 w7) fn(w3 _))
  ::std::IO::print_char = fn(ref(w7 w12) fn(10 _))
}

::std::IO::print {
  fn(ref(w1 w16) fn(w3 _))
  tup(w7 tup(w8 _)) = w3
  ::std::IO::print::1 = x(x(w1 w16) x(w7 w8))
}

::std::IO::print::1 {
  x(w4 x(dup2181(w0 w6) w1))
  w0 = ?(::std::IO::print::3 ::std::IO::print::2 x(w4 x(w6 w1)))
}

::std::IO::print::2 {
  x(x(w17 w21) x(w15 w14))
  w15 = @sub(1 w1)
  tup(w4 w5) = w14
  ::std::IO::print_char = fn(ref(w17 w10) fn(w4 _))
  ::std::IO::print::1 = x(x(w10 w21) x(w1 w5))
}

::std::IO::print::3 { x(x(w3 w3) _) }

