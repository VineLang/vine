
::std::logical::Option::None { enum(_ enum(r r)) }

::main { ::array_from_list::main }

::array_from_list::main {
  fn(w1 _)
  ::std::data::List::new = fn(1000000 fn(0 w5))
  ::std::data::Array::from_list::cast = fn(w5 w8)
  ::std::data::Array::len = fn(ref(w8 _) w16)
  ::std::numeric::N32::to_string::to_string = fn(w16 w17)
  ::std::IO::println = fn(w1 fn(w17 _))
}

::std::data::Array::from_list::cast {
  fn(tup(w0 tup(w1 _)) w10)
  ::std::data::Array::from_fn = fn(w0 fn(ref(w1 _) fn(fn(ref(tup(w18 w19) w19) w18) w10)))
}

::std::numeric::N32::to_string::to_string {
  fn(w0 w10)
  ::std::numeric::N32::eq::ne = fn(ref(w0 w6) fn(ref(0 _) ?(::std::numeric::N32::to_string::to_string::3 ::std::numeric::N32::to_string::to_string::2 x(w6 w10))))
}

::std::numeric::N32::to_string::to_string::2 {
  x(w6 w9)
  ::std::numeric::N32::to_string::to_string::4 = x(w6 x(tup(0 tup(w7 w7)) w9))
}

::std::numeric::N32::to_string::to_string::3 { x(_ tup(1 tup(tup(48 w5) w5))) }

::std::numeric::N32::to_string::to_string::4 { x(dup37(n0 @n32_ne(0 ?(::std::numeric::N32::to_string::to_string::6 ::std::numeric::N32::to_string::to_string::5 x(n0 n1)))) n1) }

::std::numeric::N32::to_string::to_string::5 { x(dup31(@n32_rem(10 @n32_add$(48 n0)) @n32_div(10 dup37(n1 @n32_ne(0 ?(::std::numeric::N32::to_string::to_string::6 ::std::numeric::N32::to_string::to_string::5 x(n1 x(tup(n2 tup(tup(n0 n3) n4)) n5))))))) x(tup(@n32_add$(1 n2) tup(n3 n4)) n5)) }

::std::numeric::N32::to_string::to_string::6 { x(_ x(n0 n0)) }

::std::numeric::N32::eq::ne { fn(ref(dup37(n0 @n32_ne(n1 n2)) n0) fn(ref(dup38(n3 n1) n3) n2)) }

::std::numeric::N32::add::add { fn(@n32_add(n0 n1) fn(n0 n1)) }

::std::data::List::new {
  fn(w0 fn(w1 w10))
  ::std::data::List::new::1 = x(w0 x(w1 x(tup(0 tup(w8 w8)) w10)))
}

::std::data::List::new::1 { x(dup98(n0 @n32_lt$(0 ?(::std::data::List::new::3 ::std::data::List::new::2 x(n0 n1)))) n1) }

::std::data::List::new::2 { x(@n32_sub(1 dup98(n0 @n32_lt$(0 ?(::std::data::List::new::3 ::std::data::List::new::2 x(n0 x(n1 x(tup(n2 tup(n3 n4)) n5))))))) x(dup85(n6 n1) x(tup(@n32_add(1 n2) tup(n3 tup(n6 n4))) n5))) }

::std::data::List::new::3 { x(_ x(_ x(n0 n0))) }

::std::numeric::N32::sub::sub { fn(@n32_sub(n0 n1) fn(n0 n1)) }

::std::data::Array::empty { tup(0 _) }

::std::data::Array::Node::leaf_to_node::cast { fn(n0 n0) }

::std::data::Array::from_fn {
  fn(w0 fn(ref(dup429(w1 w16) w1) fn(w4 w14)))
  ::std::numeric::N32::eq::eq = fn(ref(w0 w10) fn(ref(0 _) ?(::std::data::Array::from_fn::3 ::std::data::Array::from_fn::2 x(w10 x(w16 x(w4 w14))))))
}

::std::data::Array::from_fn::2 { x(_ x(_ x(_ ::std::data::Array::empty))) }

::std::data::Array::from_fn::3 {
  x(dup435(w1 dup435(w9 w29)) x(w34 x(fn(ref(w36 w41) w43) tup(w29 w6))))
  ::std::data::Array::Node::unzip_with = fn(w1 fn(w25 fn(fn(w36 tup(w43 w41)) tup(w6 w7))))
  ::std::data::Array::pop_back = fn(ref(tup(w9 w7) w14) w16)
  ::std::logical::Option::unwrap = fn(w16 _)
  ::std::data::Array::push_front = fn(ref(w14 tup(_ w25)) fn(w34 _))
}

::std::numeric::N32::eq::eq { fn(ref(dup450(n0 @n32_eq(n1 n2)) n0) fn(ref(dup451(n3 n1) n3) n2)) }

::std::data::Array::len { fn(ref(tup(dup507(w10 w7) w8) tup(w7 w8)) w10) }

::std::data::Array::Node::node_to_leaf::cast { fn(n0 n0) }

::std::data::Array::push_front {
  fn(ref(tup(w1 w3) tup(w13 w4)) fn(w8 _))
  ::std::numeric::N32::eq::eq = fn(ref(w1 dup574(w23 w12)) fn(ref(0 _) ?(::std::data::Array::push_front::3 ::std::data::Array::push_front::2 x(w23 x(ref(w3 w4) x(w8 _))))))
  ::std::numeric::N32::add::add = fn(w12 fn(1 w13))
}

::std::data::Array::push_front::2 {
  x(_ x(ref(_ w5) x(w8 _)))
  ::std::data::Array::Node::leaf_to_node::cast = fn(w8 w5)
}

::std::data::Array::push_front::3 {
  x(w14 x(w13 x(w12 _)))
  ::std::data::Array::push_front::4 = x(x(w13 ref(w4 tup(w7 w4))) w14)
  ::std::data::Array::Node::leaf_to_node::cast = fn(w12 w7)
}

::std::data::Array::push_front::4 { x(n0 dup98(n1 @n32_lt$(1 ?(::std::data::Array::push_front::6 ::std::data::Array::push_front::5 x(n0 n1))))) }

::std::data::Array::push_front::5 { x(x(ref(tup(n0 n1) tup(n2 n0)) n3) @n32_div(2 dup98(n4 @n32_lt$(1 ?(::std::data::Array::push_front::6 ::std::data::Array::push_front::5 x(x(ref(n1 n2) n3) n4)))))) }

::std::data::Array::push_front::6 { x(x(n0 n0) _) }

::std::data::Array::pop_back {
  fn(ref(tup(w1 w3) tup(w20 w4)) w17)
  ::std::numeric::N32::eq::eq = fn(ref(w1 w13) fn(ref(0 _) ?(::std::data::Array::pop_back::3 ::std::data::Array::pop_back::2 x(x(w13 w20) x(ref(w3 w4) w17)))))
}

::std::data::Array::pop_back::2 {
  x(x(w3 w3) x(_ w5))
  ::std::data::Array::pop_back::13 = x(w5 ::std::logical::Option::None)
}

::std::data::Array::pop_back::3 {
  x(x(w8 w12) w6)
  ::std::numeric::N32::eq::eq = fn(ref(w8 w1) fn(ref(1 _) ?(::std::data::Array::pop_back::5 ::std::data::Array::pop_back::4 x(x(w1 w12) w6))))
}

::std::data::Array::pop_back::4 {
  x(x(_ 0) x(ref(w2 _) w12))
  ::std::data::Array::Node::node_to_leaf::cast = fn(w2 w4)
  ::std::data::Array::pop_back::13 = x(w12 enum(enum(w4 w10) enum(_ w10)))
}

::std::data::Array::pop_back::5 {
  x(x(dup626(w0 w2) w3) x(w6 w9))
  ::std::numeric::N32::sub::sub = fn(w2 fn(1 w3))
  ::std::data::Array::pop_back::6 = x(w6 x(w0 w9))
}

::std::data::Array::pop_back::6 { x(ref(tup(n0 n1) n2) x(dup632(@n32_sub(1 @n32_rem(2 dup635(dup450(_ @n32_eq(0 ?(::std::data::Array::Node::half::3 ::std::data::Array::Node::half::2 x(x(n0 n3) x(x(n1 n4) x(n5 tup(n6 dup450(n7 @n32_eq(1 ?(::std::data::Array::pop_back::9 ::std::data::Array::pop_back::8 x(n6 x(n7 x(n8 x(x(tup(n3 n4) n2) n9)))))))))))))) n8))) n5) n9)) }

::std::data::Array::pop_back::8 { x(ref(n0 _) x(_ x(dup450(_ @n32_eq(0 ?(::std::data::Array::pop_back::12 ::std::data::Array::pop_back::11 x(n1 x(n2 n3))))) x(x(tup(n1 n2) n3) enum(enum(n0 n4) enum(_ n4)))))) }

::std::data::Array::pop_back::9 { x(ref(tup(n0 n1) n2) x(dup632(@n32_sub(1 @n32_rem(2 dup635(dup450(_ @n32_eq(0 ?(::std::data::Array::Node::half::3 ::std::data::Array::Node::half::2 x(x(n0 n3) x(x(n1 n4) x(n5 tup(n6 dup450(n7 @n32_eq(1 ?(::std::data::Array::pop_back::9 ::std::data::Array::pop_back::8 x(n6 x(n7 x(n8 x(x(tup(n3 n4) n2) n9)))))))))))))) n8))) n5) x(_ x(x(n10 n10) n9)))) }

::std::data::Array::pop_back::11 { x(_ x(n0 n0)) }

::std::data::Array::pop_back::12 { x(n0 x(_ n0)) }

::std::data::Array::pop_back::13 { x(n0 n0) }

::std::data::Array::Node::half::2 { x(x(n0 n1) x(x(n2 n2) x(@n32_add(1 @n32_div(2 n3)) tup(ref(n0 n1) n3)))) }

::std::data::Array::Node::half::3 { x(x(n0 n0) x(x(n1 n2) x(@n32_div(2 n3) tup(ref(n1 n2) n3)))) }

::std::data::Array::Node::unzip_with { fn(dup450(n0 @n32_eq(1 ?(::std::data::Array::Node::unzip_with::3 ::std::data::Array::Node::unzip_with::2 x(n0 x(n1 x(n2 n3)))))) fn(n1 fn(n2 n3))) }

::std::data::Array::Node::unzip_with::2 { x(_ x(n0 x(fn(n0 n1) n1))) }

::std::data::Array::Node::unzip_with::3 { x(dup823(@n32_add(1 @n32_div(2 dup450(n0 @n32_eq(1 ?(::std::data::Array::Node::unzip_with::3 ::std::data::Array::Node::unzip_with::2 x(n0 x(n1 x(n2 tup(n3 n4))))))))) @n32_div(2 dup450(n5 @n32_eq(1 ?(::std::data::Array::Node::unzip_with::3 ::std::data::Array::Node::unzip_with::2 x(n5 x(n6 x(n7 tup(n8 n9))))))))) x(tup(n1 n6) x(dup825(n2 n7) tup(tup(n3 n8) tup(n4 n9))))) }

::std::logical::Option::unwrap { fn(enum(::std::logical::Option::unwrap::3 enum(_ w7)) w7) }

::std::logical::Option::unwrap::3 { enum(w0 w0) }

::std::unicode::String::to_chars::cast { fn(w0 w0) }

::std::IO::println {
  fn(ref(w1 w12) fn(w3 _))
  ::std::IO::print = fn(ref(w1 w7) fn(w3 _))
  ::std::IO::print_char = fn(ref(w7 w12) fn(10 _))
}

::std::IO::print {
  fn(ref(w1 w15) fn(w3 _))
  ::std::unicode::String::to_chars::cast = fn(w3 tup(w8 tup(w9 _)))
  ::std::IO::print::1 = x(x(w1 w15) x(w8 w9))
}

::std::IO::print::1 { x(n0 x(dup37(n1 @n32_ne(0 ?(::std::IO::print::3 ::std::IO::print::2 x(n0 x(n1 n2))))) n2)) }

::std::IO::print::2 { x(x(@io_print_char(n0 n1) n2) x(@n32_sub(1 dup37(n3 @n32_ne(0 ?(::std::IO::print::3 ::std::IO::print::2 x(x(n1 n2) x(n3 n4)))))) tup(n0 n4))) }

::std::IO::print::3 { x(x(n0 n0) _) }

::std::IO::print_char { fn(ref(@io_print_char(n0 n1) n1) fn(n0 _)) }

