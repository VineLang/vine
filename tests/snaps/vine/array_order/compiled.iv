
::main { ::array_order::main }

::array_order::main {
  fn(ref(n1 n8) _)
  ::std::array::Array::from_fn = fn(100 fn(ref(0 _) fn(fn(ref(dup2(n13 @add(1 n0)) n0) n13) n2)))
  ::std::io::IO::println = fn(ref(n1 n7) fn(n5 _))
  ::std::array::Array::get = fn(ref(n2 n6) fn(42 ref(dup(n4 n3) n3)))
  ::std::n32::N32::to_string = fn(n4 n5)
  ::std::array::Array::for_each = fn(n6 fn(ref(n7 n8) fn(fn(n9 fn(n11 _)) _)))
  ::std::io::IO::println = fn(n9 fn(n12 _))
  ::std::n32::N32::to_string = fn(n11 n12)
}

::std::array::Array { fn(n0 fn(n1 tup(n0 n1))) }

::std::array::Array::empty {
  n0
  ::std::array::Array = fn(0 fn(_ n0))
}

::std::array::Array::from_fn { fn(dup34(?(::std::array::Array::from_fn::2 ::std::array::Array::from_fn::1 x(n4 x(n2 x(n0 n1)))) n4) fn(ref(dup35(n2 n3) n3) fn(n0 n1))) }

::std::array::Array::from_fn::1 {
  x(dup34(n11 dup34(n12 n13)) x(n9 x(fn(ref(n0 n2) n1) n10)))
  ::std::array::Node::unzip_with = fn(n11 fn(n7 fn(fn(n0 tup(n1 n2)) tup(n8 n3))))
  ::std::array::Array = fn(n12 fn(n3 n4))
  ::std::array::Array::pop_back = fn(ref(n4 n6) n5)
  ::std::option::Option::unwrap = fn(n5 _)
  ::std::array::Array::push_front = fn(ref(n6 tup(_ n7)) fn(n9 _))
  ::std::array::Array = fn(n13 fn(n8 n10))
}

::std::array::Array::from_fn::2 { x(_ x(_ x(_ ::std::array::Array::empty))) }

::std::array::Array::for_each {
  fn(n0 fn(ref(n1 n5) fn(fn(ref(n2 n3) fn(n4 _)) _)))
  ::std::array::Array::fold_front = fn(n0 fn(n1 fn(fn(n2 fn(n4 n3)) n5)))
}

::std::array::Array::fold_front { fn(tup(dup56(?(::std::array::Array::fold_front::2 ::std::array::Array::fold_front::1 x(n4 x(n0 x(n1 x(n2 n3))))) n4) n0) fn(n1 fn(n2 n3))) }

::std::array::Array::fold_front::1 {
  x(dup56(n9 n10) x(n5 x(n6 x(n7 n8))))
  ::std::array::Array = fn(n9 fn(n0 n1))
  ::std::array::Node::zip_with = fn(n10 fn(n4 fn(n5 fn(n7 n0))))
  ::std::array::Array::pop_back = fn(ref(n1 n3) n2)
  ::std::option::Option::unwrap = fn(n2 n8)
  ::std::array::Array::push_front = fn(ref(n3 tup(_ n4)) fn(n6 _))
}

::std::array::Array::fold_front::2 { x(_ x(_ x(n0 x(_ n0)))) }

::std::array::Array::get {
  fn(ref(tup(dup81(n6 n7) n0) tup(n7 n1)) fn(n5 n4))
  ::std::array::Node::as_leaf = fn(n2 n4)
  ::std::array::Array::get::1 = x(ref(n0 n1) x(n2 x(n5 n6)))
}

::std::array::Array::get::1 { x(n0 x(n1 x(n2 dup84(@lt$(1 ?(::std::array::Array::get::3 ::std::array::Array::get::2 x(n0 x(n1 x(n2 n3))))) n3)))) }

::std::array::Array::get::2 {
  x(n1 x(n4 x(dup83(@rem(2 n0) @div(2 n5)) n2)))
  ::std::array::Node::half = fn(n1 fn(n2 fn(n0 tup(n3 n6))))
  ::std::array::Array::get::1 = x(n3 x(n4 x(n5 n6)))
}

::std::array::Array::get::3 { x(n0 x(n0 _)) }

::std::array::Array::push_front { fn(ref(tup(dup98(?(::std::array::Array::push_front::5 ::std::array::Array::push_front::1 x(n4 x(ref(n0 n1) n3))) dup98(n4 @add(1 n2))) n0) tup(n2 n1)) fn(n3 _)) }

::std::array::Array::push_front::1 {
  x(n5 x(n4 n3))
  ::std::array::Node::leaf = fn(n3 n0)
  ::std::array::Node = fn(n0 fn(n1 n2))
  ::std::array::Array::push_front::2 = x(n4 x(ref(n1 n2) n5))
}

::std::array::Array::push_front::2 { x(n0 x(n1 dup102(@lt$(1 ?(::std::array::Array::push_front::4 ::std::array::Array::push_front::3 x(n0 x(n1 n2)))) n2))) }

::std::array::Array::push_front::3 {
  x(ref(tup(n1 n0) tup(n4 n2)) x(n5 @div(2 n6)))
  tup(n0 n1) = tup(n3 n2)
  ::std::array::Array::push_front::2 = x(ref(n3 n4) x(n5 n6))
}

::std::array::Array::push_front::4 { x(n0 x(n0 _)) }

::std::array::Array::push_front::5 {
  x(_ x(ref(_ n0) n1))
  ::std::array::Node::leaf = fn(n1 n0)
}

::std::array::Array::pop_back { fn(ref(tup(dup110(?(::std::array::Array::pop_back::13 ::std::array::Array::pop_back::1 x(n2 x(n3 x(ref(n0 n1) n4)))) n2) n0) tup(n3 n1)) n4) }

::std::array::Array::pop_back::1 { x(dup110(@eq(1 ?(::std::array::Array::pop_back::3 ::std::array::Array::pop_back::2 x(n0 n1))) n0) n1) }

::std::array::Array::pop_back::2 {
  x(_ x(0 x(ref(n0 _) n2)))
  ::std::array::Node::to_leaf = fn(n0 n1)
  ::std::option::Option::Some = fn(n1 n3)
  ::std::array::Array::pop_back::14 = x(n2 n3)
}

::std::array::Array::pop_back::3 {
  x(dup110(n2 @sub(1 n0)) x(n0 x(n1 n3)))
  ::std::array::Array::pop_back::4 = x(n1 x(n2 n3))
}

::std::array::Array::pop_back::4 {
  x(ref(n0 n4) x(dup112(@sub(1 @rem(2 dup113(n7 n8))) n1) n5))
  ::std::array::Node::half = fn(ref(n0 n3) fn(n1 fn(n7 tup(n2 dup112(@eq(1 ?(::std::array::Array::pop_back::9 ::std::array::Array::pop_back::5 x(n2 x(n6 x(n8 x(n3 x(n4 n5))))))) n6)))))
}

::std::array::Array::pop_back::5 {
  x(ref(n0 _) x(_ x(?(::std::array::Array::pop_back::7 ::std::array::Array::pop_back::6 x(n3 x(n4 n5))) x(tup(n3 n4) x(n5 n2)))))
  ::std::array::Node::to_leaf = fn(n0 n1)
  ::std::option::Option::Some = fn(n1 n2)
}

::std::array::Array::pop_back::6 { x(n0 x(_ n0)) }

::std::array::Array::pop_back::7 { x(_ x(n0 n0)) }

::std::array::Array::pop_back::9 {
  x(n1 x(n2 x(_ x(n0 x(n0 n3)))))
  ::std::array::Array::pop_back::4 = x(n1 x(n2 n3))
}

::std::array::Array::pop_back::13 {
  x(n0 x(n0 x(_ n1)))
  ::std::array::Array::pop_back::14 = x(n1 ::std::option::Option::None)
}

::std::array::Array::pop_back::14 { x(n0 n0) }

::std::array::Node { fn(n0 fn(n1 tup(n0 n1))) }

::std::array::Node::to_leaf { fn(x x) }

::std::array::Node::as_leaf { fn(x x) }

::std::array::Node::leaf { fn(x x) }

::std::array::Node::half { fn(ref(tup(n0 n2) tup(n1 n3)) fn(n4 fn(?(::std::array::Node::half::2 ::std::array::Node::half::1 x(n0 x(n1 x(n2 x(n3 x(n4 n5)))))) n5))) }

::std::array::Node::half::1 { x(n1 x(n1 x(n2 x(n3 x(@div(2 n0) tup(ref(n2 n3) n0)))))) }

::std::array::Node::half::2 { x(n1 x(n2 x(n3 x(n3 x(@add(1 @div(2 n0)) tup(ref(n1 n2) n0)))))) }

::std::array::Node::zip_with { fn(dup171(@eq(1 ?(::std::array::Node::zip_with::2 ::std::array::Node::zip_with::1 x(n4 x(n0 x(n1 x(n2 n3)))))) n4) fn(n0 fn(n1 fn(n2 n3)))) }

::std::array::Node::zip_with::1 {
  x(_ x(n3 x(n4 x(fn(n0 fn(n1 n2)) n5))))
  ::std::array::Node::to_leaf = fn(n3 n0)
  ::std::array::Node::to_leaf = fn(n4 n1)
  ::std::array::Node::leaf = fn(n2 n5)
}

::std::array::Node::zip_with::2 {
  x(dup171(@add(1 @div(2 n0)) @div(2 n4)) x(tup(n1 n5) x(tup(n2 n6) x(dup174(n9 n10) n8))))
  ::std::array::Node::zip_with = fn(n0 fn(n1 fn(n2 fn(n9 n3))))
  ::std::array::Node = fn(n3 fn(n7 n8))
  ::std::array::Node::zip_with = fn(n4 fn(n5 fn(n6 fn(n10 n7))))
}

::std::array::Node::unzip_with { fn(dup182(@eq(1 ?(::std::array::Node::unzip_with::2 ::std::array::Node::unzip_with::1 x(n3 x(n0 x(n1 n2))))) n3) fn(n0 fn(n1 n2))) }

::std::array::Node::unzip_with::1 {
  x(_ x(n5 x(fn(n0 tup(n1 n3)) tup(n2 n4))))
  ::std::array::Node::to_leaf = fn(n5 n0)
  ::std::array::Node::leaf = fn(n1 n2)
  ::std::array::Node::leaf = fn(n3 n4)
}

::std::array::Node::unzip_with::2 {
  x(dup182(@add(1 @div(2 n0)) @div(2 n2)) x(tup(n1 n3) x(dup184(n10 n11) tup(n6 n9))))
  ::std::array::Node::unzip_with = fn(n0 fn(n1 fn(n10 tup(n4 n7))))
  ::std::array::Node::unzip_with = fn(n2 fn(n3 fn(n11 tup(n5 n8))))
  ::std::array::Node = fn(n4 fn(n5 n6))
  ::std::array::Node = fn(n7 fn(n8 n9))
}

::std::io::IO::println {
  fn(ref(n0 n3) fn(n1 _))
  ::std::io::IO::print = fn(ref(n0 n2) fn(n1 _))
  ::std::io::IO::print_char = fn(ref(n2 n3) fn(10 _))
}

::std::io::IO::print {
  fn(ref(n0 n1) fn(tup(n2 tup(n3 _)) _))
  ::std::io::IO::print::1 = x(n0 x(n1 x(n2 n3)))
}

::std::io::IO::print::1 { x(n0 x(n1 x(dup208(?(::std::io::IO::print::3 ::std::io::IO::print::2 x(n0 x(n1 x(n3 n2)))) n3) n2))) }

::std::io::IO::print::2 {
  x(n1 x(n3 x(@sub(1 n4) tup(n0 n5))))
  ::std::io::IO::print_char = fn(ref(n1 n2) fn(n0 _))
  ::std::io::IO::print::1 = x(n2 x(n3 x(n4 n5)))
}

::std::io::IO::print::3 { x(n0 x(n0 _)) }

::std::io::IO::print_char { fn(ref(@io_print_char(char io) io) fn(char _)) }

::std::list::List { fn(n0 fn(n1 fn(n2 tup(n0 tup(n1 n2))))) }

::std::list::List::concat {
  fn(tup(@add(n1 n2) tup(n3 n0)) fn(tup(n1 tup(n0 n4)) n5))
  ::std::list::List = fn(n2 fn(n3 fn(n4 n5)))
}

::std::n32::N32::to_string { fn(dup809(?(::std::n32::N32::to_string::5 ::std::n32::N32::to_string::1 x(n1 n0)) n1) n0) }

::std::n32::N32::to_string::1 {
  x(n1 n2)
  ::std::n32::N32::to_string::2 = x(n1 x(tup(0 tup(n0 n0)) n2))
}

::std::n32::N32::to_string::2 { x(dup809(?(::std::n32::N32::to_string::4 ::std::n32::N32::to_string::3 x(n2 n0)) n2) n0) }

::std::n32::N32::to_string::3 {
  x(dup809(@rem(10 n0) @div(10 n4)) x(n3 n6))
  48 = @add(n0 n1)
  ::std::list::List::concat = fn(tup(1 tup(tup(n1 n2) n2)) fn(n3 n5))
  ::std::n32::N32::to_string::2 = x(n4 x(n5 n6))
}

::std::n32::N32::to_string::4 { x(_ x(n0 n0)) }

::std::n32::N32::to_string::5 { x(_ tup(1 tup(tup(48 n0) n0))) }

::std::option::Option::Some { fn(n0 enum(enum(n0 n1) enum(_ n1))) }

::std::option::Option::None { enum(_ enum(n0 n0)) }

::std::option::Option::unwrap { fn(enum(::std::option::Option::unwrap::1 enum(_ n0)) n0) }

::std::option::Option::unwrap::1 { enum(n0 n0) }

