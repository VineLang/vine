
io = #io
> use std::{data::Array, numeric::N64};

io = #io
> (1, _)
error input:1:1 - tuple members have inconsistent forms

io = #io
> fn _foo() {}

io = #io
> 1.as[String]
"1"

io = #io
> 1.0.as[String]
"+1.00000"

io = #io
> ((1,2),(3,4)).0
(1, 2)

io = #io
> ((1,2),(3,4)).0.0
1

io = #io
> ((1,2),(3,4)).0.0.as[String]
"1"

io = #io
> ((1,2),(3,4)).1.1.as[String]
"4"

io = #io
> "abc" ++ 123
error input:1:1 - cannot find impl of trait `Concat[String, N32, ?13]`

io = #io
> ([true, false]; _).show().as[String]
"[true, false]"

io = #io
> [1,2,3,4].slice(2)
[3, 4]

io = #io
> [1,2,3,4].reversed()
[4, 3, 2, 1]

io = #io
> let a = Array::from_fn(5, &(0; _), fn(&x: &N32) { let n = x; x += 1; n });

io = #io
a = Array(5, Node(Node(Node(Node(#ivy(0)), Node(#ivy(4))), Node(#ivy(2))), Node(Node(#ivy(1)), Node(#ivy(3)))))
> a.for_each(&io, fn(&io: &IO, v: N32) { io.println("{v}")})
0
1
2
3
4

io = #io
a = Array(5, Node(Node(Node(Node(#ivy(0)), Node(#ivy(4))), Node(#ivy(2))), Node(Node(#ivy(1)), Node(#ivy(3)))))
> -a.fold_front(0, fn(a: N32, b: N32) { a - b })
10

io = #io
a = Array(5, Node(Node(Node(Node(#ivy(0)), Node(#ivy(4))), Node(#ivy(2))), Node(Node(#ivy(1)), Node(#ivy(3)))))
> -a.fold_back(5, fn(a: N32, b: N32) { a - b })
5

io = #io
a = Array(5, Node(Node(Node(Node(#ivy(0)), Node(#ivy(4))), Node(#ivy(2))), Node(Node(#ivy(1)), Node(#ivy(3)))))
> move a
Array(5, Node(Node(Node(Node(#ivy(0)), Node(#ivy(4))), Node(#ivy(2))), Node(Node(#ivy(1)), Node(#ivy(3)))))

io = #io
> [1,2,3,4,5,6,7,8,9].as[Array].reversed().as[List]
[9, 8, 7, 6, 5, 4, 3, 2, 1]

io = #io
> List::new(100, "")
["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""]

io = #io
> 2 ** 10
1024

io = #io
> 4 + 4 ** 3 ** 2 / 2
131076

io = #io
> 12.34 ** -5
3.4948148e-6

io = #io
> 12.34 ** +0
1.0

io = #io
> 12.34 ** +3
1879.0809

io = #io
> 1024.log(2)
10

io = #io
> 1000.log(2)
9

io = #io
> 1025.log(2)
10

io = #io
> 10.max(100)
100

io = #io
> 10.min(100)
10

io = #io
> 10.diff(100)
90

io = #io
> 123.gcd(456)
3

io = #io
> 99.sqrt()
9

io = #io
> 100.sqrt()
10

io = #io
> 101.sqrt()
10

io = #io
> (N64::parse("1234567890123456789000").unwrap() + N64::parse("46").unwrap()) as String
"17082781258626382390"

io = #io
> N64::parse("")
None

io = #io
> N64::parse("one")
None

io = #io
> N64::parse("1.0")
None

io = #io
> (3 as N64 ** 33) as String
"5559060566555523"

io = #io
> (3 as N64 ** 33).log_n32(3)
32

io = #io
> ((3 as N64 ** 33) - 1 as N64).log_n32(3)
32

io = #io
> ((3 as N64 ** 33) + 1 as N64).log_n32(3)
32

io = #io
> "1,2,3,4".split(",")
["1", "2", "3", "4"]

io = #io
> "      1 2  3 4   ".split_trim(" ")
["1", "2", "", "3", "4"]

io = #io
> "1,2, 3,4, 5,6".split_once(", ")
("1,2", Some("3,4, 5,6"))

io = #io
> 123.show(2)
error input:1:1 - function type `fn(&N32) -> Show` expects 1 argument; was passed 2

io = #io
> let x = [[1]];

io = #io
x = [[1]]
> x.get(0).*.get(0).*
1

io = #io
x = [[1]]
> x.get(0).*.get(0).* = 2

io = #io
x = [[2]]
> ~x.get(0).*.get(0).*.~
2

io = #io
x = [[2]]
> move x
[[2]]

io = #io
> let _: { a: N32, b: N32 } = { a: 1 }
error input:1:29 - expected type `{ a: N32, b: N32 }`; found `{ a: N32 }`

io = #io
