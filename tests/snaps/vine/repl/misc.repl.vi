
io = #io
> use std::{array::Array, n64::N64};

io = #io
> (1, _)
error input:1:1 - tuple members have inconsistent forms

io = #io
> fn _foo() {}

io = #io
> 1.to_string()
"1"

io = #io
> 1.0.to_string()
error input:1:5 - cannot find `to_string` in `::std::f32::F32`

io = #io
> ((1,2),(3,4)).0
(1, 2)

io = #io
> ((1,2),(3,4)).0.0
1

io = #io
> ((1,2),(3,4)).0.0.to_string()
"1"

io = #io
> ((1,2),(3,4)).1.1.to_string()
"4"

io = #io
> "abc" ++ 123
error input:1:1 - cannot apply operator `++` to types `List[Char]` and `N32`

io = #io
> [true, false].to_string(Bool::to_string)
"[true, false]"

io = #io
> [1,2,3,4].slice(2)
[3, 4]

io = #io
> [1,2,3,4].reversed()
[4, 3, 2, 1]

io = #io
> let a = Array::from_fn(5, &(0; _), fn(&x: &N32) { let n = x; x += 1; n });

io = #io
a = Array(5, Node(Node(Node(#ivy(0), #ivy(4)), #ivy(2)), Node(#ivy(1), #ivy(3))))
> a.for_each(&io, fn(&io: &IO, v: N32) { io.println(v.to_string() )})
0
1
2
3
4

io = #io
a = Array(5, Node(Node(Node(#ivy(0), #ivy(4)), #ivy(2)), Node(#ivy(1), #ivy(3))))
> -a.fold_front(0, fn(a: N32, b: N32) { a - b })
10

io = #io
a = Array(5, Node(Node(Node(#ivy(0), #ivy(4)), #ivy(2)), Node(#ivy(1), #ivy(3))))
> -a.fold_back(5, fn(a: N32, b: N32) { a - b })
5

io = #io
a = Array(5, Node(Node(Node(#ivy(0), #ivy(4)), #ivy(2)), Node(#ivy(1), #ivy(3))))
> move a
Array(5, Node(Node(Node(#ivy(0), #ivy(4)), #ivy(2)), Node(#ivy(1), #ivy(3))))

io = #io
> Array::from_list([1,2,3,4,5,6,7,8,9]).reversed().to_list()
[9, 8, 7, 6, 5, 4, 3, 2, 1]

io = #io
> List::new(100, "")
["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""]

io = #io
> 2.pow(10)
1024

io = #io
> 1024.log(2)
10

io = #io
> 1000.log(2)
9

io = #io
> 1025.log(2)
10

io = #io
> 10.max(100)
100

io = #io
> 10.min(100)
10

io = #io
> 10.diff(100)
90

io = #io
> 123.gcd(456)
3

io = #io
> 99.sqrt()
9

io = #io
> 100.sqrt()
10

io = #io
> 101.sqrt()
10

io = #io
> N64::parse("1234567890123456789000").unwrap().add(N64::parse("46").unwrap()).to_string()
"17082781258626382390"

io = #io
> N64::parse("")
::std::option::Option::None

io = #io
> N64::parse("one")
::std::option::Option::None

io = #io
> N64::parse("1.0")
::std::option::Option::None

io = #io
> N64::from_n32(3).pow_n32(33).to_string()
"5559060566555523"

io = #io
> N64::from_n32(3).pow_n32(33).log_n32(3)
33

io = #io
> N64::from_n32(3).pow_n32(33).sub(N64::from_n32(1)).log_n32(3)
32

io = #io
> N64::from_n32(3).pow_n32(33).add(N64::from_n32(1)).log_n32(3)
33

io = #io
> "1,2,3,4".split(",")
["1", "2", "3", "4"]

io = #io
> "      1 2  3 4   ".split_trim(" ")
["1", "2", "", "3", "4"]

io = #io
> "1,2, 3,4, 5,6".split_once(", ")
("1,2", Some("3,4, 5,6"))

io = #io
> 123.to_string(2)
error input:1:1 - function type `fn(N32) -> List[Char]` expects 1 argument; was passed 2

io = #io
> let x = [[1]];

io = #io
x = [[1]]
> x.get(0).*.get(0).*
1

io = #io
x = [[1]]
> x.get(0).*.get(0).* = 2

io = #io
x = [[2]]
> ~x.get(0).*.get(0).*.~
2

io = #io
x = [[2]]
> move x
[[2]]

io = #io
