
io = #io
> use std::{ops::range::Bound::{Inclusive, Exclusive, Unbounded}};

io = #io
> let l = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];

io = #io
l = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
> l.slice[N32, Inclusive, Exclusive](3..5)
[3, 4]

io = #io
l = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
> l.slice[N32, Inclusive, Unbounded](5..)
[5, 6, 7, 8, 9, 10]

io = #io
l = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
> l.slice[N32, Unbounded, Exclusive](..2)
[0, 1]

io = #io
l = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
> l.slice[N32, Unbounded, Unbounded](..)
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

io = #io
l = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
> l.slice[N32, Inclusive, Inclusive](3..=5)
[3, 4, 5]

io = #io
l = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
> l.slice[N32, Unbounded, Inclusive](..=2)
[0, 1, 2]

io = #io
l = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
> l.slice[N32, Inclusive, Unbounded](5..=)
error input:1:40 - expected one of {DotDot, DotDotEq, ColonColon, And, AndAnd, Minus, Star, Bang, Tilde, OpenBrace, OpenParen, OpenBracket, Hole, Fn, InlineIvy, Match, Move, Return, Do, Loop, While, Break, Continue, If, True, False, Ident, Num, DoubleQuote, SingleQuote}; found Some(CloseParen)

io = #io
l = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
> l.slice[N32, Unbounded, Unbounded](..=)
error input:1:39 - expected one of {DotDot, DotDotEq, ColonColon, And, AndAnd, Minus, Star, Bang, Tilde, OpenBrace, OpenParen, OpenBracket, Hole, Fn, InlineIvy, Match, Move, Return, Do, Loop, While, Break, Continue, If, True, False, Ident, Num, DoubleQuote, SingleQuote}; found Some(CloseParen)

io = #io
l = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
> l.slice[N32, Inclusive, Exclusive](9..5)
[]

io = #io
l = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
> l.slice[N32, Inclusive, Exclusive](1 + 3 .. l.len() - 2 * 2)
[4, 5, 6]

io = #io
l = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
