
let io: IO = #io;
> let x = { a: 1, c: 3, b: 2 }

let io: IO = #io;
let x: { a: N32, b: N32, c: N32 } = { a: 1, b: 2, c: 3 };
> (x.a, x.b, x.c)
(1, 2, 3)

let io: IO = #io;
let x: { a: N32, b: N32, c: N32 } = { a: 1, b: 2, c: 3 };
> (x.c, x.b, x.a)
(3, 2, 1)

let io: IO = #io;
let x: { a: N32, b: N32, c: N32 } = { a: 1, b: 2, c: 3 };
> let y = { x }

let io: IO = #io;
let x: { a: N32, b: N32, c: N32 };
let y: { x: { a: N32, b: N32, c: N32 } } = { x: { a: 1, b: 2, c: 3 } };
> let z = { y }

let io: IO = #io;
let x: { a: N32, b: N32, c: N32 };
let y: { x: { a: N32, b: N32, c: N32 } };
let z: { y: { x: { a: N32, b: N32, c: N32 } } } = { y: { x: { a: 1, b: 2, c: 3 } } };
> z.y.x.a
1

let io: IO = #io;
let x: { a: N32, b: N32, c: N32 };
let y: { x: { a: N32, b: N32, c: N32 } };
let z: { y: { x: { a: N32, b: N32, c: N32 } } } = { y: { x: { a: 1, b: 2, c: 3 } } };
> z.y.x.a += y.x.b
error input:1:5 - variable of type `{ x: { a: N32, b: N32, c: N32 } }` read whilst uninitialized

let io: IO = #io;
let x: { a: N32, b: N32, c: N32 };
let y: { x: { a: N32, b: N32, c: N32 } };
let z: { y: { x: { a: N32, b: N32, c: N32 } } } = { y: { x: { a: 1, b: 2, c: 3 } } };
> let { y: { x: o } } = z

let io: IO = #io;
let x: { a: N32, b: N32, c: N32 };
let y: { x: { a: N32, b: N32, c: N32 } };
let z: { y: { x: { a: N32, b: N32, c: N32 } } };
let o: { a: N32, b: N32, c: N32 } = { a: 1, b: 2, c: 3 };
> let { c, b, a } = o

let io: IO = #io;
let x: { a: N32, b: N32, c: N32 };
let y: { x: { a: N32, b: N32, c: N32 } };
let z: { y: { x: { a: N32, b: N32, c: N32 } } };
let o: { a: N32, b: N32, c: N32 };
let c: N32 = 3;
let b: N32 = 2;
let a: N32 = 1;
> a + b + c
6

let io: IO = #io;
let x: { a: N32, b: N32, c: N32 };
let y: { x: { a: N32, b: N32, c: N32 } };
let z: { y: { x: { a: N32, b: N32, c: N32 } } };
let o: { a: N32, b: N32, c: N32 };
let c: N32 = 3;
let b: N32 = 2;
let a: N32 = 1;
> x.p
error input:1:3 - type `{ a: N32, b: N32, c: N32 }` has no field `p`

let io: IO = #io;
let x: { a: N32, b: N32, c: N32 };
let y: { x: { a: N32, b: N32, c: N32 } };
let z: { y: { x: { a: N32, b: N32, c: N32 } } };
let o: { a: N32, b: N32, c: N32 };
let c: N32 = 3;
let b: N32 = 2;
let a: N32 = 1;
> do { let { p } = x }
error input:1:18 - expected type `{ p: ?66 }`; found `{ a: N32, b: N32, c: N32 }`
error input:1:12 - search limit reached when finding flex of type `?66`
error input:1:5 - variable of type `{ a: N32, b: N32, c: N32 }` read whilst uninitialized
error input:1:12 - cannot drop `?66`

let io: IO = #io;
let x: { a: N32, b: N32, c: N32 };
let y: { x: { a: N32, b: N32, c: N32 } };
let z: { y: { x: { a: N32, b: N32, c: N32 } } };
let o: { a: N32, b: N32, c: N32 };
let c: N32 = 3;
let b: N32 = 2;
let a: N32 = 1;
> z = { Y: y }
error input:1:5 - expected type `{ y: { x: { a: N32, b: N32, c: N32 } } }`; found `{ Y: { x: { a: N32, b: N32, c: N32 } } }`
error input:1:5 - variable of type `{ x: { a: N32, b: N32, c: N32 } }` read whilst uninitialized

let io: IO = #io;
let x: { a: N32, b: N32, c: N32 };
let y: { x: { a: N32, b: N32, c: N32 } };
let z: { y: { x: { a: N32, b: N32, c: N32 } } };
let o: { a: N32, b: N32, c: N32 };
let c: N32 = 3;
let b: N32 = 2;
let a: N32 = 1;
> z = { y: 1 }
error input:1:5 - expected type `{ y: { x: { a: N32, b: N32, c: N32 } } }`; found `{ y: N32 }`

let io: IO = #io;
let x: { a: N32, b: N32, c: N32 };
let y: { x: { a: N32, b: N32, c: N32 } };
let z: { y: { x: { a: N32, b: N32, c: N32 } } };
let o: { a: N32, b: N32, c: N32 };
let c: N32 = 3;
let b: N32 = 2;
let a: N32 = 1;
