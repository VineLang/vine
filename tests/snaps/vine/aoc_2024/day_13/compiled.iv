
::main { ::day_13::main }

::day_13::main {
  fn(ref(w3 w30) _)
  ::std::io::IO::full_input = fn(ref(w3 w8) w10)
  ::std::list::List::split = fn(w10 fn(tup(2 tup(tup(10 tup(10 w37)) w37)) w14))
  ::std::n64::N64::from_n32 = fn(10 w16)
  ::std::n64::N64::pow_n32 = fn(w16 fn(13 w17))
  ::day_13::main::2 = x(w14 x(w17 x(x(0 w41) x(0 w39))))
  ::std::n32::N32::to_string = fn(w41 w26)
  ::std::list::List::concat = fn(tup(8 tup(tup(80 tup(97 tup(114 tup(116 tup(32 tup(49 tup(58 tup(32 w44)))))))) w44)) fn(w26 w27))
  ::std::io::IO::println = fn(ref(w8 w22) fn(w27 _))
  ::std::n64::N64::to_string = fn(w39 w34)
  ::std::list::List::concat = fn(tup(8 tup(tup(80 tup(97 tup(114 tup(116 tup(32 tup(50 tup(58 tup(32 w45)))))))) w45)) fn(w34 w35))
  ::std::io::IO::println = fn(ref(w22 w30) fn(w35 _))
}

::day_13::main::2 {
  x(w10 w9)
  ::std::list::List::pop_front = fn(ref(w10 w1) enum(::day_13::main::5 enum(::day_13::main::6 x(w1 w9))))
}

::day_13::main::5 {
  enum(w0 x(w7 x(dup24(w123 dup24(w128 w211)) x(x(w5 w210) x(w3 w208)))))
  ::std::list::List::split_once = fn(w0 fn(tup(1 tup(tup(43 w180) w180)) tup(_ w11)))
  ::std::option::Option::unwrap = fn(w11 w14)
  ::std::list::List::split_once = fn(w14 fn(tup(4 tup(tup(44 tup(32 tup(89 tup(43 w181)))) w181)) tup(w17 w18)))
  ::std::option::Option::unwrap = fn(w18 w21)
  ::std::list::List::split_once = fn(w21 fn(tup(13 tup(tup(10 tup(66 tup(117 tup(116 tup(116 tup(111 tup(110 tup(32 tup(66 tup(58 tup(32 tup(88 tup(43 w182))))))))))))) w182)) tup(w24 w25)))
  ::std::option::Option::unwrap = fn(w25 w28)
  ::std::list::List::split_once = fn(w28 fn(tup(4 tup(tup(44 tup(32 tup(89 tup(43 w183)))) w183)) tup(w31 w32)))
  ::std::option::Option::unwrap = fn(w32 w35)
  ::std::list::List::split_once = fn(w35 fn(tup(10 tup(tup(10 tup(80 tup(114 tup(105 tup(122 tup(101 tup(58 tup(32 tup(88 tup(61 w184)))))))))) w184)) tup(w38 w39)))
  ::std::option::Option::unwrap = fn(w39 w42)
  ::std::list::List::split_once = fn(w42 fn(tup(4 tup(tup(44 tup(32 tup(89 tup(61 w185)))) w185)) tup(w45 w46)))
  ::std::option::Option::unwrap = fn(w46 w49)
  ::std::list::List::split_once = fn(w49 fn(tup(1 tup(tup(10 w186) w186)) tup(w52 _)))
  ::std::n32::N32::parse = fn(w17 w55)
  ::std::option::Option::unwrap = fn(w55 dup44(@mul(w79 w80) dup44(@mul(w97 w98) dup44(@mul(w107 @add(w111 @eq(w188 ?(::day_13::main::9 ::day_13::main::8 x(x(w5 w196) x(w194 x(w193 x(w192 x(w120 _))))))))) dup44(w146 w160)))))
  ::std::n32::N32::parse = fn(w24 w59)
  ::std::option::Option::unwrap = fn(w59 dup45(@mul(w82 w83) dup45(@mul(w100 w101) dup45(@mul(w115 @add(w119 w120)) dup45(w150 w170)))))
  ::std::n32::N32::parse = fn(w31 w63)
  ::std::option::Option::unwrap = fn(w63 dup46(w82 dup46(@mul(w90 w91) dup46(@mul(w110 w111) dup46(w137 w164)))))
  ::std::n32::N32::parse = fn(w38 w67)
  ::std::option::Option::unwrap = fn(w67 dup47(w79 dup47(@mul(w87 w88) dup47(@mul(w118 w119) dup47(w133 w174)))))
  ::std::n32::N32::parse = fn(w45 w71)
  ::std::option::Option::unwrap = fn(w71 dup48(w87 dup48(w100 dup48(w188 w124))))
  ::std::n32::N32::parse = fn(w52 w75)
  ::std::option::Option::unwrap = fn(w75 dup49(w90 dup49(w97 dup49(w194 w129))))
  ::std::n32::N32::diff = fn(w80 fn(w83 dup50(w93 dup50(w103 dup50(w142 w155)))))
  ::std::n32::N32::diff = fn(w88 fn(w91 @div(w93 dup51(w107 dup51(w115 w193)))))
  ::std::n32::N32::diff = fn(w98 fn(w101 @div(w103 dup52(w110 dup52(w118 w192)))))
  ::std::n64::N64::from_n32 = fn(w124 w125)
  ::std::n64::N64::add = fn(w123 fn(w125 dup55(w135 dup55(w152 w198))))
  ::std::n64::N64::from_n32 = fn(w129 w130)
  ::std::n64::N64::add = fn(w128 fn(w130 dup56(w139 dup56(w148 w204))))
  ::std::n64::N64::from_n32 = fn(w133 w134)
  ::std::n64::N64::mul = fn(w134 fn(w135 w136))
  ::std::n64::N64::from_n32 = fn(w137 w138)
  ::std::n64::N64::mul = fn(w138 fn(w139 w140))
  ::std::n64::N64::diff = fn(w136 fn(w140 w141))
  ::std::n64::N64::div_rem_n32 = fn(w141 fn(w142 tup(dup57(w159 dup57(w169 w203)) _)))
  ::std::n64::N64::from_n32 = fn(w146 w147)
  ::std::n64::N64::mul = fn(w147 fn(w148 w149))
  ::std::n64::N64::from_n32 = fn(w150 w151)
  ::std::n64::N64::mul = fn(w151 fn(w152 w153))
  ::std::n64::N64::diff = fn(w149 fn(w153 w154))
  ::std::n64::N64::div_rem_n32 = fn(w154 fn(w155 tup(dup58(w163 dup58(w173 w202)) _)))
  ::std::n64::N64::from_n32 = fn(w160 w161)
  ::std::n64::N64::mul = fn(w159 fn(w161 w162))
  ::std::n64::N64::from_n32 = fn(w164 w165)
  ::std::n64::N64::mul = fn(w163 fn(w165 w166))
  ::std::n64::N64::add = fn(w162 fn(w166 w167))
  ::std::n64::N64::from_n32 = fn(w170 w171)
  ::std::n64::N64::mul = fn(w169 fn(w171 w172))
  ::std::n64::N64::from_n32 = fn(w174 w175)
  ::std::n64::N64::mul = fn(w173 fn(w175 w176))
  ::std::n64::N64::add = fn(w172 fn(w176 w177))
  ::std::n64::N64::eq = fn(w167 fn(w198 ?(::day_13::main::15 ::day_13::main::14 x(x(w3 w206) x(w204 x(w203 x(w202 x(w177 _))))))))
  ::day_13::main::2 = x(w7 x(w211 x(x(w196 w210) x(w206 w208))))
}

::day_13::main::6 { x(_ x(_ x(x(w3 w3) x(w1 w1)))) }

::day_13::main::8 { x(w9 x(w7 x(w6 x(w5 x(@eq(w7 ?(::day_13::main::11 ::day_13::main::10 x(w9 x(w6 x(w5 w10))))) w10))))) }

::day_13::main::9 { x(x(w6 w6) x(_ x(_ x(_ x(_ _))))) }

::day_13::main::10 { x(x(@add(w3 w5) w5) x(@mul(3 @add(w7 w3)) x(w7 _))) }

::day_13::main::11 { x(x(w4 w4) x(_ x(_ _))) }

::day_13::main::14 {
  x(w9 x(w7 x(w6 x(w5 x(w4 w10)))))
  ::std::n64::N64::eq = fn(w4 fn(w7 ?(::day_13::main::17 ::day_13::main::16 x(w9 x(w6 x(w5 w10))))))
}

::day_13::main::15 { x(x(w6 w6) x(_ x(_ x(_ x(_ _))))) }

::day_13::main::16 {
  x(x(w12 w6) x(w10 x(w9 _)))
  ::std::n64::N64::from_n32 = fn(3 w2)
  ::std::n64::N64::mul = fn(w10 fn(w2 w3))
  ::std::n64::N64::add = fn(w3 fn(w9 w5))
  ::std::n64::N64::add = fn(w12 fn(w5 w6))
}

::day_13::main::17 { x(x(w4 w4) x(_ x(_ _))) }

::std::io::IO::println {
  fn(ref(w3 w14) fn(w5 _))
  ::std::io::IO::print = fn(ref(w3 w9) fn(w5 _))
  ::std::io::IO::print_char = fn(ref(w9 w14) fn(10 _))
}

::std::io::IO::print {
  fn(ref(w3 w15) fn(tup(w9 tup(w10 _)) _))
  ::std::io::IO::print::2 = x(x(w3 w15) x(w9 w10))
}

::std::io::IO::print::2 { x(w4 x(dup569(?(::std::io::IO::print::4 ::std::io::IO::print::3 x(w4 x(w6 w1))) w6) w1)) }

::std::io::IO::print::3 {
  x(x(w17 w21) x(@sub(1 w1) tup(w4 w5)))
  ::std::io::IO::print_char = fn(ref(w17 w10) fn(w4 _))
  ::std::io::IO::print::2 = x(x(w10 w21) x(w1 w5))
}

::std::io::IO::print::4 { x(x(w3 w3) _) }

::std::io::IO::print_char { fn(ref(@io_print_char(char io) io) fn(char _)) }

::std::io::IO::full_input {
  fn(ref(w3 w14) w11)
  ::std::io::IO::full_input::2 = x(x(w3 w14) x(tup(0 tup(w10 w10)) w11))
}

::std::io::IO::full_input::2 {
  x(x(w9 w16) x(w7 w12))
  ::std::io::IO::read_byte = fn(ref(w9 w1) fn(0 dup663(@ne(0 ?(::std::io::IO::full_input::5 ::std::io::IO::full_input::4 x(x(w1 w16) x(w7 x(w13 w12))))) w13)))
}

::std::io::IO::full_input::4 {
  x(w8 x(w6 x(w5 w16)))
  ::std::list::List::concat = fn(w6 fn(tup(1 tup(tup(w5 w9) w9)) w3))
  ::std::io::IO::full_input::2 = x(w8 x(w3 w16))
}

::std::io::IO::full_input::5 { x(x(w5 w5) x(w3 x(_ w3))) }

::std::io::IO::read_byte { fn(ref(dup(io0 @io_read_byte(default dup(byte @seq$(io0 io1)))) io1) fn(default byte)) }

::std::list::List::len { fn(ref(tup(dup675(w13 w9) w10) tup(w9 w10)) w13) }

::std::list::List::pop_front { fn(ref(tup(dup772(?(::std::list::List::pop_front::4 ::std::list::List::pop_front::3 x(x(w17 w18) x(x(w5 w16) w14))) w17) tup(w5 w6)) tup(w18 tup(w16 w6))) w14) }

::std::list::List::pop_front::3 {
  x(x(@sub(1 w1) w1) x(x(tup(w3 w4) w4) w9))
  ::std::option::Option::Some = fn(w3 w9)
}

::std::list::List::pop_front::4 { x(x(w4 w4) x(x(w2 w2) ::std::option::Option::None)) }

::std::list::List::concat { fn(tup(@add(w12 w20) tup(w8 w13)) fn(tup(w12 tup(w13 w23)) tup(w20 tup(w8 w23)))) }

::std::list::List::iter { fn(ref(tup(dup932(w2 w12) tup(w5 w6)) tup(w2 tup(w14 w6))) tup(w12 ref(w5 w14))) }

::std::list::List::Iter::next { fn(ref(tup(dup939(?(::std::list::List::Iter::next::4 ::std::list::List::Iter::next::3 x(x(w16 w17) x(x(w5 w15) w13))) w16) w5) tup(w17 w15)) w13) }

::std::list::List::Iter::next::3 {
  x(x(@sub(1 w1) w1) x(x(ref(tup(w4 w7) tup(w5 w8)) ref(w7 w8)) w15))
  ::std::option::Option::Some = fn(ref(w4 w5) w15)
}

::std::list::List::Iter::next::4 { x(x(w8 w8) x(x(ref(w2 w2) _) ::std::option::Option::None)) }

::std::list::List::Iter::drop { fn(ref(tup(_ ref(w9 w9)) _) _) }

::std::list::List::split {
  fn(w2 fn(w3 w10))
  ::std::list::List::split::2 = x(w2 x(w3 x(tup(0 tup(w9 w9)) w10)))
}

::std::list::List::split::2 {
  x(w14 x(dup1015(w1 w20) x(w12 w18)))
  ::std::list::List::split_once = fn(w14 fn(w1 tup(w3 enum(::std::list::List::split::6 enum(::std::list::List::split::7 x(w20 x(w9 w18)))))))
  ::std::list::List::concat = fn(w12 fn(tup(1 tup(tup(w3 w15) w15)) w9))
}

::std::list::List::split::6 {
  enum(w0 w4)
  ::std::list::List::split::2 = x(w0 w4)
}

::std::list::List::split::7 { x(_ x(w1 w1)) }

::std::list::List::split_once {
  fn(w2 fn(w3 w15))
  ::std::list::List::split_once::2 = x(w3 x(tup(0 tup(w14 w14)) x(w2 w15)))
}

::std::list::List::split_once::2 {
  x(w12 x(w11 x(w10 w13)))
  ::std::list::List::len = fn(ref(w10 w1) @le$(w7 ?(::std::list::List::split_once::4 ::std::list::List::split_once::3 x(w5 x(w11 x(w1 w13))))))
  ::std::list::List::len = fn(ref(w12 w5) w7)
}

::std::list::List::split_once::3 {
  x(w23 x(w22 x(w21 w42)))
  ::std::list::List::iter = fn(ref(w23 w1) w3)
  ::std::list::List::iter = fn(ref(w21 w6) w8)
  ::std::list::List::split_once::6 = x(w1 x(w22 x(w6 x(w3 x(w8 w42)))))
}

::std::list::List::split_once::4 { x(_ ::std::list::List::split_once::24) }

::std::list::List::split_once::6 {
  x(w10 x(w9 x(w8 x(w7 w6))))
  ::std::list::List::Iter::next = fn(ref(w7 w1) enum(::std::list::List::split_once::9 enum(::std::list::List::split_once::10 x(w10 x(w9 x(w8 x(w1 w6)))))))
}

::std::list::List::split_once::9 {
  enum(ref(dup1134(w1 w16) w1) x(w9 x(w8 x(w7 x(w6 x(w5 w15))))))
  ::std::list::List::Iter::next = fn(ref(w5 w11) enum(::std::list::List::split_once::13 enum(::std::list::List::split_once::14 x(w9 x(w8 x(w7 x(w6 x(w11 x(w16 w15)))))))))
}

::std::list::List::split_once::10 {
  x(_ x(w4 x(w3 x(_ w1))))
  ::std::list::List::split_once::15 = x(w4 x(w3 w1))
}

::std::list::List::split_once::13 { enum(ref(dup1148(w1 w13) w1) x(w10 x(w9 x(w8 x(w7 x(w6 x(@ne(w13 ?(::std::list::List::split_once::6 ::std::list::List::split_once::17 x(w10 x(w9 x(w8 x(w7 x(w6 w15))))))) w15))))))) }

::std::list::List::split_once::14 {
  x(_ x(w5 x(w4 x(_ x(w2 x(_ w7))))))
  ::std::list::List::split_once::15 = x(w5 x(w4 x(w2 w7)))
}

::std::list::List::split_once::15 {
  x(w3 x(tup(_ tup(_ w12)) x(tup(w6 ref(w8 _)) tup(w3 w20))))
  ::std::option::Option::Some = fn(tup(w6 tup(w8 w12)) w20)
}

::std::list::List::split_once::17 {
  x(w5 x(w4 x(w3 x(w2 x(w1 w31)))))
  ::std::list::List::Iter::drop = fn(ref(w2 _) _)
  ::std::list::List::Iter::drop = fn(ref(w1 _) _)
  ::std::list::List::pop_front = fn(ref(w3 w27) enum(::std::list::List::split_once::22 enum(::std::list::List::split_once::23 x(w5 x(w4 x(w27 w31))))))
}

::std::list::List::split_once::22 {
  enum(w0 x(w5 x(w4 w3)))
  ::std::list::List::concat = fn(w4 fn(tup(1 tup(tup(w0 w10) w10)) w9))
  ::std::list::List::split_once::2 = x(w5 x(w9 w3))
}

::std::list::List::split_once::23 { x(_ ::std::list::List::split_once::24) }

::std::list::List::split_once::24 {
  x(w14 x(w13 tup(w10 ::std::option::Option::None)))
  ::std::list::List::concat = fn(w14 fn(w13 w10))
}

::std::n32::N32::to_string { fn(dup2262(?(::std::n32::N32::to_string::4 ::std::n32::N32::to_string::3 x(w8 w7)) w8) w7) }

::std::n32::N32::to_string::3 {
  x(w4 w7)
  ::std::n32::N32::to_string::5 = x(w4 x(tup(0 tup(w5 w5)) w7))
}

::std::n32::N32::to_string::4 { x(_ tup(1 tup(tup(48 w3) w3))) }

::std::n32::N32::to_string::5 { x(dup2272(?(::std::n32::N32::to_string::7 ::std::n32::N32::to_string::6 x(w6 w2)) w6) w2) }

::std::n32::N32::to_string::6 {
  x(dup2275(@rem(10 w1) @div(10 w8)) x(w11 w15))
  48 = @add(w1 w2)
  ::std::list::List::concat = fn(tup(1 tup(tup(w2 w13) w13)) fn(w11 w5))
  ::std::n32::N32::to_string::5 = x(w8 x(w5 w15))
}

::std::n32::N32::to_string::7 { x(_ x(w1 w1)) }

::std::n32::N32::parse { fn(tup(dup2282(?(::std::n32::N32::parse::4 ::std::n32::N32::parse::3 x(w13 x(w7 w11))) w13) tup(w7 _)) w11) }

::std::n32::N32::parse::3 {
  x(w5 x(w4 w6))
  ::std::n32::N32::parse::5 = x(w5 x(w4 x(0 w6)))
}

::std::n32::N32::parse::4 {
  x(_ x(_ w4))
  ::std::n32::N32::parse::11 = x(w4 ::std::option::Option::None)
}

::std::n32::N32::parse::5 { x(dup2293(?(::std::n32::N32::parse::7 ::std::n32::N32::parse::6 x(w8 w3)) w8) w3) }

::std::n32::N32::parse::6 {
  x(w18 x(tup(dup2302(dup2297(w20 @le(57 w23)) w26) w2) x(w16 w25)))
  48 = @le(w20 @n32_and(w23 ?(::std::n32::N32::parse::10 ::std::n32::N32::parse::9 x(w18 x(w2 x(w16 x(w26 w25)))))))
}

::std::n32::N32::parse::7 {
  x(_ x(_ x(w1 w8)))
  ::std::option::Option::Some = fn(w1 w6)
  ::std::n32::N32::parse::11 = x(w8 w6)
}

::std::n32::N32::parse::9 {
  x(@sub(1 w19) x(w3 x(@mul(10 @add(w15 w17)) x(@sub(48 w15) w20))))
  ::std::n32::N32::parse::5 = x(w19 x(w3 x(w17 w20)))
}

::std::n32::N32::parse::10 { x(_ x(_ x(_ x(_ ::std::option::Option::None)))) }

::std::n32::N32::parse::11 { x(w8 w8) }

::std::n32::N32::diff { fn(dup2363(@lt$(w8 ?(::std::n32::N32::diff::4 ::std::n32::N32::diff::3 x(w12 x(w11 w10)))) w12) fn(dup2364(w8 w11) w10)) }

::std::n32::N32::diff::3 { x(@sub(w4 w2) x(w4 w2)) }

::std::n32::N32::diff::4 { x(w5 x(@sub(w5 w2) w2)) }

::std::n64::N64::one { tup(1 0) }

::std::n64::N64::from_n32 { fn(w2 tup(w2 0)) }

::std::n64::N64::add { fn(tup(dup(@add(bl0 l) @n32_add_high(bl1 c)) @add(bh @add(c h))) fn(tup(dup(bl0 bl1) bh) tup(l h))) }

::std::n64::N64::sub { fn(tup(dup(@sub(bl0 l) @lt(bl1 c)) @sub(bh @sub(c h))) fn(tup(dup(bl0 bl1) bh) tup(l h))) }

::std::n64::N64::mul { fn(tup(dup(@mul(bl0 l) dup(@n32_mul_high(bl1 ll) @mul(bh @add(hl @add(ll h))))) ah) fn(tup(dup(bl0 dup(bl1 @mul(ah hl))) bh) tup(l h))) }

::std::n64::N64::mul_n32_n32 { fn(dup(@mul(b0 l) @n32_mul_high(b1 h)) fn(dup(b0 b1) tup(l h))) }

::std::n64::N64::div_rem_n32 {
  fn(tup(w2 dup2508(@div(w9 w10) @rem(w12 dup2509(@lt$(w31 ?(::std::n64::N64::div_rem_n32::4 ::std::n64::N64::div_rem_n32::3 x(x(w37 w38) x(w36 x(x(w10 w35) _))))) w37)))) fn(dup2511(w9 dup2511(w12 dup2511(w31 dup2511(w36 dup2511(w41 dup2511(w18 w22)))))) tup(tup(w21 w35) w24)))
  ::std::n64::N64::div_rem_n32::5 = x(x(w2 dup2507(@div(w18 w19) @rem(w22 w24))) x(w38 x(w41 x(0 @add(w19 w21)))))
}

::std::n64::N64::div_rem_n32::3 { x(x(dup2522(@div(w1 w2) @rem(w4 w6)) w6) x(dup2523(w1 w4) x(x(_ w2) _))) }

::std::n64::N64::div_rem_n32::4 { x(x(w5 w5) x(_ x(x(w2 w2) _))) }

::std::n64::N64::div_rem_n32::5 { x(w6 x(dup2531(?(::std::n64::N64::div_rem_n32::7 ::std::n64::N64::div_rem_n32::6 x(w6 x(w10 w3))) w10) w3)) }

::std::n64::N64::div_rem_n32::6 {
  x(x(w27 w33) x(dup2538(w2 w9) x(dup2540(w0 dup2540(w12 w30)) x(@add(w5 w7) w29))))
  4294967295 = @div(w0 @mul(w2 dup2544(w5 w11)))
  ::std::n64::N64::mul_n32_n32 = fn(w11 fn(w12 w13))
  ::std::n64::N64::sub = fn(tup(w27 w9) fn(w13 tup(w15 w16)))
  ::std::n64::N64::div_rem_n32::5 = x(x(w15 w33) x(w16 x(w30 x(w7 w29))))
}

::std::n64::N64::div_rem_n32::7 { x(x(w5 w5) x(_ x(_ x(w1 w1)))) }

::std::n64::N64::eq { fn(tup(@eq(w5 ?(::std::n64::N64::eq::4 ::std::n64::N64::eq::3 x(w3 x(w6 w14)))) w3) fn(tup(w5 w6) w14)) }

::std::n64::N64::eq::3 { x(@eq(w4 ?(0 1 w6)) x(w4 w6)) }

::std::n64::N64::eq::4 { x(_ x(_ 0)) }

::std::n64::N64::ge { fn(tup(w2 dup2680(@lt$(w12 ?(::std::n64::N64::ge::4 ::std::n64::N64::ge::3 x(w2 x(w17 x(w5 x(w15 w14)))))) w17)) fn(tup(w5 dup2682(w12 w15)) w14)) }

::std::n64::N64::ge::3 { x(_ x(_ x(_ x(_ 1)))) }

::std::n64::N64::ge::4 { x(w7 x(@eq(w4 ?(::std::n64::N64::ge::6 ::std::n64::N64::ge::5 x(w7 x(w5 w8)))) x(w5 x(w4 w8)))) }

::std::n64::N64::ge::5 { x(@le$(w4 ?(0 1 w6)) x(w4 w6)) }

::std::n64::N64::ge::6 { x(_ x(_ 0)) }

::std::n64::N64::to_string {
  fn(dup2789(w6 w9) w8)
  ::std::n64::N64::eq = fn(w6 fn(0 ?(::std::n64::N64::to_string::4 ::std::n64::N64::to_string::3 x(w9 w8))))
}

::std::n64::N64::to_string::3 { x(_ tup(1 tup(tup(48 w3) w3))) }

::std::n64::N64::to_string::4 {
  x(w4 w7)
  ::std::n64::N64::to_string::5 = x(w4 x(tup(0 tup(w5 w5)) w7))
}

::std::n64::N64::to_string::5 {
  x(dup2799(w0 w7) w3)
  ::std::n64::N64::eq = fn(w0 fn(0 ?(::std::n64::N64::to_string::7 ::std::n64::N64::to_string::6 x(w7 w3))))
}

::std::n64::N64::to_string::6 { x(_ x(w1 w1)) }

::std::n64::N64::to_string::7 {
  x(w15 x(w14 w18))
  ::std::n64::N64::div_rem_n32 = fn(w15 fn(10 tup(w2 w3)))
  48 = @add(w3 w6)
  ::std::list::List::concat = fn(tup(1 tup(tup(w6 w16) w16)) fn(w14 w9))
  ::std::n64::N64::to_string::5 = x(w2 x(w9 w18))
}

::std::n64::N64::pow_n32 {
  fn(w2 fn(w3 w9))
  ::std::n64::N64::pow_n32::2 = x(w2 x(w3 x(::std::n64::N64::one w9)))
}

::std::n64::N64::pow_n32::2 { x(w4 x(dup2818(?(::std::n64::N64::pow_n32::4 ::std::n64::N64::pow_n32::3 x(w4 x(w7 w2))) w7) w2)) }

::std::n64::N64::pow_n32::3 {
  x(dup2821(w16 dup2821(w1 w2)) x(dup2823(@rem(2 ?(::std::n64::N64::pow_n32::7 ::std::n64::N64::pow_n32::6 x(w16 x(x(w8 w15) _)))) @div(2 w6)) x(w8 w18)))
  ::std::n64::N64::mul = fn(w1 fn(w2 w3))
  ::std::n64::N64::pow_n32::2 = x(w3 x(w6 x(w15 w18)))
}

::std::n64::N64::pow_n32::4 { x(_ x(_ x(w1 w1))) }

::std::n64::N64::pow_n32::6 {
  x(w7 x(x(w6 w2) _))
  ::std::n64::N64::mul = fn(w6 fn(w7 w2))
}

::std::n64::N64::pow_n32::7 { x(_ x(x(w2 w2) _)) }

::std::n64::N64::diff {
  fn(dup2855(w7 w12) fn(dup2856(w8 w11) w10))
  ::std::n64::N64::ge = fn(w7 fn(w8 ?(::std::n64::N64::diff::4 ::std::n64::N64::diff::3 x(w12 x(w11 w10)))))
}

::std::n64::N64::diff::3 {
  x(w5 x(w4 w2))
  ::std::n64::N64::sub = fn(w5 fn(w4 w2))
}

::std::n64::N64::diff::4 {
  x(w5 x(w4 w2))
  ::std::n64::N64::sub = fn(w4 fn(w5 w2))
}

::std::option::Option::Some { fn(f0 enum(enum(f0 r) enum(_ r))) }

::std::option::Option::None { enum(_ enum(r r)) }

::std::option::Option::unwrap { fn(enum(::std::option::Option::unwrap::4 enum(_ w8)) w8) }

::std::option::Option::unwrap::4 { enum(w0 w0) }

