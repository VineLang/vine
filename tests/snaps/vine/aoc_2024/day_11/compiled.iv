
::std::logical::Option::None { enum(_ enum(r r)) }

::std::numeric::N64::add {
  fn(tup(dup(al0 al1) ah) fn(tup(dup(bl0 bl1) bh) tup(l h)))
  al0 = @add(bl0 l)
  al1 = @n32_add_high(bl1 c)
  ah = @add(bh @add(c h))
}

::std::numeric::N64::sub {
  fn(tup(dup(al0 al1) ah) fn(tup(dup(bl0 bl1) bh) tup(l h)))
  al0 = @sub(bl0 l)
  al1 = @lt(bl1 c)
  ah = @sub(bh @sub(c h))
}

::std::numeric::N64::mul {
  fn(tup(dup(al0 dup(al1 al2)) ah) fn(tup(dup(bl0 dup(bl1 bl2)) bh) tup(l h)))
  al0 = @mul(bl0 l)
  al1 = @n32_mul_high(bl1 ll)
  al2 = @mul(bh lh)
  bl2 = @mul(ah hl)
  lh = @add(hl @add(ll h))
}

::std::numeric::N64::mul_n32_n32 {
  fn(dup(a0 a1) fn(dup(b0 b1) tup(l h)))
  a0 = @mul(b0 l)
  a1 = @n32_mul_high(b1 h)
}

::std::ops::Ord::Lt { enum(r enum(_ enum(_ r))) }

::std::ops::Ord::Eq { enum(_ enum(r enum(_ r))) }

::std::ops::Ord::Gt { enum(_ enum(_ enum(r r))) }

::std::IO::print_char { fn(ref(@io_print_char(char io) io) fn(char _)) }

::std::IO::read_byte { fn(ref(dup(io0 @io_read_byte(default dup(byte @seq$(io0 io1)))) io1) fn(default byte)) }

::main { ::day_11::main }

::day_11::main {
  fn(ref(w1 w27) _)
  ::std::IO::read_line = fn(ref(w1 w6) w8)
  ::std::logical::Option::unwrap = fn(w8 w9)
  ::std::unicode::String::split = fn(w9 fn(tup(1 tup(tup(32 w20) w20)) w14))
  ::day_11::main::1 = x(x(::std::data::Map::empty w23) w14)
  ::day_11::main::6 = x(x(w6 w27) x(w23 0))
}

::day_11::main::1 {
  x(w7 w5)
  ::std::data::List::pop_front = fn(ref(w5 w1) w3)
  w3 = enum(::day_11::main::4 enum(::day_11::main::5 x(w7 w1)))
}

::day_11::main::4 {
  enum(w0 x(x(w4 w17) w2))
  ::std::numeric::N32::parse = fn(w0 w6)
  ::std::logical::Option::unwrap = fn(w6 w7)
  ::std::numeric::N64::from_n32 = fn(w7 w8)
  ::std::data::Map::insert::1 = fn(ref(w4 w11) fn(w8 fn(::std::numeric::N64::one _)))
  ::day_11::main::1 = x(x(w11 w17) w2)
}

::day_11::main::5 { x(x(w2 w2) _) }

::day_11::main::6 {
  x(w5 x(w3 dup28(w0 w6)))
  w0 = @lt(75 w1)
  w1 = ?(::day_11::main::8 ::day_11::main::7 x(w5 x(w3 w6)))
}

::day_11::main::7 {
  x(x(w23 w34) x(w21 w20))
  ::day_11::blink = fn(ref(w23 w1) fn(w21 w4))
  w20 = @add(1 dup37(w12 w31))
  ::std::numeric::N32::to_string::to_string = fn(w12 w13)
  ::day_11::count = fn(ref(w4 w15) w17)
  ::std::numeric::N64::to_string::to_string = fn(w17 w18)
  w13 = tup(@add(2 w27) tup(w25 tup(58 tup(32 w28))))
  w18 = tup(@add(w27 w29) tup(w28 w30))
  ::std::IO::println = fn(ref(w1 w9) fn(tup(w29 tup(w25 w30)) _))
  ::day_11::main::6 = x(x(w9 w34) x(w15 w31))
}

::day_11::main::8 { x(x(w3 w3) _) }

::std::data::Map::insert::1 {
  fn(ref(tup(dup40(w13 w19) w3) tup(w20 w18)) fn(w7 fn(w8 w14)))
  w13 = ?(::std::data::Map::insert::1::3 ::std::data::Map::insert::1::2 x(x(w19 w20) x(x(w3 w18) x(w7 x(w8 w14)))))
}

::std::data::Map::insert::1::2 {
  x(w25 x(x(w23 w47) x(w21 x(w20 w35))))
  ref(tup(w4 tup(tup(w6 w8) w12)) tup(w43 tup(tup(w41 w39) w37))) = ref(w23 w1)
  ::std::numeric::N64::ord::cmp = fn(ref(w21 w27) fn(ref(w6 w30) w32))
  w32 = enum(::std::data::Map::insert::1::8 enum(::std::data::Map::insert::1::9 enum(::std::data::Map::insert::1::10 x(w25 x(x(w1 w47) x(w27 x(w20 x(x(w4 w43) x(x(w30 w41) x(x(w8 w39) x(x(w12 w37) x(w35 _))))))))))))
}

::std::data::Map::insert::1::3 {
  x(x(_ w0) x(x(_ w5) x(w8 x(w7 ::std::logical::Option::None))))
  w0 = 1
  w5 = tup(::std::data::Map::empty tup(tup(w8 w7) ::std::data::Map::empty))
}

::std::data::Map::insert::1::8 {
  x(x(_ w27) x(x(w13 w29) x(w11 x(w10 x(x(w9 w17) x(x(w7 w7) x(x(w5 w5) x(x(w3 w3) x(w22 _)))))))))
  ::std::data::Map::insert::1 = fn(ref(w9 w17) fn(w11 fn(w10 w21)))
  w22 = w21
  ::std::data::Map::size = fn(ref(w13 w24) w26)
  w27 = w26
  ::std::data::Map::balance_right = fn(ref(w24 w29) _)
}

::std::data::Map::insert::1::9 {
  x(x(w15 w15) x(x(w13 w13) x(w11 x(w10 x(x(w9 w9) x(x(_ w20) x(x(w5 w22) x(x(w3 w3) x(w18 _)))))))))
  w18 = enum(enum(w5 w23) enum(_ w23))
  w20 = w11
  w22 = w10
}

::std::data::Map::insert::1::10 {
  x(x(_ w27) x(x(w13 w29) x(w11 x(w10 x(x(w9 w9) x(x(w7 w7) x(x(w5 w5) x(x(w3 w17) x(w22 _)))))))))
  ::std::data::Map::insert::1 = fn(ref(w3 w17) fn(w11 fn(w10 w21)))
  w22 = w21
  ::std::data::Map::size = fn(ref(w13 w24) w26)
  w27 = w26
  ::std::data::Map::balance_left = fn(ref(w24 w29) _)
}

::std::numeric::N64::ord::cmp {
  fn(ref(tup(w1 dup113(w2 dup113(w18 w25))) tup(w27 w2)) fn(ref(tup(w8 dup116(w9 dup116(w19 w22))) tup(w24 w9)) w21))
  w18 = @lt(w19 w20)
  w20 = ?(::std::numeric::N64::ord::cmp::3 ::std::numeric::N64::ord::cmp::2 x(x(w1 w27) x(w25 x(x(w8 w24) x(w22 w21)))))
}

::std::numeric::N64::ord::cmp::2 { x(x(w6 w6) x(_ x(x(w3 w3) x(_ ::std::ops::Ord::Lt)))) }

::std::numeric::N64::ord::cmp::3 {
  x(w9 x(w7 x(w6 x(w4 w10))))
  w7 = @lt$(w4 w2)
  w2 = ?(::std::numeric::N64::ord::cmp::5 ::std::numeric::N64::ord::cmp::4 x(w9 x(w6 w10)))
}

::std::numeric::N64::ord::cmp::4 { x(x(w4 w4) x(x(w2 w2) ::std::ops::Ord::Gt)) }

::std::numeric::N64::ord::cmp::5 {
  x(x(w11 w1) x(x(w9 w4) w6))
  ::std::numeric::N32::ord::cmp = fn(ref(w11 w1) fn(ref(w9 w4) w6))
}

::std::numeric::N32::ord::cmp {
  fn(ref(dup138(w0 dup138(w10 w15)) w0) fn(ref(dup139(w3 dup139(w11 w14)) w3) w13))
  w10 = @lt(w11 w12)
  w12 = ?(::std::numeric::N32::ord::cmp::3 ::std::numeric::N32::ord::cmp::2 x(w15 x(w14 w13)))
}

::std::numeric::N32::ord::cmp::2 { x(_ x(_ ::std::ops::Ord::Lt)) }

::std::numeric::N32::ord::cmp::3 {
  x(w5 x(w4 w6))
  w5 = @lt$(w4 w2)
  w2 = ?(::std::ops::Ord::Eq ::std::ops::Ord::Gt w6)
}

::std::numeric::N32::to_string::to_string {
  fn(dup149(w5 w7) w6)
  w5 = ?(::std::numeric::N32::to_string::to_string::3 ::std::numeric::N32::to_string::to_string::2 x(w7 w6))
}

::std::numeric::N32::to_string::to_string::2 {
  x(w6 w4)
  ::std::numeric::N32::to_string::to_string::4 = x(w6 x(tup(0 tup(w7 w7)) w9))
  w4 = w9
}

::std::numeric::N32::to_string::to_string::3 {
  x(_ w0)
  w0 = tup(w3 tup(tup(48 w4) w5))
  1 = w3
  w4 = w5
}

::std::numeric::N32::to_string::to_string::4 {
  x(dup158(w0 w6) w2)
  w0 = ?(::std::numeric::N32::to_string::to_string::6 ::std::numeric::N32::to_string::to_string::5 x(w6 w2))
}

::std::numeric::N32::to_string::to_string::5 {
  x(dup161(w0 w7) x(w11 w15))
  w0 = @rem(10 w1)
  48 = @add(w1 w2)
  ::std::data::List::concat = fn(tup(1 tup(tup(w2 w13) w13)) fn(w11 w5))
  w7 = @div(10 w8)
  ::std::numeric::N32::to_string::to_string::4 = x(w8 x(w5 w15))
}

::std::numeric::N32::to_string::to_string::6 { x(_ x(w1 w1)) }

::std::numeric::N64::to_string::to_string {
  fn(dup167(w5 w8) w7)
  ::std::numeric::N64::eq = fn(w5 fn(0 w6))
  w6 = ?(::std::numeric::N64::to_string::to_string::3 ::std::numeric::N64::to_string::to_string::2 x(w8 w7))
}

::std::numeric::N64::to_string::to_string::2 {
  x(_ w0)
  w0 = tup(w3 tup(tup(48 w4) w5))
  1 = w3
  w4 = w5
}

::std::numeric::N64::to_string::to_string::3 {
  x(w4 w9)
  ::std::numeric::N64::to_string::to_string::4 = x(w4 x(tup(0 tup(w7 w7)) w9))
}

::std::numeric::N64::to_string::to_string::4 {
  x(dup176(w0 w7) w3)
  ::std::numeric::N64::eq = fn(w0 fn(0 w1))
  w1 = ?(::std::numeric::N64::to_string::to_string::6 ::std::numeric::N64::to_string::to_string::5 x(w7 w3))
}

::std::numeric::N64::to_string::to_string::5 { x(_ x(w1 w1)) }

::std::numeric::N64::to_string::to_string::6 {
  x(w17 x(w16 w20))
  ::std::numeric::N64::div_rem_n32 = fn(w17 fn(10 w1))
  tup(w2 w3) = w1
  48 = @add(w3 w6)
  ::std::data::List::concat = fn(tup(1 tup(tup(w6 w18) w18)) fn(w16 w11))
  ::std::numeric::N64::to_string::to_string::4 = x(w2 x(w11 w20))
}

::day_11::blink {
  fn(ref(w1 w1) fn(w3 w14))
  ::std::data::Map::into_iter = fn(w3 w8)
  ::day_11::blink::2 = x(x(::std::data::Map::empty w14) w8)
}

::day_11::blink::1 {
  x(x(w18 w5) w3)
  w3 = fn(w0 fn(w1 _))
  ::std::data::Map::get_or_insert::1 = fn(ref(w18 w5) fn(w0 fn(0 w8)))
  ref(w10 w15) = w8
  ::std::numeric::N64::add = fn(w10 fn(w1 w14))
  w15 = w14
}

::day_11::blink::2 {
  x(w7 w5)
  ::std::data::Map::IntoIter::next = fn(ref(w5 w1) w3)
  w3 = enum(::day_11::blink::5 enum(::day_11::blink::6 x(w7 w1)))
}

::day_11::blink::5 {
  enum(w0 x(x(w8 w19) w6))
  w0 = tup(dup211(w10 w14) w3)
  ::std::numeric::N64::eq = fn(w10 fn(0 w11))
  w11 = ?(::day_11::blink::9 ::day_11::blink::8 x(x(w8 w16) x(w14 x(w3 _))))
  ::day_11::blink::2 = x(x(w16 w19) w6)
}

::day_11::blink::6 { x(x(w2 w2) _) }

::day_11::blink::8 {
  x(w7 x(_ x(w4 _)))
  ::day_11::blink::1 = x(w7 w8)
  w8 = fn(::std::numeric::N64::one fn(w4 _))
}

::day_11::blink::9 {
  x(w9 x(dup225(w0 w15) x(w6 w12)))
  ::std::numeric::N64::log_n32 = fn(w0 fn(10 w1))
  w1 = @add(1 w2)
  dup227(w10 w13) = w2
  w10 = @rem(2 w11)
  w11 = ?(::day_11::blink::12 ::day_11::blink::11 x(w9 x(w15 x(w6 x(w13 w12)))))
}

::day_11::blink::11 {
  x(w11 x(w9 x(w8 _)))
  ::day_11::blink::1 = x(w11 w12)
  ::std::numeric::N64::from_n32 = fn(2024 w2)
  ::std::numeric::N64::mul = fn(w9 fn(w2 w3))
  w12 = fn(w3 fn(w8 _))
}

::day_11::blink::12 {
  x(x(w24 w30) x(w22 x(dup240(w12 w17) x(w20 _))))
  w20 = @div(2 w1)
  ::std::numeric::N32::pow = fn(10 fn(w1 w2))
  ::std::numeric::N64::div_rem_n32 = fn(w22 fn(w2 w6))
  tup(w7 w8) = w6
  ::day_11::blink::1 = x(x(w24 w27) w25)
  w25 = fn(w7 fn(w12 _))
  ::day_11::blink::1 = x(x(w27 w30) w28)
  ::std::numeric::N64::from_n32 = fn(w8 w16)
  w28 = fn(w16 fn(w17 _))
}

::std::data::Map::get_or_insert::1 {
  fn(w1 fn(w3 fn(w4 w22)))
  ::std::data::Map::insert::1 = fn(w1 fn(w3 fn(w12 w13)))
  ::std::logical::Option::unwrap_or = fn(w13 fn(w4 w17))
  w22 = ref(w17 w20)
  w12 = w20
}

::day_11::count {
  fn(w1 w15)
  ::std::data::Map::iter = fn(w1 w9)
  ::day_11::count::1 = x(x(0 w15) w9)
}

::day_11::count::1 {
  x(w7 w5)
  ::std::data::Map::Iter::next::1 = fn(ref(w5 w1) w3)
  w3 = enum(::day_11::count::4 enum(::day_11::count::5 x(w7 w1)))
}

::day_11::count::4 {
  enum(w0 x(x(w15 w22) w13))
  w0 = ref(w2 w5)
  w2 = tup(w7 dup275(w11 w17))
  w5 = tup(w7 w11)
  ::std::numeric::N64::add = fn(w15 fn(w17 w18))
  ::day_11::count::1 = x(x(w18 w22) w13)
}

::day_11::count::5 { x(x(w2 w2) _) }

::std::data::Map::Iter::next::1 {
  fn(ref(tup(w1 w3) tup(w24 w18)) w22)
  ::std::data::Map::Iter::next::1::1 = x(x(w1 w16) x(x(w3 w14) _))
  ::std::data::List::pop_front = fn(ref(w14 w18) w20)
  w20 = enum(::std::data::Map::Iter::next::1::8 enum(::std::data::Map::Iter::next::1::9 x(x(w16 w24) w22)))
}

::std::data::Map::Iter::next::1::1 {
  x(x(w41 w49) x(w39 w43))
  ref(tup(dup300(w2 w42) w5) tup(w2 w45)) = w41
  w42 = ?(::std::data::Map::Iter::next::1::4 ::std::data::Map::Iter::next::1::3 x(x(_ w49) x(w39 x(x(w5 w45) w43))))
}

::std::data::Map::Iter::next::1::3 {
  x(x(_ w48) x(x(w4 w46) x(x(w2 w18) w44)))
  ref(tup(w21 w23) tup(w41 w33)) = ref(w2 w18)
  ::std::data::List::push_front = fn(ref(w4 w30) fn(ref(w23 w33) _))
  ::std::data::Map::Iter::next::1::1 = x(x(ref(w21 w41) w48) x(x(w30 w46) w44))
}

::std::data::Map::Iter::next::1::4 { x(x(w6 w6) x(x(w4 w4) x(x(w2 w2) _))) }

::std::data::Map::Iter::next::1::8 {
  enum(w0 x(x(_ w16) w18))
  ref(tup(w7 w10) tup(w8 w11)) = w0
  w16 = ref(w10 w11)
  w18 = enum(enum(ref(w7 w8) w19) enum(_ w19))
}

::std::data::Map::Iter::next::1::9 { x(x(w2 w2) ::std::logical::Option::None) }

::std::data::List::pop_front {
  fn(ref(tup(dup422(w12 w16) tup(w3 w4)) tup(w17 tup(w15 w4))) w13)
  w12 = ?(::std::data::List::pop_front::3 ::std::data::List::pop_front::2 x(x(w16 w17) x(x(w3 w15) w13)))
}

::std::data::List::pop_front::2 {
  x(x(w14 w1) x(x(w12 w7) w9))
  w14 = @sub(1 w1)
  tup(w3 w4) = w12
  w7 = w4
  w9 = enum(enum(w3 w15) enum(_ w15))
}

::std::data::List::pop_front::3 { x(x(w4 w4) x(x(w2 w2) ::std::logical::Option::None)) }

::std::data::List::concat {
  fn(w0 fn(w1 w22))
  tup(w5 tup(w6 w15)) = w0
  tup(w10 tup(w11 w21)) = w1
  w15 = w11
  w5 = @add(w10 w18)
  w22 = tup(w18 tup(w6 w21))
}

::std::data::List::push_front {
  fn(ref(w1 w10) fn(w3 _))
  ::std::data::List::concat = fn(tup(1 tup(tup(w3 w12) w12)) fn(w1 w9))
  w10 = w9
}

::std::data::List::iter {
  fn(ref(tup(dup570(w0 w10) tup(w3 w4)) tup(w0 tup(w12 w4))) w14)
  w14 = tup(w10 ref(w3 w12))
}

::std::data::List::Iter::next {
  fn(ref(tup(dup576(w11 w15) w3) tup(w16 w14)) w12)
  w11 = ?(::std::data::List::Iter::next::3 ::std::data::List::Iter::next::2 x(x(w15 w16) x(x(w3 w14) w12)))
}

::std::data::List::Iter::next::2 {
  x(x(w20 w1) x(x(w18 w13) w15))
  w20 = @sub(1 w1)
  ref(tup(w4 w7) tup(w5 w8)) = w18
  w13 = ref(w7 w8)
  w15 = enum(enum(ref(w4 w5) w21) enum(_ w21))
}

::std::data::List::Iter::next::3 {
  x(x(w8 w8) x(x(w6 _) ::std::logical::Option::None))
  ref(w2 w2) = w6
}

::std::data::List::Iter::drop {
  fn(ref(w1 _) _)
  tup(_ ref(w7 w7)) = w1
}

::std::data::Map::empty { tup(0 _) }

::std::data::Map::new {
  fn(w0 fn(w1 fn(w2 w19)))
  ::std::data::Map::len = fn(ref(w0 w6) w8)
  ::std::data::Map::len = fn(ref(w2 w10) w12)
  w8 = @add(w12 w13)
  w13 = @add(1 w14)
  w19 = tup(w14 tup(w6 tup(w1 w10)))
}

::std::data::Map::len { fn(ref(tup(dup1052(w0 w8) w2) tup(w0 w2)) w8) }

::std::data::Map::iter {
  fn(w1 w9)
  w9 = tup(w1 tup(0 tup(w11 w11)))
}

::std::data::Map::into_iter {
  fn(w0 w5)
  w5 = tup(w0 tup(0 tup(w7 w7)))
}

::std::data::Map::IntoIter::next {
  fn(ref(tup(w1 w3) tup(w24 w18)) w22)
  ::std::data::Map::IntoIter::next::1 = x(x(w1 w16) x(x(w3 w14) _))
  ::std::data::List::pop_front = fn(ref(w14 w18) w20)
  w20 = enum(::std::data::Map::IntoIter::next::8 enum(::std::data::Map::IntoIter::next::9 x(x(w16 w24) w22)))
}

::std::data::Map::IntoIter::next::1 {
  x(x(w24 w31) x(w22 w26))
  tup(w2 w3) = w24
  w2 = ?(::std::data::Map::IntoIter::next::4 ::std::data::Map::IntoIter::next::3 x(x(_ w31) x(w22 x(w3 w26))))
}

::std::data::Map::IntoIter::next::3 {
  x(x(_ w30) x(x(w3 w28) x(w1 w26)))
  tup(w13 w14) = w1
  ::std::data::List::push_front = fn(ref(w3 w18) fn(w14 _))
  ::std::data::Map::IntoIter::next::1 = x(x(w13 w30) x(x(w18 w28) w26))
}

::std::data::Map::IntoIter::next::4 { x(x(w5 w5) x(x(w3 w3) _)) }

::std::data::Map::IntoIter::next::8 {
  enum(w0 x(x(_ w10) w12))
  w0 = tup(w2 w3)
  w10 = w3
  w12 = enum(enum(w2 w13) enum(_ w13))
}

::std::data::Map::IntoIter::next::9 { x(x(w2 w2) ::std::logical::Option::None) }

::std::data::Map::balance_left {
  fn(ref(w1 w11) _)
  tup(w6 tup(w7 w8)) = w1
  ::std::data::Map::is_balanced = fn(ref(w6 w14) fn(ref(w8 w17) w19))
  w19 = ?(::std::data::Map::balance_left::3 ::std::data::Map::balance_left::2 x(w14 x(w7 x(w17 w20))))
  w11 = w20
}

::std::data::Map::balance_left::2 {
  x(w7 x(w6 x(w5 w3)))
  w3 = tup(w7 tup(w6 w5))
}

::std::data::Map::balance_left::3 {
  x(w10 x(w9 x(w8 w18)))
  tup(_ tup(w1 tup(w2 w3))) = w8
  ::std::data::Map::is_single = fn(ref(w1 w12) fn(ref(w3 w15) w17))
  w17 = ?(::std::data::Map::balance_left::6 ::std::data::Map::balance_left::5 x(w10 x(w9 x(w12 x(w2 x(w15 w18))))))
}

::std::data::Map::balance_left::5 {
  x(w12 x(w11 x(w10 x(w9 x(w8 w6)))))
  ::std::data::Map::new = fn(w12 fn(w11 fn(w10 w3)))
  w6 = tup(w3 tup(w9 w8))
}

::std::data::Map::balance_left::6 {
  x(w21 x(w20 x(w19 x(w18 x(w17 w15)))))
  tup(_ tup(w1 tup(w2 w3))) = w19
  ::std::data::Map::new = fn(w21 fn(w20 fn(w1 w9)))
  ::std::data::Map::new = fn(w3 fn(w18 fn(w17 w14)))
  w15 = tup(w9 tup(w2 w14))
}

::std::data::Map::balance_right {
  fn(ref(w1 w11) _)
  tup(w6 tup(w7 w8)) = w1
  ::std::data::Map::is_balanced = fn(ref(w8 w14) fn(ref(w6 w17) w19))
  w19 = ?(::std::data::Map::balance_right::3 ::std::data::Map::balance_right::2 x(w17 x(w7 x(w14 w20))))
  w11 = w20
}

::std::data::Map::balance_right::2 {
  x(w7 x(w6 x(w5 w3)))
  w3 = tup(w7 tup(w6 w5))
}

::std::data::Map::balance_right::3 {
  x(w10 x(w9 x(w8 w18)))
  tup(_ tup(w1 tup(w2 w3))) = w10
  ::std::data::Map::is_single = fn(ref(w3 w12) fn(ref(w1 w15) w17))
  w17 = ?(::std::data::Map::balance_right::6 ::std::data::Map::balance_right::5 x(w9 x(w8 x(w15 x(w2 x(w12 w18))))))
}

::std::data::Map::balance_right::5 {
  x(w12 x(w11 x(w10 x(w9 x(w8 w6)))))
  ::std::data::Map::new = fn(w8 fn(w12 fn(w11 w5)))
  w6 = tup(w10 tup(w9 w5))
}

::std::data::Map::balance_right::6 {
  x(w21 x(w20 x(w19 x(w18 x(w17 w15)))))
  tup(_ tup(w1 tup(w2 w3))) = w17
  ::std::data::Map::new = fn(w19 fn(w18 fn(w1 w9)))
  ::std::data::Map::new = fn(w3 fn(w21 fn(w20 w14)))
  w15 = tup(w9 tup(w2 w14))
}

::std::data::Map::is_balanced {
  fn(ref(tup(dup1324(w0 w14) w2) tup(w0 w2)) fn(ref(tup(dup1325(w6 w17) w8) tup(w6 w8)) w18))
  3 = @mul(w14 w15)
  w15 = @add(2 w16)
  w16 = @le$(w17 w18)
}

::std::data::Map::is_single {
  fn(ref(tup(dup1328(w0 w14) w2) tup(w0 w2)) fn(ref(tup(dup1329(w6 w15) w8) tup(w6 w8)) w17))
  2 = @mul(w15 w16)
  w14 = @le(w16 w17)
}

::std::data::Map::size {
  fn(ref(tup(tup(dup1332(w0 w16) w2) tup(w5 tup(dup1333(w6 w17) w8))) tup(tup(w0 w2) tup(w5 tup(w6 w8)))) w19)
  w16 = @add(w17 w18)
  w18 = @add(1 w19)
}

::std::logical::Option::unwrap_or {
  fn(w0 fn(w1 w8))
  w0 = enum(::std::logical::Option::unwrap_or::4 enum(::std::logical::Option::unwrap_or::5 x(w1 w8)))
}

::std::logical::Option::unwrap_or::4 { enum(w0 x(_ w0)) }

::std::logical::Option::unwrap_or::5 { x(w1 w1) }

::std::logical::Option::unwrap {
  fn(w0 w7)
  w0 = enum(::std::logical::Option::unwrap::3 enum(_ w7))
}

::std::logical::Option::unwrap::3 { enum(w0 w0) }

::std::numeric::N32::parse {
  fn(w0 w12)
  tup(dup1505(w11 w14) tup(w5 _)) = w0
  w11 = ?(::std::numeric::N32::parse::3 ::std::numeric::N32::parse::2 x(w14 x(w5 w12)))
}

::std::numeric::N32::parse::2 {
  x(w5 x(w4 w6))
  ::std::numeric::N32::parse::4 = x(w5 x(w4 x(0 w6)))
}

::std::numeric::N32::parse::3 {
  x(_ x(_ w4))
  ::std::numeric::N32::parse::10 = x(w4 ::std::logical::Option::None)
}

::std::numeric::N32::parse::4 {
  x(dup1515(w0 w8) w3)
  w0 = ?(::std::numeric::N32::parse::6 ::std::numeric::N32::parse::5 x(w8 w3))
}

::std::numeric::N32::parse::5 {
  x(w18 x(w17 x(w16 w25)))
  tup(dup1524(w19 w26) w2) = w17
  w19 = dup1519(w20 w21)
  48 = @le(w20 w22)
  w21 = @le(57 w23)
  w22 = @n32_and(w23 w24)
  w24 = ?(::std::numeric::N32::parse::9 ::std::numeric::N32::parse::8 x(w18 x(w2 x(w16 x(w26 w25)))))
}

::std::numeric::N32::parse::6 {
  x(_ x(_ x(w1 w9)))
  ::std::numeric::N32::parse::10 = x(w9 enum(enum(w1 w7) enum(_ w7)))
}

::std::numeric::N32::parse::8 {
  x(w4 x(w3 x(w2 x(w1 w20))))
  w2 = @mul(10 w13)
  w1 = @sub(48 w15)
  w13 = @add(w15 w17)
  w4 = @sub(1 w19)
  ::std::numeric::N32::parse::4 = x(w19 x(w3 x(w17 w20)))
}

::std::numeric::N32::parse::9 { x(_ x(_ x(_ x(_ ::std::logical::Option::None)))) }

::std::numeric::N32::parse::10 { x(w10 w10) }

::std::numeric::N32::pow {
  fn(w0 fn(w1 w8))
  ::std::numeric::N32::pow::1 = x(w0 x(w1 x(1 w8)))
}

::std::numeric::N32::pow::1 {
  x(w4 x(dup1622(w0 w7) w2))
  w0 = ?(::std::numeric::N32::pow::3 ::std::numeric::N32::pow::2 x(w4 x(w7 w2)))
}

::std::numeric::N32::pow::2 {
  x(dup1625(w15 dup1625(w1 w2)) x(dup1627(w10 w4) x(w7 w17)))
  w10 = @rem(2 w11)
  w11 = ?(::std::numeric::N32::pow::6 ::std::numeric::N32::pow::5 x(w15 x(x(w7 w14) _)))
  w2 = @mul(w1 w3)
  w4 = @div(2 w5)
  ::std::numeric::N32::pow::1 = x(w3 x(w5 x(w14 w17)))
}

::std::numeric::N32::pow::3 { x(_ x(_ x(w1 w1))) }

::std::numeric::N32::pow::5 {
  x(w6 x(x(w5 w2) _))
  w5 = @mul(w6 w2)
}

::std::numeric::N32::pow::6 { x(_ x(x(w2 w2) _)) }

::std::numeric::N64::one { tup(1 0) }

::std::numeric::N64::from_n32 {
  fn(w0 w4)
  w4 = tup(w0 0)
}

::std::numeric::N64::div_rem_n32 {
  fn(tup(w0 dup1701(w6 w11)) fn(dup1704(w7 dup1704(w10 dup1704(w30 dup1704(w35 dup1704(w40 dup1704(w16 w20)))))) w27))
  w6 = @div(w7 w8)
  w11 = @rem(w10 dup1702(w29 w36))
  w29 = @lt$(w30 w31)
  w31 = ?(::std::numeric::N64::div_rem_n32::3 ::std::numeric::N64::div_rem_n32::2 x(x(w36 w37) x(w35 x(x(w8 w34) _))))
  ::std::numeric::N64::div_rem_n32::4 = x(x(w0 dup1700(w15 w21)) x(w37 x(w40 x(0 w39))))
  w15 = @div(w16 w17)
  w39 = @add(w17 w19)
  w21 = @rem(w20 w22)
  w27 = tup(tup(w19 w34) w22)
}

::std::numeric::N64::div_rem_n32::2 {
  x(x(dup1714(w0 w5) w6) x(dup1715(w1 w4) x(x(_ w3) _)))
  w0 = @div(w1 w2)
  w3 = w2
  w5 = @rem(w4 w6)
}

::std::numeric::N64::div_rem_n32::3 { x(x(w5 w5) x(_ x(x(w2 w2) _))) }

::std::numeric::N64::div_rem_n32::4 {
  x(w6 x(dup1722(w0 w10) w3))
  w0 = ?(::std::numeric::N64::div_rem_n32::6 ::std::numeric::N64::div_rem_n32::5 x(w6 x(w10 w3)))
}

::std::numeric::N64::div_rem_n32::5 {
  x(x(w27 w33) x(dup1729(w2 w9) x(dup1731(w0 dup1731(w12 w30)) x(w23 w29))))
  4294967295 = @div(w0 w1)
  w1 = @mul(w2 w3)
  dup1735(w5 w11) = w3
  w23 = @add(w5 w7)
  ::std::numeric::N64::mul_n32_n32 = fn(w11 fn(w12 w13))
  ::std::numeric::N64::sub = fn(tup(w27 w9) fn(w13 w14))
  tup(w15 w16) = w14
  ::std::numeric::N64::div_rem_n32::4 = x(x(w15 w33) x(w16 x(w30 x(w7 w29))))
}

::std::numeric::N64::div_rem_n32::6 { x(x(w5 w5) x(_ x(_ x(w1 w1)))) }

::std::numeric::N64::eq {
  fn(tup(w0 w1) fn(tup(w3 w4) w13))
  w0 = @eq(w3 w12)
  w12 = ?(::std::numeric::N64::eq::3 ::std::numeric::N64::eq::2 x(w1 x(w4 w13)))
}

::std::numeric::N64::eq::2 {
  x(w5 x(w4 w6))
  w5 = @eq(w4 w2)
  w2 = ?(::std::numeric::N64::eq::5 1 w6)
}

::std::numeric::N64::eq::3 {
  x(_ x(_ w3))
  0 = w3
}

::std::numeric::N64::eq::5 {
  r
  0 = r
}

::std::numeric::N64::le {
  fn(tup(w0 dup1820(w10 w16)) fn(tup(w3 dup1822(w11 w14)) w13))
  w10 = @lt(w11 w12)
  w12 = ?(::std::numeric::N64::le::3 ::std::numeric::N64::le::2 x(w0 x(w16 x(w3 x(w14 w13)))))
}

::std::numeric::N64::le::2 {
  x(_ x(_ x(_ x(_ w5))))
  1 = w5
}

::std::numeric::N64::le::3 {
  x(w7 x(w6 x(w5 x(w4 w8))))
  w6 = @eq(w4 w2)
  w2 = ?(::std::numeric::N64::le::5 ::std::numeric::N64::le::4 x(w7 x(w5 w8)))
}

::std::numeric::N64::le::4 {
  x(w5 x(w4 w6))
  w5 = @le(w4 w2)
  w2 = ?(::std::numeric::N64::le::7 ::std::numeric::N64::le::6 w6)
}

::std::numeric::N64::le::5 {
  x(_ x(_ w3))
  0 = w3
}

::std::numeric::N64::le::6 {
  r
  1 = r
}

::std::numeric::N64::le::7 {
  r
  0 = r
}

::std::numeric::N64::log_n32 {
  fn(w0 fn(w1 w8))
  ::std::numeric::N64::log_n32::1 = x(w0 x(w1 x(0 w8)))
}

::std::numeric::N64::log_n32::1 {
  x(dup1967(w2 w11) x(dup1968(w0 w10) w5))
  ::std::numeric::N64::from_n32 = fn(w0 w1)
  ::std::numeric::N64::le = fn(w1 fn(w2 w3))
  w3 = ?(::std::numeric::N64::log_n32::3 ::std::numeric::N64::log_n32::2 x(w11 x(w10 w5)))
}

::std::numeric::N64::log_n32::2 {
  x(w12 x(dup1973(w3 w15) x(w10 w14)))
  w10 = @add(1 w1)
  ::std::numeric::N64::div_rem_n32 = fn(w12 fn(w3 w4))
  tup(w5 _) = w4
  ::std::numeric::N64::log_n32::1 = x(w5 x(w15 x(w1 w14)))
}

::std::numeric::N64::log_n32::3 { x(_ x(_ x(w1 w1))) }

::std::unicode::String::len { fn(ref(tup(dup2055(w0 w13) w2) tup(w0 w2)) w13) }

::std::unicode::String::split {
  fn(w0 fn(w1 w9))
  ::std::unicode::String::split::1 = x(w0 x(w1 x(tup(0 tup(w8 w8)) w9)))
}

::std::unicode::String::split::1 {
  x(w14 x(dup2064(w1 w20) x(w12 w18)))
  ::std::unicode::String::split_once = fn(w14 fn(w1 w2))
  tup(w3 w4) = w2
  ::std::data::List::concat = fn(w12 fn(tup(1 tup(tup(w3 w15) w15)) w9))
  w4 = enum(::std::unicode::String::split::5 enum(::std::unicode::String::split::6 x(w20 x(w9 w18))))
}

::std::unicode::String::split::5 {
  enum(w0 w4)
  ::std::unicode::String::split::1 = x(w0 w4)
}

::std::unicode::String::split::6 { x(_ x(w1 w1)) }

::std::unicode::String::split_once {
  fn(w0 fn(w1 w16))
  ::std::unicode::String::split_once::1 = x(w1 x(tup(0 tup(w15 w15)) x(w0 w16)))
}

::std::unicode::String::split_once::1 {
  x(w12 x(w11 x(w10 w13)))
  ::std::unicode::String::len = fn(ref(w10 w1) w3)
  ::std::unicode::String::len = fn(ref(w12 w5) w7)
  w3 = @le$(w7 w8)
  w8 = ?(::std::unicode::String::split_once::3 ::std::unicode::String::split_once::2 x(w5 x(w11 x(w1 w13))))
}

::std::unicode::String::split_once::2 {
  x(w27 x(w26 x(w25 w50)))
  ::std::data::List::iter = fn(ref(w27 w2) w5)
  ::std::data::List::iter = fn(ref(w25 w9) w12)
  ::std::unicode::String::split_once::5 = x(w2 x(w26 x(w9 x(w5 x(w12 w50)))))
}

::std::unicode::String::split_once::3 {
  x(_ w2)
  ::std::unicode::String::split_once::23 = w2
}

::std::unicode::String::split_once::5 {
  x(w10 x(w9 x(w8 x(w7 w6))))
  ::std::data::List::Iter::next = fn(ref(w7 w1) w3)
  w3 = enum(::std::unicode::String::split_once::8 enum(::std::unicode::String::split_once::9 x(w10 x(w9 x(w8 x(w1 w6))))))
}

::std::unicode::String::split_once::8 {
  enum(w0 x(w9 x(w8 x(w7 x(w6 x(w5 w15))))))
  w0 = ref(dup2178(w1 w16) w1)
  ::std::data::List::Iter::next = fn(ref(w5 w11) w13)
  w13 = enum(::std::unicode::String::split_once::12 enum(::std::unicode::String::split_once::13 x(w9 x(w8 x(w7 x(w6 x(w11 x(w16 w15))))))))
}

::std::unicode::String::split_once::9 {
  x(_ x(w4 x(w3 x(_ w1))))
  ::std::unicode::String::split_once::14 = x(w4 x(w3 w1))
}

::std::unicode::String::split_once::12 {
  enum(w0 x(w10 x(w9 x(w8 x(w7 x(w6 x(w5 w15)))))))
  w0 = ref(dup2192(w1 w13) w1)
  w5 = @ne(w13 w14)
  w14 = ?(::std::unicode::String::split_once::17 ::std::unicode::String::split_once::16 x(w10 x(w9 x(w8 x(w7 x(w6 w15))))))
}

::std::unicode::String::split_once::13 {
  x(_ x(w5 x(w4 x(_ x(w2 x(_ w7))))))
  ::std::unicode::String::split_once::14 = x(w5 x(w4 x(w2 w7)))
}

::std::unicode::String::split_once::14 {
  x(w3 x(w2 x(w1 w25)))
  tup(w6 ref(w8 _)) = w1
  tup(_ tup(_ w12)) = w2
  w25 = tup(w3 enum(enum(tup(w6 tup(w8 w12)) w26) enum(_ w26)))
}

::std::unicode::String::split_once::16 {
  x(w5 x(w4 x(w3 x(w2 x(w1 w37)))))
  ::std::data::List::Iter::drop = fn(ref(w2 _) _)
  ::std::data::List::Iter::drop = fn(ref(w1 _) _)
  ::std::data::List::pop_front = fn(ref(w3 w32) w35)
  w35 = enum(::std::unicode::String::split_once::21 enum(::std::unicode::String::split_once::22 x(w5 x(w4 x(w32 w37)))))
}

::std::unicode::String::split_once::17 {
  w5
  ::std::unicode::String::split_once::5 = w5
}

::std::unicode::String::split_once::21 {
  enum(w0 x(w5 x(w4 w3)))
  ::std::data::List::concat = fn(w4 fn(tup(1 tup(tup(w0 w12) w12)) w11))
  ::std::unicode::String::split_once::1 = x(w5 x(w11 w3))
}

::std::unicode::String::split_once::22 {
  x(_ w2)
  ::std::unicode::String::split_once::23 = w2
}

::std::unicode::String::split_once::23 {
  x(w14 x(w13 w11))
  ::std::data::List::concat = fn(w14 fn(w13 w10))
  w11 = tup(w10 ::std::logical::Option::None)
}

::std::IO::println {
  fn(ref(w1 w12) fn(w3 _))
  ::std::IO::print = fn(ref(w1 w7) fn(w3 _))
  ::std::IO::print_char = fn(ref(w7 w12) fn(10 _))
}

::std::IO::print {
  fn(ref(w1 w16) fn(w3 _))
  tup(w7 tup(w8 _)) = w3
  ::std::IO::print::1 = x(x(w1 w16) x(w7 w8))
}

::std::IO::print::1 {
  x(w4 x(dup2428(w0 w6) w1))
  w0 = ?(::std::IO::print::3 ::std::IO::print::2 x(w4 x(w6 w1)))
}

::std::IO::print::2 {
  x(x(w17 w21) x(w15 w14))
  w15 = @sub(1 w1)
  tup(w4 w5) = w14
  ::std::IO::print_char = fn(ref(w17 w10) fn(w4 _))
  ::std::IO::print::1 = x(x(w10 w21) x(w1 w5))
}

::std::IO::print::3 { x(x(w3 w3) _) }

::std::IO::read_line {
  fn(ref(w1 w17) w14)
  ::std::IO::read_byte = fn(ref(w1 w6) fn(0 w8))
  dup2471(w12 w15) = w8
  w12 = @ne(0 w13)
  w13 = ?(::std::IO::read_line::3 ::std::IO::read_line::2 x(x(w6 w17) x(w15 w14)))
}

::std::IO::read_line::2 {
  x(w5 x(dup2477(w6 w9) w1))
  w6 = @eq(10 w7)
  w7 = ?(::std::IO::read_line::6 ::std::IO::read_line::5 x(w5 x(w9 w8)))
  w1 = enum(enum(w8 w12) enum(_ w12))
}

::std::IO::read_line::3 { x(x(w3 w3) x(_ ::std::logical::Option::None)) }

::std::IO::read_line::5 {
  x(x(w4 w4) x(_ w0))
  w0 = tup(w5 tup(w6 w7))
  0 = w5
  w6 = w7
}

::std::IO::read_line::6 {
  x(w10 x(w8 w6))
  ::std::IO::read_line::7 = x(w10 x(x(tup(1 tup(tup(w8 w11) w11)) w14) _))
  w6 = w14
}

::std::IO::read_line::7 {
  x(x(w10 w18) w8)
  ::std::IO::read_byte = fn(ref(w10 w1) fn(10 w3))
  dup2494(w11 w16) = w3
  w11 = @ne(10 w12)
  w12 = ?(::std::IO::read_line::10 ::std::IO::read_line::9 x(x(w1 w18) x(w16 w8)))
}

::std::IO::read_line::9 {
  x(w9 x(w7 x(x(w6 w19) w17)))
  ::std::data::List::concat = fn(w6 fn(tup(1 tup(tup(w7 w10) w10)) w3))
  ::std::IO::read_line::7 = x(w9 x(x(w3 w19) w17))
}

::std::IO::read_line::10 { x(x(w5 w5) x(_ x(x(w2 w2) _))) }

