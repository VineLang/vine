
::std::logical::Option::None { enum(_ enum(n0 n0)) }

::std::ops::Ord::Lt { enum(n0 enum(_ enum(_ n0))) }

::std::ops::Ord::Eq { enum(_ enum(n0 enum(_ n0))) }

::std::ops::Ord::Gt { enum(_ enum(_ enum(n0 n0))) }

::std::IO::print_char { fn(ref(@io_print_char(n0 n1) n1) fn(n0 _)) }

::std::IO::read_byte { fn(ref(dup(n0 @io_read_byte(n1 dup(n2 @seq$(n0 n3)))) n3) fn(n1 n2)) }

::main { ::day_23::main }

::day_23::main {
  fn(ref(w1 w10) _)
  ::day_23::main::1 = x(x(w1 w24) x(::std::data::Map::empty dup7(w25 w61)))
  ::day_23::main::10 = x(w25 x(x(0 w46) x(0 w44)))
  ::std::numeric::N32::to_string::to_string = fn(w46 tup(@add(11 w48) tup(w49 w50)))
  ::std::IO::println = fn(ref(w24 w30) fn(tup(w48 tup(tup(84 tup(114 tup(105 tup(97 tup(110 tup(103 tup(108 tup(101 tup(115 tup(58 tup(32 w49))))))))))) w50)) _))
  ::std::numeric::N32::to_string::to_string = fn(w44 tup(@add(8 w53) tup(w54 w55)))
  ::std::IO::println = fn(ref(w30 w37) fn(tup(w53 tup(tup(80 tup(97 tup(114 tup(116 tup(32 tup(49 tup(58 tup(32 w54)))))))) w55)) _))
  ::day_23::main::47 = x(w61 x(tup(0 tup(w58 w58)) w60))
  97 = @add(w69 w70)
  97 = @add(w72 w73)
  ::std::data::List::map = fn(w60 fn(fn(dup15(@div(26 w69) @rem(26 w72)) tup(2 tup(tup(w70 tup(w73 w79)) w79))) w15))
  ::std::data::List::join = fn(w15 fn(tup(1 tup(tup(44 w82) w82)) w17))
  ::std::data::List::concat = fn(tup(8 tup(tup(80 tup(97 tup(114 tup(116 tup(32 tup(50 tup(58 tup(32 w64)))))))) w64)) fn(w17 w18))
  ::std::IO::println = fn(ref(w37 w10) fn(w18 _))
}

::day_23::main::1 {
  x(x(w8 w12) w6)
  ::std::IO::read_line = fn(ref(w8 w1) enum(::day_23::main::4 enum(::day_23::main::5 x(x(w1 w12) w6))))
}

::day_23::main::4 {
  enum(w0 x(w5 x(w3 w65)))
  ::std::data::List::pop_front = fn(ref(w0 w11) w13)
  ::std::logical::Option::unwrap = fn(w13 @sub(97 @mul(26 @add(w22 dup40(@lt$(w57 ?(::day_23::main::8 ::day_23::main::7 x(x(w62 w63) x(x(w60 w61) _)))) w62)))))
  ::std::data::List::pop_front = fn(ref(w11 w18) w20)
  ::std::logical::Option::unwrap = fn(w20 @sub(97 w22))
  ::std::data::List::pop_front = fn(ref(w18 w26) _)
  ::std::data::List::pop_front = fn(ref(w26 w30) w32)
  ::std::logical::Option::unwrap = fn(w32 @sub(97 @mul(26 @add(w41 dup42(w57 w60)))))
  ::std::data::List::pop_front = fn(ref(w30 _) w39)
  ::std::logical::Option::unwrap = fn(w39 @sub(97 w41))
  ::std::data::Map::get_or_insert::1 = fn(ref(w3 w46) fn(w63 fn(::std::data::Map::empty w50)))
  ::std::data::Map::insert::1 = fn(w50 fn(w61 _))
  ::day_23::main::1 = x(w5 x(w46 w65))
}

::day_23::main::5 { x(x(w3 w3) x(w1 w1)) }

::day_23::main::7 {
  x(x(w10 w4) x(x(w8 w3) _))
  tup(w10 w8) = tup(w3 w4)
}

::day_23::main::8 { x(x(w4 w4) x(x(w2 w2) _)) }

::day_23::main::10 {
  x(w9 w8)
  ::std::data::Map::remove_min::1 = fn(ref(w9 w1) enum(::day_23::main::13 enum(::day_23::main::14 x(w1 w8))))
}

::day_23::main::13 {
  enum(tup(w2 w3) x(w10 x(x(w9 w22) x(w7 w20))))
  ::day_23::main::15 = x(x(w10 w18) x(x(w9 w16) x(x(w7 w14) x(w2 w3))))
  ::day_23::main::10 = x(w18 x(x(w16 w22) x(w14 w20)))
}

::day_23::main::14 { x(_ x(x(w3 w3) x(w1 w1))) }

::day_23::main::15 {
  x(w12 x(w10 x(w8 x(w6 w5))))
  ::std::data::Map::remove_min::1 = fn(ref(w5 w1) enum(::day_23::main::18 enum(::day_23::main::19 x(w12 x(w10 x(w8 x(w6 w1)))))))
}

::day_23::main::18 {
  enum(tup(w2 _) x(x(w12 w35) x(x(w10 w33) x(x(w8 w31) x(dup95(w21 w29) dup96(w15 w28))))))
  ::day_23::main::20 = x(x(w12 w27) x(x(w10 w25) x(x(w8 w23) x(w21 x(w2 x(tup(0 tup(w17 w17)) w15))))))
  ::day_23::main::15 = x(x(w27 w35) x(x(w25 w33) x(x(w23 w31) x(w29 w28))))
}

::day_23::main::19 { x(x(w7 w7) x(x(w5 w5) x(x(w3 w3) _))) }

::day_23::main::20 {
  x(w14 x(w12 x(w10 x(w8 x(w7 x(w6 w5))))))
  ::std::data::Map::remove_min::1 = fn(ref(w5 w1) enum(::day_23::main::23 enum(::day_23::main::24 x(w14 x(w12 x(w10 x(w8 x(w7 x(w6 w1)))))))))
}

::day_23::main::23 {
  enum(tup(w2 _) x(x(w14 w49) x(x(w12 w47) x(x(w10 w45) x(dup127(w35 w43) x(w7 x(w6 w5)))))))
  ::std::data::Map::get::1 = fn(ref(w14 w19) fn(ref(w7 dup129(w34 w42)) enum(::day_23::main::28 enum(::day_23::main::29 x(x(w2 w28) ?(::day_23::main::37 ::day_23::main::36 x(x(w12 w39) x(x(w10 w37) x(w35 x(w34 x(x(w6 w33) x(w28 _))))))))))))
  ::day_23::main::20 = x(x(w19 w49) x(x(w39 w47) x(x(w37 w45) x(w43 x(w42 x(w33 w5))))))
}

::day_23::main::24 { x(x(w9 w9) x(x(w7 w7) x(x(w5 w5) _))) }

::day_23::main::28 {
  enum(w2 x(x(w6 w11) w15))
  ::std::data::Map::get::1 = fn(w2 fn(ref(w6 w11) enum(::day_23::main::32 enum(0 w15))))
}

::day_23::main::29 { x(x(w2 w2) 0) }

::day_23::main::32 { enum(ref(w1 w1) 1) }

::day_23::main::36 {
  x(x(@add(1 w5) w5) x(w14 x(@div(26 @eq(19 ?(::day_23::main::40 ::day_23::main::39 x(w14 x(w11 x(w22 w21)))))) x(w11 x(x(w10 w3) x(dup166(w0 w22) w21))))))
  ::std::data::List::concat = fn(w10 fn(tup(1 tup(tup(w0 w17) w17)) w3))
}

::day_23::main::37 { x(x(w9 w9) x(x(w7 w7) x(_ x(_ x(x(w3 w3) _))))) }

::day_23::main::39 {
  x(w4 x(_ x(_ w5)))
  ::day_23::main::46 = x(w4 w5)
}

::day_23::main::40 { x(w7 x(@div(26 @eq(19 ?(::day_23::main::42 ::day_23::main::41 x(w7 w4)))) w4)) }

::day_23::main::41 {
  x(w3 x(_ w4))
  ::day_23::main::46 = x(w3 w4)
}

::day_23::main::42 { x(w6 x(@div(26 @eq(19 ?(::day_23::main::44 ::day_23::main::46 x(w6 w7)))) w7)) }

::day_23::main::44 { x(x(w2 w2) _) }

::day_23::main::46 { x(x(@add(1 w1) w1) _) }

::day_23::main::47 {
  x(w7 w6)
  ::std::data::Map::remove_min::1 = fn(ref(w7 w1) enum(::day_23::main::50 enum(::day_23::main::51 x(w1 w6))))
}

::day_23::main::50 {
  enum(tup(w2 w3) x(w8 x(w7 w29)))
  ::std::data::Map::to_list::1 = fn(w3 w18)
  ::std::data::List::map = fn(w18 fn(fn(tup(w23 _) w23) w20))
  ::day_23::main::extend_clique = fn(ref(w8 w10) fn(ref(w7 w13) fn(tup(1 tup(tup(w2 w22) w22)) fn(w20 _))))
  ::day_23::main::47 = x(w10 x(w13 w29))
}

::day_23::main::51 { x(_ x(w1 w1)) }

::std::data::Map::insert::1 { fn(ref(tup(dup217(?(::std::data::Map::insert::1::3 ::std::data::Map::insert::1::2 x(x(n0 n1) x(x(n2 n3) x(n4 x(n5 n6))))) n0) n2) tup(n1 n3)) fn(n4 fn(n5 n6))) }

::std::data::Map::insert::1::2 { x(n0 x(x(tup(n1 tup(tup(dup289(n2 dup289(n3 n4)) n5) n6)) n7) x(dup288(n8 dup288(@lt(n3 ?(::std::numeric::N32::ord::cmp::3 ::std::numeric::N32::ord::cmp::2 x(n9 x(n4 enum(::std::data::Map::insert::1::8 enum(::std::data::Map::insert::1::9 enum(::std::data::Map::insert::1::10 x(n0 x(x(tup(n10 tup(tup(n11 n12) n13)) n7) x(n8 x(n14 x(x(n1 n10) x(x(n2 n11) x(x(n5 n12) x(x(n6 n13) x(n15 _)))))))))))))))) n9)) x(n14 n15)))) }

::std::data::Map::insert::1::3 { x(x(_ 1) x(x(_ tup(::std::data::Map::empty tup(tup(n0 n1) ::std::data::Map::empty))) x(n0 x(n1 ::std::logical::Option::None)))) }

::std::data::Map::insert::1::8 { x(x(_ n0) x(x(tup(tup(dup1498(dup1491(n1 n2) @add(n3 @add(1 n0))) n4) tup(n5 tup(dup1499(dup1490(n6 @mul$(3 @add(2 @le$(n2 ?(::std::data::Map::balance_right::3 ::std::data::Map::balance_right::2 x(tup(n1 n4) x(n5 x(tup(n6 n7) n8)))))))) n3) n7))) n8) x(n9 x(n10 x(x(tup(dup217(?(::std::data::Map::insert::1::3 ::std::data::Map::insert::1::2 x(x(n11 n12) x(x(n13 n14) x(n9 x(n10 n15))))) n11) n13) tup(n12 n14)) x(x(n16 n16) x(x(n17 n17) x(x(n18 n18) x(n15 _))))))))) }

::std::data::Map::insert::1::9 { x(x(n0 n0) x(x(n1 n1) x(n2 x(n3 x(x(n4 n4) x(x(_ n2) x(x(n5 n3) x(x(n6 n6) x(enum(enum(n5 n7) enum(_ n7)) _))))))))) }

::std::data::Map::insert::1::10 { x(x(_ n0) x(x(tup(tup(dup1498(dup1490(n1 @mul$(3 @add(2 @le$(n2 ?(::std::data::Map::balance_left::3 ::std::data::Map::balance_left::2 x(tup(n1 n3) x(n4 x(tup(n5 n6) n7)))))))) @add(n8 @add(1 n0))) n3) tup(n4 tup(dup1499(dup1491(n5 n2) n8) n6))) n7) x(n9 x(n10 x(x(n11 n11) x(x(n12 n12) x(x(n13 n13) x(x(tup(dup217(?(::std::data::Map::insert::1::3 ::std::data::Map::insert::1::2 x(x(n14 n15) x(x(n16 n17) x(n9 x(n10 n18))))) n14) n16) tup(n15 n17)) x(n18 _))))))))) }

::std::numeric::N32::ord::cmp { fn(ref(dup288(n0 dup288(@lt(n1 ?(::std::numeric::N32::ord::cmp::3 ::std::numeric::N32::ord::cmp::2 x(n2 x(n3 n4)))) n2)) n0) fn(ref(dup289(n5 dup289(n1 n3)) n5) n4)) }

::std::numeric::N32::ord::cmp::2 { x(_ x(_ ::std::ops::Ord::Lt)) }

::std::numeric::N32::ord::cmp::3 { x(@lt$(n0 ?(::std::ops::Ord::Eq ::std::ops::Ord::Gt n1)) x(n0 n1)) }

::std::data::Map::get_or_insert::1 { fn(ref(tup(dup217(?(::std::data::Map::insert::1::3 ::std::data::Map::insert::1::2 x(x(n0 n1) x(x(n2 n3) x(n4 x(n5 enum(::std::logical::Option::unwrap_or::4 enum(::std::logical::Option::unwrap_or::5 x(n6 n7)))))))) n0) n2) tup(n1 n3)) fn(n4 fn(n6 ref(n7 n5)))) }

::std::data::Map::remove_min::1 { fn(ref(tup(dup1218(n0 ?(::std::data::Map::remove_min::1::3 ::std::data::Map::remove_min::1::2 x(x(tup(n0 n1) n2) n3))) n1) n2) n3) }

::std::data::Map::remove_min::1::2 { x(x(tup(@sub(1 n0) tup(tup(dup1218(n1 ?(::std::data::Map::_remove_min::3 ::std::data::Map::_remove_min::2 x(x(tup(n2 tup(n3 n4)) n5) x(x(tup(n1 n6) n2) x(x(n7 n3) x(x(n8 n4) n9)))))) n6) tup(n7 n8))) tup(n0 n5)) enum(enum(n9 n10) enum(_ n10))) }

::std::data::Map::remove_min::1::3 { x(x(n0 n0) ::std::logical::Option::None) }

::std::data::Map::get::1 { fn(ref(tup(dup321(n0 ?(::std::data::Map::get::1::3 ::std::data::Map::get::1::2 x(x(n1 n2) x(x(n3 n4) n5)))) n1) tup(n0 n2)) fn(ref(n3 n4) n5)) }

::std::data::Map::get::1::2 { x(x(tup(n0 tup(tup(dup289(n1 dup289(n2 n3)) n4) n5)) tup(n6 tup(tup(n1 n7) n8))) x(x(dup288(n9 dup288(@lt(n2 ?(::std::numeric::N32::ord::cmp::3 ::std::numeric::N32::ord::cmp::2 x(n10 x(n3 enum(::std::data::Map::get::1::8 enum(::std::data::Map::get::1::9 enum(::std::data::Map::get::1::10 x(x(n9 n11) x(x(n0 n6) x(x(n4 n7) x(x(n5 n8) n12))))))))))) n10)) n11) n12)) }

::std::data::Map::get::1::3 { x(x(n0 n0) x(x(n1 n1) ::std::logical::Option::None)) }

::std::data::Map::get::1::8 { x(x(n0 n1) x(x(tup(dup321(n2 ?(::std::data::Map::get::1::3 ::std::data::Map::get::1::2 x(x(n3 n4) x(x(n0 n1) n5)))) n3) tup(n2 n4)) x(x(n6 n6) x(x(n7 n7) n5)))) }

::std::data::Map::get::1::9 { x(x(n0 n0) x(x(n1 n1) x(x(n2 n3) x(x(n4 n4) enum(enum(ref(n2 n3) n5) enum(_ n5)))))) }

::std::data::Map::get::1::10 { x(x(n0 n1) x(x(n2 n2) x(x(n3 n3) x(x(tup(dup321(n4 ?(::std::data::Map::get::1::3 ::std::data::Map::get::1::2 x(x(n5 n6) x(x(n0 n1) n7)))) n5) tup(n4 n6)) n7)))) }

::std::numeric::N32::to_string::to_string { fn(dup368(?(::std::numeric::N32::to_string::to_string::3 ::std::numeric::N32::to_string::to_string::2 x(n0 n1)) n0) n1) }

::std::numeric::N32::to_string::to_string::2 { x(dup377(?(::std::numeric::N32::to_string::to_string::6 ::std::numeric::N32::to_string::to_string::5 x(n0 x(tup(0 tup(n1 n1)) n2))) n0) n2) }

::std::numeric::N32::to_string::to_string::3 { x(_ tup(1 tup(tup(48 n0) n0))) }

::std::numeric::N32::to_string::to_string::4 { x(dup377(?(::std::numeric::N32::to_string::to_string::6 ::std::numeric::N32::to_string::to_string::5 x(n0 n1)) n0) n1) }

::std::numeric::N32::to_string::to_string::5 { x(dup380(@rem(10 @add$(48 n0)) @div(10 dup377(?(::std::numeric::N32::to_string::to_string::6 ::std::numeric::N32::to_string::to_string::5 x(n1 x(tup(n2 tup(tup(n0 n3) n4)) n5))) n1))) x(tup(@add$(1 n2) tup(n3 n4)) n5)) }

::std::numeric::N32::to_string::to_string::6 { x(_ x(n0 n0)) }

::std::data::Map::to_list::1 { fn(tup(?(::std::data::Map::to_list::1::3 ::std::data::Map::to_list::1::2 x(n0 n1)) n0) n1) }

::std::data::Map::to_list::1::2 { x(tup(tup(?(::std::data::Map::to_list::1::3 ::std::data::Map::to_list::1::2 x(n0 tup(@add(1 @add(n1 n2)) tup(n3 tup(n4 n5))))) n0) tup(n4 tup(?(::std::data::Map::to_list::1::3 ::std::data::Map::to_list::1::2 x(n6 tup(n1 tup(n5 n7)))) n6))) tup(n2 tup(n3 n7))) }

::std::data::Map::to_list::1::3 { x(_ tup(0 tup(n0 n0))) }

::day_23::main::extend_clique {
  fn(ref(w1 w22) fn(ref(w4 w20) fn(w6 fn(w7 w16))))
  ::std::data::List::len = fn(ref(w7 w13) ?(::day_23::main::extend_clique::3 ::day_23::main::extend_clique::2 x(x(w1 w22) x(x(w4 w20) x(w6 x(w13 w16))))))
}

::day_23::main::extend_clique::2 {
  x(w7 x(x(w5 w26) x(w3 x(w2 _))))
  ::std::data::List::len = fn(ref(w3 dup414(w20 w24)) @le$(w15 ?(::day_23::main::extend_clique::6 ::day_23::main::extend_clique::5 x(x(w13 w22) x(w20 x(x(w2 w19) _))))))
  ::std::data::List::len = fn(ref(w5 w13) w15)
  ::day_23::main::extend_clique::7 = x(w7 x(x(w22 w26) x(w24 w19)))
}

::day_23::main::extend_clique::3 { x(x(w6 w6) x(x(w4 w4) _)) }

::day_23::main::extend_clique::5 {
  x(x(_ w9) x(w14 x(x(w13 w2) _)))
  ::std::data::List::get = fn(ref(w13 w2) fn(0 ref(dup421(w7 w6) w6)))
  ::std::data::List::concat = fn(w14 fn(tup(1 tup(tup(w7 w17) w17)) w9))
}

::day_23::main::extend_clique::6 { x(x(w5 w5) x(_ x(x(w2 w2) _))) }

::day_23::main::extend_clique::7 {
  x(w10 x(w8 x(w6 w5)))
  ::std::data::List::pop_front = fn(ref(w5 w1) enum(::day_23::main::extend_clique::10 enum(::day_23::main::extend_clique::11 x(w10 x(w8 x(w6 w1))))))
}

::day_23::main::extend_clique::10 {
  enum(w0 x(x(w7 w38) x(x(w5 w36) x(dup444(w18 w34) dup445(w10 w33)))))
  ::day_23::main::extend_clique::12 = x(x(w7 w31) x(x(w0 w29) x(x(tup(0 tup(w24 w24)) w27) w10)))
  ::std::data::List::concat = fn(w18 fn(tup(1 tup(tup(w29 w32) w32)) w21))
  ::day_23::main::extend_clique = fn(ref(w31 w13) fn(ref(w5 w16) fn(w21 fn(w27 _))))
  ::day_23::main::extend_clique::7 = x(x(w13 w38) x(x(w16 w36) x(w34 w33)))
}

::day_23::main::extend_clique::11 { x(x(w5 w5) x(x(w3 w3) _)) }

::day_23::main::extend_clique::12 {
  x(w11 x(w9 x(w7 w5)))
  ::std::data::List::pop_front = fn(ref(w5 w1) enum(::day_23::main::extend_clique::15 enum(::day_23::main::extend_clique::16 x(w11 x(w9 x(w7 w1))))))
}

::day_23::main::extend_clique::15 {
  enum(w0 x(x(w8 w28) x(x(w6 w26) x(x(w4 w24) w2))))
  ::std::data::Map::get::1 = fn(ref(w8 w11) fn(ref(w6 w14) enum(::day_23::main::extend_clique::20 enum(::day_23::main::extend_clique::21 x(x(w4 w21) x(w0 _))))))
  ::day_23::main::extend_clique::12 = x(x(w11 w28) x(x(w14 w26) x(x(w21 w24) w2)))
}

::day_23::main::extend_clique::16 { x(x(w6 w6) x(x(w4 w4) x(x(w2 w2) _))) }

::day_23::main::extend_clique::20 {
  enum(w2 x(w7 x(w5 w16)))
  ::std::data::Map::get::1 = fn(w2 fn(ref(w5 w12) enum(::day_23::main::extend_clique::24 enum(::day_23::main::extend_clique::25 x(w7 x(w12 w16))))))
}

::day_23::main::extend_clique::21 { x(x(w3 w3) _) }

::day_23::main::extend_clique::24 {
  enum(ref(w1 w1) x(x(w6 w10) x(w4 _)))
  ::std::data::List::concat = fn(w6 fn(tup(1 tup(tup(w4 w11) w11)) w10))
}

::day_23::main::extend_clique::25 { x(x(w3 w3) _) }

::std::data::List::len { fn(ref(tup(dup496(n0 n1) n2) tup(n1 n2)) n0) }

::std::data::List::get { fn(ref(tup(n0 tup(n1 n2)) tup(n0 tup(n3 n2))) fn(dup527(?(::std::data::List::get::3 ::std::data::List::get::2 x(x(ref(n1 n3) ref(tup(n4 n5) tup(n6 n5))) n7)) n7) ref(n4 n6))) }

::std::data::List::get::1 { x(n0 dup527(?(::std::data::List::get::3 ::std::data::List::get::2 x(n0 n1)) n1)) }

::std::data::List::get::2 { x(x(ref(tup(n0 n1) tup(n0 n2)) n3) @sub(1 dup527(?(::std::data::List::get::3 ::std::data::List::get::2 x(x(ref(n1 n2) n3) n4)) n4))) }

::std::data::List::get::3 { x(x(n0 n0) _) }

::std::data::List::map { fn(tup(dup559(n0 dup569(?(::std::data::List::map::3 ::std::data::List::map::2 x(n1 x(n2 x(n3 x(n4 n5))))) n1)) tup(n2 _)) fn(n3 tup(n0 tup(n4 n5)))) }

::std::data::List::map::1 { x(dup569(?(::std::data::List::map::3 ::std::data::List::map::2 x(n0 n1)) n0) n1) }

::std::data::List::map::2 { x(@sub(1 dup569(?(::std::data::List::map::3 ::std::data::List::map::2 x(n0 x(n1 x(n2 x(n3 n4))))) n0)) x(tup(n5 n1) x(dup578(fn(n5 n6) n2) x(tup(n6 n3) n4)))) }

::std::data::List::map::3 { x(_ x(_ x(_ x(n0 n0)))) }

::std::data::List::pop_front { fn(ref(tup(dup588(?(::std::data::List::pop_front::3 ::std::data::List::pop_front::2 x(x(n0 n1) x(x(n2 n3) n4))) n0) tup(n2 n5)) tup(n1 tup(n3 n5))) n4) }

::std::data::List::pop_front::2 { x(x(@sub(1 n0) n0) x(x(tup(n1 n2) n2) enum(enum(n1 n3) enum(_ n3)))) }

::std::data::List::pop_front::3 { x(x(n0 n0) x(x(n1 n1) ::std::logical::Option::None)) }

::std::data::List::concat { fn(tup(@add(n0 n1) tup(n2 n3)) fn(tup(n0 tup(n3 n4)) tup(n1 tup(n2 n4)))) }

::std::data::List::join { fn(tup(dup768(?(::std::data::List::IntoIter::next::3 ::std::data::List::IntoIter::next::2 x(x(n0 n1) x(x(n2 n3) enum(::std::data::List::join::4 enum(::std::data::List::join::5 x(n4 x(tup(n1 n3) n5))))))) n0) tup(n2 _)) fn(n4 n5)) }

::std::data::List::join::4 { enum(n0 x(n1 x(tup(dup768(?(::std::data::List::IntoIter::next::3 ::std::data::List::IntoIter::next::2 x(x(n2 n3) x(x(n4 n5) enum(::std::data::List::join::9 enum(::std::data::List::join::10 x(n1 x(tup(n3 n5) x(n0 n6)))))))) n2) n4) n6))) }

::std::data::List::join::5 { x(_ x(_ tup(0 tup(n0 n0)))) }

::std::data::List::join::6 { x(n0 x(tup(dup768(?(::std::data::List::IntoIter::next::3 ::std::data::List::IntoIter::next::2 x(x(n1 n2) x(x(n3 n4) enum(::std::data::List::join::9 enum(::std::data::List::join::10 x(n0 x(tup(n2 n4) n5))))))) n1) n3) n5)) }

::std::data::List::join::9 { enum(tup(n0 tup(n1 n2)) x(dup665(tup(@add(n0 n3) tup(n4 n1)) n5) x(tup(dup768(?(::std::data::List::IntoIter::next::3 ::std::data::List::IntoIter::next::2 x(x(n6 n7) x(x(n8 n9) enum(::std::data::List::join::9 enum(::std::data::List::join::10 x(n5 x(tup(n7 n9) x(tup(n10 tup(n11 n2)) n12)))))))) n6) n8) x(tup(@add(n3 n10) tup(n11 n4)) n12)))) }

::std::data::List::join::10 { x(_ x(_ x(n0 n0))) }

::std::data::List::into_iter { fn(tup(n0 tup(n1 _)) tup(n0 n1)) }

::std::data::List::IntoIter::next { fn(ref(tup(dup768(?(::std::data::List::IntoIter::next::3 ::std::data::List::IntoIter::next::2 x(x(n0 n1) x(x(n2 n3) n4))) n0) n2) tup(n1 n3)) n4) }

::std::data::List::IntoIter::next::2 { x(x(@sub(1 n0) n0) x(x(tup(n1 n2) n2) enum(enum(n1 n3) enum(_ n3)))) }

::std::data::List::IntoIter::next::3 { x(x(n0 n0) x(x(n1 n1) ::std::logical::Option::None)) }

::std::data::Map::empty { tup(0 _) }

::std::data::Map::new { fn(tup(dup1218(n0 @add(n1 @add(1 n2))) n3) fn(n4 fn(tup(dup1218(n5 n1) n6) tup(n2 tup(tup(n0 n3) tup(n4 tup(n5 n6))))))) }

::std::data::Map::len { fn(ref(tup(dup1218(n0 n1) n2) tup(n0 n2)) n1) }

::std::data::Map::_remove_min { fn(ref(tup(@sub(1 n0) tup(tup(dup1218(n1 ?(::std::data::Map::_remove_min::3 ::std::data::Map::_remove_min::2 x(x(tup(n2 tup(n3 n4)) n5) x(x(tup(n1 n6) n2) x(x(n7 n3) x(x(n8 n4) n9)))))) n6) tup(n7 n8))) tup(n0 n5)) n9) }

::std::data::Map::_remove_min::2 { x(x(tup(tup(dup1490(n0 @mul$(3 @add(2 @le$(n1 ?(::std::data::Map::balance_left::3 ::std::data::Map::balance_left::2 x(tup(n0 n2) x(n3 x(tup(n4 n5) n6)))))))) n2) tup(n3 tup(dup1491(n4 n1) n5))) n6) x(x(tup(@sub(1 n7) tup(tup(dup1218(n8 ?(::std::data::Map::_remove_min::3 ::std::data::Map::_remove_min::2 x(x(tup(n9 tup(n10 n11)) n12) x(x(tup(n8 n13) n9) x(x(n14 n10) x(x(n15 n11) n16)))))) n13) tup(n14 n15))) tup(n7 n12)) x(x(n17 n17) x(x(n18 n18) n16)))) }

::std::data::Map::_remove_min::3 { x(x(_ n0) x(x(n1 n1) x(x(n2 _) x(x(tup(_ n0) _) n2)))) }

::std::data::Map::balance_left { fn(ref(tup(tup(dup1490(n0 @mul$(3 @add(2 @le$(n1 ?(::std::data::Map::balance_left::3 ::std::data::Map::balance_left::2 x(tup(n0 n2) x(n3 x(tup(n4 n5) n6)))))))) n2) tup(n3 tup(dup1491(n4 n1) n5))) n6) _) }

::std::data::Map::balance_left::2 { x(n0 x(n1 x(n2 tup(n0 tup(n1 n2))))) }

::std::data::Map::balance_left::3 { x(n0 x(n1 x(tup(_ tup(tup(dup1494(n2 @le(n3 ?(::std::data::Map::balance_left::6 ::std::data::Map::balance_left::5 x(n0 x(n1 x(tup(n2 n4) x(n5 x(tup(n6 n7) n8)))))))) n4) tup(n5 tup(dup1495(n6 @mul$(2 n3)) n7)))) n8))) }

::std::data::Map::balance_left::5 { x(tup(dup1218(n0 @add(n1 @add(1 n2))) n3) x(n4 x(tup(dup1218(n5 n1) n6) x(n7 x(n8 tup(tup(n2 tup(tup(n0 n3) tup(n4 tup(n5 n6)))) tup(n7 n8))))))) }

::std::data::Map::balance_left::6 { x(tup(dup1218(n0 @add(n1 @add(1 n2))) n3) x(n4 x(tup(_ tup(tup(dup1218(n5 n1) n6) tup(n7 tup(dup1218(n8 @add(n9 @add(1 n10))) n11)))) x(n12 x(tup(dup1218(n13 n9) n14) tup(tup(n2 tup(tup(n0 n3) tup(n4 tup(n5 n6)))) tup(n7 tup(n10 tup(tup(n8 n11) tup(n12 tup(n13 n14))))))))))) }

::std::data::Map::balance_right { fn(ref(tup(tup(dup1491(n0 n1) n2) tup(n3 tup(dup1490(n4 @mul$(3 @add(2 @le$(n1 ?(::std::data::Map::balance_right::3 ::std::data::Map::balance_right::2 x(tup(n0 n2) x(n3 x(tup(n4 n5) n6)))))))) n5))) n6) _) }

::std::data::Map::balance_right::2 { x(n0 x(n1 x(n2 tup(n0 tup(n1 n2))))) }

::std::data::Map::balance_right::3 { x(tup(_ tup(tup(dup1495(n0 @mul$(2 n1)) n2) tup(n3 tup(dup1494(n4 @le(n1 ?(::std::data::Map::balance_right::6 ::std::data::Map::balance_right::5 x(n5 x(n6 x(tup(n0 n2) x(n3 x(tup(n4 n7) n8)))))))) n7)))) x(n5 x(n6 n8))) }

::std::data::Map::balance_right::5 { x(n0 x(tup(dup1218(n1 n2) n3) x(n4 x(n5 x(tup(dup1218(n6 @add(n2 @add(1 n7))) n8) tup(n4 tup(n5 tup(n7 tup(tup(n6 n8) tup(n0 tup(n1 n3))))))))))) }

::std::data::Map::balance_right::6 { x(n0 x(tup(dup1218(n1 n2) n3) x(tup(dup1218(n4 @add(n5 @add(1 n6))) n7) x(n8 x(tup(_ tup(tup(dup1218(n9 n5) n10) tup(n11 tup(dup1218(n12 @add(n2 @add(1 n13))) n14)))) tup(tup(n6 tup(tup(n4 n7) tup(n8 tup(n9 n10)))) tup(n11 tup(n13 tup(tup(n12 n14) tup(n0 tup(n1 n3))))))))))) }

::std::data::Map::is_balanced { fn(ref(tup(dup1490(n0 @mul$(3 @add(2 @le$(n1 n2)))) n3) tup(n0 n3)) fn(ref(tup(dup1491(n4 n1) n5) tup(n4 n5)) n2)) }

::std::data::Map::is_single { fn(ref(tup(dup1494(n0 @le(n1 n2)) n3) tup(n0 n3)) fn(ref(tup(dup1495(n4 @mul$(2 n1)) n5) tup(n4 n5)) n2)) }

::std::data::Map::size { fn(ref(tup(tup(dup1498(n0 @add(n1 @add(1 n2))) n3) tup(n4 tup(dup1499(n5 n1) n6))) tup(tup(n0 n3) tup(n4 tup(n5 n6)))) n2) }

::std::logical::Option::unwrap_or { fn(enum(::std::logical::Option::unwrap_or::4 enum(::std::logical::Option::unwrap_or::5 x(n0 n1))) fn(n0 n1)) }

::std::logical::Option::unwrap_or::4 { enum(n0 x(_ n0)) }

::std::logical::Option::unwrap_or::5 { x(n0 n0) }

::std::logical::Option::unwrap { fn(enum(::std::logical::Option::unwrap::3 enum(_ n0)) n0) }

::std::logical::Option::unwrap::3 { enum(n0 n0) }

::std::IO::println { fn(ref(n0 n1) fn(tup(dup2641(?(::std::IO::print::3 ::std::IO::print::2 x(x(n0 @io_print_char(10 n1)) x(n2 n3))) n2) tup(n3 _)) _)) }

::std::IO::print { fn(ref(n0 n1) fn(tup(dup2641(?(::std::IO::print::3 ::std::IO::print::2 x(x(n0 n1) x(n2 n3))) n2) tup(n3 _)) _)) }

::std::IO::print::1 { x(n0 x(dup2641(?(::std::IO::print::3 ::std::IO::print::2 x(n0 x(n1 n2))) n1) n2)) }

::std::IO::print::2 { x(x(@io_print_char(n0 n1) n2) x(@sub(1 dup2641(?(::std::IO::print::3 ::std::IO::print::2 x(x(n1 n2) x(n3 n4))) n3)) tup(n0 n4))) }

::std::IO::print::3 { x(x(n0 n0) _) }

::std::IO::read_line { fn(ref(dup(n0 @io_read_byte(0 dup(dup2684(@ne(0 ?(::std::IO::read_line::3 ::std::IO::read_line::2 x(x(n1 n2) x(n3 n4)))) n3) @seq$(n0 n1)))) n2) n4) }

::std::IO::read_line::2 { x(n0 x(dup2690(@eq(10 ?(::std::IO::read_line::6 ::std::IO::read_line::5 x(n0 x(n1 n2)))) n1) enum(enum(n2 n3) enum(_ n3)))) }

::std::IO::read_line::3 { x(x(n0 n0) x(_ ::std::logical::Option::None)) }

::std::IO::read_line::5 { x(x(n0 n0) x(_ tup(0 tup(n1 n1)))) }

::std::IO::read_line::6 { x(x(dup(n0 @io_read_byte(10 dup(dup2707(@ne(10 ?(::std::IO::read_line::10 ::std::IO::read_line::9 x(x(n1 n2) x(n3 x(x(tup(1 tup(tup(n4 n5) n5)) n6) _))))) n3) @seq$(n0 n1)))) n2) x(n4 n6)) }

::std::IO::read_line::7 { x(x(dup(n0 @io_read_byte(10 dup(dup2707(@ne(10 ?(::std::IO::read_line::10 ::std::IO::read_line::9 x(x(n1 n2) x(n3 n4)))) n3) @seq$(n0 n1)))) n2) n4) }

::std::IO::read_line::9 { x(x(dup(n0 @io_read_byte(10 dup(dup2707(@ne(10 ?(::std::IO::read_line::10 ::std::IO::read_line::9 x(x(n1 n2) x(n3 x(x(tup(n4 tup(n5 n6)) n7) n8))))) n3) @seq$(n0 n1)))) n2) x(n9 x(x(tup(@add(1 n4) tup(n5 tup(n9 n6))) n7) n8))) }

::std::IO::read_line::10 { x(x(n0 n0) x(_ x(x(n1 n1) _))) }

