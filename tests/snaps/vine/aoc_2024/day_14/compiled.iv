
::std::data::Array::Node::to_leaf { fn(x x) }

::std::data::Array::Node::as_leaf { fn(x x) }

::std::data::Array::Node::leaf { fn(x x) }

::std::logical::Option::None { enum(_ enum(r r)) }

::std::IO::print_char { fn(ref(@io_print_char(char io) io) fn(char _)) }

::std::IO::read_byte { fn(ref(dup(io0 @io_read_byte(default dup(byte @seq$(io0 io1)))) io1) fn(default byte)) }

::main { ::day_14::main }

::day_14::main {
  fn(ref(w1 w32) _)
  ::day_14::main::1 = x(x(w1 w43) x(tup(0 tup(w39 w39)) dup9(w11 w59)))
  ::std::data::List::into_iter = fn(w11 w12)
  ::day_14::main::13 = x(x(0 @mul(w50 @mul(w48 @mul(w46 w20)))) x(x(0 w50) x(x(0 w48) x(x(0 w46) w12))))
  ::std::numeric::N32::to_string::to_string = fn(w20 tup(@add(8 w53) tup(w54 w55)))
  ::std::IO::println = fn(ref(w43 w23) fn(tup(w53 tup(tup(80 tup(97 tup(114 tup(116 tup(32 tup(49 tup(58 tup(32 w54)))))))) w55)) _))
  ::day_14::main::33 = x(x(w23 w61) x(w59 0))
  ::std::numeric::N32::to_string::to_string = fn(0 tup(@add(8 w62) tup(w63 w64)))
  ::std::IO::println = fn(ref(w61 w32) fn(tup(w62 tup(tup(80 tup(97 tup(114 tup(116 tup(32 tup(50 tup(58 tup(32 w63)))))))) w64)) _))
}

::day_14::main::1 {
  x(x(w8 w12) w6)
  ::std::IO::read_line = fn(ref(w8 w1) enum(::day_14::main::4 enum(::day_14::main::5 x(x(w1 w12) w6))))
}

::day_14::main::4 {
  enum(w0 x(w5 w3))
  ::std::unicode::String::len = fn(ref(w0 w7) ?(::day_14::main::7 ::day_14::main::6 x(w5 x(w3 w7))))
}

::day_14::main::5 { x(x(w3 w3) x(w1 w1)) }

::day_14::main::6 {
  x(w58 x(x(w56 w74) w54))
  ::std::unicode::String::split_once = fn(w54 fn(tup(2 tup(tup(112 tup(61 w61)) w61)) tup(_ w3)))
  ::std::logical::Option::unwrap = fn(w3 w6)
  ::std::unicode::String::split_once = fn(w6 fn(tup(1 tup(tup(44 w64) w64)) tup(w9 w10)))
  ::std::logical::Option::unwrap = fn(w10 w13)
  ::std::unicode::String::split_once = fn(w13 fn(tup(3 tup(tup(32 tup(118 tup(61 w67))) w67)) tup(w16 w17)))
  ::std::logical::Option::unwrap = fn(w17 w20)
  ::std::unicode::String::split_once = fn(w20 fn(tup(1 tup(tup(44 w70) w70)) tup(w23 w24)))
  ::std::logical::Option::unwrap = fn(w24 w27)
  ::std::numeric::N32::parse = fn(w9 w30)
  ::std::logical::Option::unwrap = fn(w30 w31)
  ::std::numeric::N32::parse = fn(w16 w34)
  ::std::logical::Option::unwrap = fn(w34 w35)
  ::std::data::List::push_back = fn(ref(w56 w46) fn(tup(w31 tup(w35 tup(w39 w43))) _))
  ::day_14::main::1 = x(w58 x(w46 w74))
  ::day_14::main::9 = fn(w23 fn(11 w39))
  ::day_14::main::9 = fn(w27 fn(7 w43))
}

::day_14::main::7 { x(x(w4 w4) x(x(w2 w2) _)) }

::day_14::main::9 {
  fn(w0 fn(w1 w16))
  ::std::data::List::get = fn(ref(w0 w8) fn(0 ref(dup61(@eq(45 ?(::day_14::main::12 ::day_14::main::11 x(w8 x(w1 w16)))) w13) w13)))
}

::day_14::main::11 {
  x(w13 x(@sub(w9 w10) w10))
  ::std::data::List::pop_front = fn(ref(w13 w2) _)
  ::std::numeric::N32::parse = fn(w2 w8)
  ::std::logical::Option::unwrap = fn(w8 w9)
}

::day_14::main::12 {
  x(w5 x(_ w2))
  ::std::numeric::N32::parse = fn(w5 w1)
  ::std::logical::Option::unwrap = fn(w1 w2)
}

::day_14::main::13 {
  x(w13 x(w11 x(w9 x(w7 w5))))
  ::std::data::List::IntoIter::next = fn(ref(w5 w1) enum(::day_14::main::16 enum(::day_14::main::17 x(w13 x(w11 x(w9 x(w7 w1)))))))
}

::day_14::main::16 {
  enum(tup(@add(w21 @rem(11 dup102(@lt(w33 ?(::day_14::main::20 ::day_14::main::19 x(x(w18 w45) x(x(w16 w43) x(x(w14 w41) x(x(w12 w39) x(w37 x(w29 _)))))))) w37))) tup(@add(w27 @rem(7 w29)) tup(@mul(100 w21) @mul(100 w27)))) x(x(w18 w54) x(x(w16 w52) x(x(w14 w50) x(x(w12 w48) w10)))))
  11 = @div(2 w33)
  ::day_14::main::13 = x(x(w45 w54) x(x(w43 w52) x(x(w41 w50) x(x(w39 w48) w10))))
}

::day_14::main::17 { x(x(w8 w8) x(x(w6 w6) x(x(w4 w4) x(x(w2 w2) _)))) }

::day_14::main::19 {
  x(w11 x(w9 x(x(w7 w7) x(x(w5 w5) x(_ x(dup120(@lt(w13 ?(::day_14::main::23 ::day_14::main::22 x(w11 x(w9 x(w16 w15))))) w16) w15))))))
  7 = @div(2 w13)
}

::day_14::main::20 {
  x(x(w13 w13) x(x(w11 w11) x(w9 x(w7 x(@lt$(w1 ?(::day_14::main::27 ::day_14::main::26 x(w9 x(w7 w4)))) w4)))))
  11 = @div(2 w1)
}

::day_14::main::22 { x(x(@add(1 w1) w1) x(x(w5 w5) _)) }

::day_14::main::23 {
  x(x(w8 w8) x(w6 x(@lt$(w1 ?(::day_14::main::25 ::day_14::main::24 x(w6 w9))) w9)))
  7 = @div(2 w1)
}

::day_14::main::24 { x(x(@add(1 w1) w1) _) }

::day_14::main::25 { x(x(w2 w2) _) }

::day_14::main::26 {
  x(w6 x(w4 x(dup149(@lt(w8 ?(::day_14::main::30 ::day_14::main::29 x(w6 x(w4 x(w11 w10))))) w11) w10)))
  7 = @div(2 w8)
}

::day_14::main::27 { x(x(w5 w5) x(x(w3 w3) _)) }

::day_14::main::29 { x(x(@add(1 w1) w1) x(x(w5 w5) _)) }

::day_14::main::30 {
  x(x(w8 w8) x(w6 x(@lt$(w1 ?(::day_14::main::32 ::day_14::main::31 x(w6 w9))) w9)))
  7 = @div(2 w1)
}

::day_14::main::31 { x(x(@add(1 w1) w1) _) }

::day_14::main::32 { x(x(w2 w2) _) }

::day_14::main::33 {
  x(x(w8 w12) w6)
  ::std::IO::read_line = fn(ref(w8 w1) enum(::day_14::main::36 enum(::day_14::main::37 x(x(w1 w12) w6))))
}

::day_14::main::36 {
  enum(w0 x(x(w5 w48) x(dup178(w15 w46) w2)))
  ::std::numeric::N32::parse = fn(w0 enum(::day_14::main::41 enum(::day_14::main::42 x(x(w2 dup180(w41 dup180(w24 @add(1 w28)))) _))))
  ::std::IO::println = fn(ref(w5 w8) fn(tup(7 tup(tup(27 tup(91 tup(50 tup(74 tup(27 tup(91 tup(72 w37))))))) w37)) _))
  ::std::data::Array::new = fn(11 fn(46 w12))
  ::std::data::Array::new = fn(7 fn(w12 w13))
  ::std::data::List::into_iter = fn(w15 w16)
  ::day_14::main::43 = x(w41 x(x(w13 w40) w16))
  ::std::data::Array::to_list = fn(w40 w19)
  ::day_14::main::48 = x(x(w8 w44) w19)
  ::std::numeric::N32::to_string::to_string = fn(w24 w25)
  ::std::IO::println = fn(ref(w44 w22) fn(w25 _))
  ::day_14::main::33 = x(x(w22 w48) x(w46 w28))
}

::day_14::main::37 { x(x(w3 w3) _) }

::day_14::main::41 { enum(w0 x(x(_ w0) _)) }

::day_14::main::42 { x(x(w2 w2) _) }

::day_14::main::43 {
  x(w8 x(w7 w5))
  ::std::data::List::IntoIter::next = fn(ref(w5 w1) enum(::day_14::main::46 enum(::day_14::main::47 x(w8 x(w7 w1)))))
}

::day_14::main::46 {
  enum(tup(@add(w17 @rem(11 w19)) tup(@add(w24 @rem(7 w26)) tup(@mul(w16 w17) @mul(w23 w24)))) x(dup202(w16 dup202(w23 w43)) x(x(w12 w42) w10)))
  ::std::data::Array::get = fn(ref(w12 w29) fn(w26 w33))
  ::std::data::Array::get = fn(w33 fn(w19 ref(_ 35)))
  ::day_14::main::43 = x(w43 x(x(w29 w42) w10))
}

::day_14::main::47 { x(_ x(x(w2 w2) _)) }

::day_14::main::48 {
  x(w7 w5)
  ::std::data::List::pop_front = fn(ref(w5 w1) enum(::day_14::main::51 enum(::day_14::main::52 x(w7 w1))))
}

::day_14::main::51 {
  enum(w0 x(x(w4 w15) w2))
  ::std::data::Array::to_list = fn(w0 w9)
  ::std::IO::println = fn(ref(w4 w6) fn(w9 _))
  ::day_14::main::48 = x(x(w6 w15) w2)
}

::day_14::main::52 { x(x(w2 w2) _) }

::std::numeric::N32::to_string::to_string { fn(dup231(?(::std::numeric::N32::to_string::to_string::3 ::std::numeric::N32::to_string::to_string::2 x(w7 w6)) w7) w6) }

::std::numeric::N32::to_string::to_string::2 {
  x(w6 w9)
  ::std::numeric::N32::to_string::to_string::4 = x(w6 x(tup(0 tup(w7 w7)) w9))
}

::std::numeric::N32::to_string::to_string::3 { x(_ tup(1 tup(tup(48 w5) w5))) }

::std::numeric::N32::to_string::to_string::4 { x(dup240(?(::std::numeric::N32::to_string::to_string::6 ::std::numeric::N32::to_string::to_string::5 x(w6 w2)) w6) w2) }

::std::numeric::N32::to_string::to_string::5 {
  x(dup243(@rem(10 w1) @div(10 w8)) x(w11 w15))
  48 = @add(w1 w2)
  ::std::data::List::concat = fn(tup(1 tup(tup(w2 w13) w13)) fn(w11 w5))
  ::std::numeric::N32::to_string::to_string::4 = x(w8 x(w5 w15))
}

::std::numeric::N32::to_string::to_string::6 { x(_ x(w1 w1)) }

::std::data::List::get {
  fn(ref(tup(w1 tup(w3 w5)) tup(w1 tup(w4 w5))) fn(w9 ref(w14 w15)))
  ::std::data::List::get::1 = x(x(ref(w3 w4) ref(tup(w14 w16) tup(w15 w16))) w9)
}

::std::data::List::get::1 { x(w3 dup280(?(::std::data::List::get::3 ::std::data::List::get::2 x(w3 w4)) w4)) }

::std::data::List::get::2 {
  x(x(ref(tup(w1 w3) tup(w1 w4)) w17) @sub(1 w11))
  ::std::data::List::get::1 = x(x(ref(w3 w4) w17) w11)
}

::std::data::List::get::3 { x(x(w2 w2) _) }

::std::data::List::pop_front { fn(ref(tup(dup341(?(::std::data::List::pop_front::3 ::std::data::List::pop_front::2 x(x(w16 w17) x(x(w3 w15) w13))) w16) tup(w3 w4)) tup(w17 tup(w15 w4))) w13) }

::std::data::List::pop_front::2 { x(x(@sub(1 w1) w1) x(x(tup(w3 w4) w4) enum(enum(w3 w15) enum(_ w15)))) }

::std::data::List::pop_front::3 { x(x(w4 w4) x(x(w2 w2) ::std::logical::Option::None)) }

::std::data::List::concat { fn(tup(@add(w10 w18) tup(w6 w11)) fn(tup(w10 tup(w11 w21)) tup(w18 tup(w6 w21)))) }

::std::data::List::push_back {
  fn(ref(w1 w9) fn(w3 _))
  ::std::data::List::concat = fn(w1 fn(tup(1 tup(tup(w3 w11) w11)) w9))
}

::std::data::List::iter { fn(ref(tup(dup489(w0 w10) tup(w3 w4)) tup(w0 tup(w12 w4))) tup(w10 ref(w3 w12))) }

::std::data::List::Iter::next { fn(ref(tup(dup495(?(::std::data::List::Iter::next::3 ::std::data::List::Iter::next::2 x(x(w15 w16) x(x(w3 w14) w12))) w15) w3) tup(w16 w14)) w12) }

::std::data::List::Iter::next::2 { x(x(@sub(1 w1) w1) x(x(ref(tup(w4 w7) tup(w5 w8)) ref(w7 w8)) enum(enum(ref(w4 w5) w21) enum(_ w21)))) }

::std::data::List::Iter::next::3 { x(x(w8 w8) x(x(ref(w2 w2) _) ::std::logical::Option::None)) }

::std::data::List::Iter::drop { fn(ref(tup(_ ref(w7 w7)) _) _) }

::std::data::List::into_iter { fn(tup(w0 tup(w1 _)) tup(w0 w1)) }

::std::data::List::IntoIter::next { fn(ref(tup(dup521(?(::std::data::List::IntoIter::next::3 ::std::data::List::IntoIter::next::2 x(x(w15 w16) x(x(w3 w14) w12))) w15) w3) tup(w16 w14)) w12) }

::std::data::List::IntoIter::next::2 { x(x(@sub(1 w1) w1) x(x(tup(w3 w4) w4) enum(enum(w3 w15) enum(_ w15)))) }

::std::data::List::IntoIter::next::3 { x(x(w4 w4) x(x(w2 w2) ::std::logical::Option::None)) }

::std::data::Array::new {
  fn(dup562(w4 w5) fn(w1 tup(w4 w7)))
  ::std::data::Array::Node::new = fn(w5 fn(w1 w7))
}

::std::data::Array::to_list {
  fn(w0 tup(w7 tup(w12 w10)))
  ::std::data::Array::len = fn(ref(w0 w5) w7)
  ::std::data::Array::fold_back = fn(w5 fn(w10 fn(fn(w16 fn(w17 tup(w17 w16))) w12)))
}

::std::data::Array::fold_back { fn(tup(dup639(?(::std::data::Array::fold_back::3 ::std::data::Array::fold_back::2 x(w14 x(w1 x(w3 x(w4 w10))))) w14) w1) fn(w3 fn(w4 w10))) }

::std::data::Array::fold_back::2 {
  x(dup646(w1 w2) x(w30 x(w29 x(w28 w14))))
  ::std::data::Array::Node::zip_with = fn(w2 fn(w22 fn(w30 fn(w28 w7))))
  ::std::data::Array::pop_front = fn(ref(tup(w1 w7) w11) w13)
  ::std::logical::Option::unwrap = fn(w13 w14)
  ::std::data::Array::push_back = fn(ref(w11 tup(_ w22)) fn(w29 _))
}

::std::data::Array::fold_back::3 { x(_ x(_ x(w3 x(_ w3)))) }

::std::data::Array::len { fn(ref(tup(dup659(w10 w7) w8) tup(w7 w8)) w10) }

::std::data::Array::get {
  fn(ref(tup(dup664(w0 w11) w3) tup(w0 w4)) fn(w8 w17))
  ::std::data::Array::get::1 = x(x(ref(w3 w4) w14) x(w8 w11))
  ::std::data::Array::Node::as_leaf = fn(w14 w17)
}

::std::data::Array::get::1 { x(w5 x(w3 dup674(@lt$(1 ?(::std::data::Array::get::3 ::std::data::Array::get::2 x(w5 x(w3 w6)))) w6))) }

::std::data::Array::get::2 {
  x(x(w13 w17) x(dup678(@rem(2 w3) @div(2 w9)) w10))
  ::std::data::Array::Node::half = fn(w13 fn(w10 fn(w3 tup(w5 w6))))
  ::std::data::Array::get::1 = x(x(w5 w17) x(w9 w6))
}

::std::data::Array::get::3 { x(x(w3 w3) _) }

::std::data::Array::push_back { fn(ref(tup(dup684(?(::std::data::Array::push_back::3 ::std::data::Array::push_back::2 x(w19 x(ref(w3 w4) x(w8 _)))) dup684(w19 @add(1 w13))) w3) tup(w13 w4)) fn(w8 _)) }

::std::data::Array::push_back::2 {
  x(w14 x(w13 x(w12 _)))
  ::std::data::Array::push_back::4 = x(x(w13 ref(w4 tup(w4 w8))) w14)
  ::std::data::Array::Node::leaf = fn(w12 w8)
}

::std::data::Array::push_back::3 {
  x(_ x(ref(_ w5) x(w8 _)))
  ::std::data::Array::Node::leaf = fn(w8 w5)
}

::std::data::Array::push_back::4 { x(w4 dup704(@lt$(1 ?(::std::data::Array::push_back::6 ::std::data::Array::push_back::5 x(w4 w5))) w5)) }

::std::data::Array::push_back::5 {
  x(x(w10 w13) dup708(w1 @rem(2 w3)))
  ::std::data::Array::Node::half = fn(w10 fn(w1 fn(w3 tup(w5 w6))))
  ::std::data::Array::push_back::4 = x(x(w5 w13) w6)
}

::std::data::Array::push_back::6 { x(x(w2 w2) _) }

::std::data::Array::pop_front { fn(ref(tup(dup794(?(::std::data::Array::pop_front::3 ::std::data::Array::pop_front::2 x(x(w15 w16) x(ref(w3 w4) w13))) w15) w3) tup(w16 w4)) w13) }

::std::data::Array::pop_front::2 { x(x(dup799(@eq(1 ?(::std::data::Array::pop_front::5 ::std::data::Array::pop_front::4 x(x(w8 w9) w3))) w8) w9) w3) }

::std::data::Array::pop_front::3 {
  x(x(w3 w3) x(_ w5))
  ::std::data::Array::pop_front::10 = x(w5 ::std::logical::Option::None)
}

::std::data::Array::pop_front::4 {
  x(x(_ 0) x(ref(w2 _) w12))
  ::std::data::Array::Node::to_leaf = fn(w2 w4)
  ::std::data::Array::pop_front::10 = x(w12 enum(enum(w4 w10) enum(_ w10)))
}

::std::data::Array::pop_front::5 {
  x(x(dup810(w0 @sub(1 w3)) w3) x(w6 w9))
  ::std::data::Array::pop_front::6 = x(w6 x(w0 w9))
}

::std::data::Array::pop_front::6 {
  x(ref(w2 w38) x(@add(1 @div(2 dup817(@eq(1 ?(::std::data::Array::pop_front::9 ::std::data::Array::pop_front::8 x(ref(w18 w21) x(w39 x(x(w5 w38) x(x(w17 w36) w34)))))) w39))) w34))
  ref(w2 w5) = ref(tup(w8 w10) tup(w36 w21))
  tup(w10 w8) = tup(w17 w18)
}

::std::data::Array::pop_front::8 {
  x(ref(w1 _) x(_ x(x(_ w12) x(x(w12 _) enum(enum(w3 w17) enum(_ w17))))))
  ::std::data::Array::Node::to_leaf = fn(w1 w3)
}

::std::data::Array::pop_front::9 {
  x(w6 x(w5 x(x(w4 w4) x(x(w2 w2) w36))))
  ::std::data::Array::pop_front::6 = x(w6 x(w5 w36))
}

::std::data::Array::pop_front::10 { x(w11 w11) }

::std::data::Array::Node::new { fn(dup850(@eq(1 ?(::std::data::Array::Node::new::3 ::std::data::Array::Node::new::2 x(w10 x(w1 w8)))) w10) fn(w1 w8)) }

::std::data::Array::Node::new::2 {
  x(_ x(w3 w1))
  ::std::data::Array::Node::leaf = fn(w3 w1)
}

::std::data::Array::Node::new::3 {
  x(dup857(@add(1 @div(2 w2)) @div(2 w6)) x(dup858(w3 w7) tup(w4 w8)))
  ::std::data::Array::Node::new = fn(w2 fn(w3 w4))
  ::std::data::Array::Node::new = fn(w6 fn(w7 w8))
}

::std::data::Array::Node::half { fn(ref(tup(w1 w3) tup(w19 w17)) fn(w7 fn(?(::std::data::Array::Node::half::3 ::std::data::Array::Node::half::2 x(x(w1 w19) x(x(w3 w17) x(w7 w14)))) w14))) }

::std::data::Array::Node::half::2 { x(x(w11 w11) x(x(w9 w1) x(@div(2 w4) tup(ref(w9 w1) w4)))) }

::std::data::Array::Node::half::3 { x(x(w12 w1) x(x(w10 w10) x(@add(1 @div(2 w5)) tup(ref(w12 w1) w5)))) }

::std::data::Array::Node::zip_with { fn(dup919(@eq(1 ?(::std::data::Array::Node::zip_with::3 ::std::data::Array::Node::zip_with::2 x(w14 x(w1 x(w2 x(w3 w10)))))) w14) fn(w1 fn(w2 fn(w3 w10)))) }

::std::data::Array::Node::zip_with::2 {
  x(_ x(w10 x(w9 x(fn(w2 fn(w4 w5)) w6))))
  ::std::data::Array::Node::to_leaf = fn(w10 w2)
  ::std::data::Array::Node::to_leaf = fn(w9 w4)
  ::std::data::Array::Node::leaf = fn(w5 w6)
}

::std::data::Array::Node::zip_with::3 {
  x(dup930(@add(1 @div(2 w10)) @div(2 w16)) x(tup(w1 w2) x(tup(w5 w6) x(dup933(w13 w19) tup(w14 w20)))))
  ::std::data::Array::Node::zip_with = fn(w10 fn(w1 fn(w5 fn(w13 w14))))
  ::std::data::Array::Node::zip_with = fn(w16 fn(w2 fn(w6 fn(w19 w20))))
}

::std::logical::Option::unwrap { fn(enum(::std::logical::Option::unwrap::3 enum(_ w7)) w7) }

::std::logical::Option::unwrap::3 { enum(w0 w0) }

::std::numeric::N32::parse { fn(tup(dup1424(?(::std::numeric::N32::parse::3 ::std::numeric::N32::parse::2 x(w14 x(w5 w12))) w14) tup(w5 _)) w12) }

::std::numeric::N32::parse::2 {
  x(w5 x(w4 w6))
  ::std::numeric::N32::parse::4 = x(w5 x(w4 x(0 w6)))
}

::std::numeric::N32::parse::3 {
  x(_ x(_ w4))
  ::std::numeric::N32::parse::10 = x(w4 ::std::logical::Option::None)
}

::std::numeric::N32::parse::4 { x(dup1434(?(::std::numeric::N32::parse::6 ::std::numeric::N32::parse::5 x(w8 w3)) w8) w3) }

::std::numeric::N32::parse::5 {
  x(w18 x(tup(dup1443(dup1438(w20 @le(57 w23)) w26) w2) x(w16 w25)))
  48 = @le(w20 @n32_and(w23 ?(::std::numeric::N32::parse::9 ::std::numeric::N32::parse::8 x(w18 x(w2 x(w16 x(w26 w25)))))))
}

::std::numeric::N32::parse::6 {
  x(_ x(_ x(w1 w9)))
  ::std::numeric::N32::parse::10 = x(w9 enum(enum(w1 w7) enum(_ w7)))
}

::std::numeric::N32::parse::8 {
  x(@sub(1 w19) x(w3 x(@mul(10 @add(w15 w17)) x(@sub(48 w15) w20))))
  ::std::numeric::N32::parse::4 = x(w19 x(w3 x(w17 w20)))
}

::std::numeric::N32::parse::9 { x(_ x(_ x(_ x(_ ::std::logical::Option::None)))) }

::std::numeric::N32::parse::10 { x(w10 w10) }

::std::unicode::String::len { fn(ref(tup(dup2032(w0 w13) w2) tup(w0 w2)) w13) }

::std::unicode::String::split_once {
  fn(w0 fn(w1 w16))
  ::std::unicode::String::split_once::1 = x(w1 x(tup(0 tup(w15 w15)) x(w0 w16)))
}

::std::unicode::String::split_once::1 {
  x(w12 x(w11 x(w10 w13)))
  ::std::unicode::String::len = fn(ref(w10 w1) @le$(w7 ?(::std::unicode::String::split_once::3 ::std::unicode::String::split_once::2 x(w5 x(w11 x(w1 w13))))))
  ::std::unicode::String::len = fn(ref(w12 w5) w7)
}

::std::unicode::String::split_once::2 {
  x(w27 x(w26 x(w25 w50)))
  ::std::data::List::iter = fn(ref(w27 w2) w5)
  ::std::data::List::iter = fn(ref(w25 w9) w12)
  ::std::unicode::String::split_once::5 = x(w2 x(w26 x(w9 x(w5 x(w12 w50)))))
}

::std::unicode::String::split_once::3 { x(_ ::std::unicode::String::split_once::23) }

::std::unicode::String::split_once::5 {
  x(w10 x(w9 x(w8 x(w7 w6))))
  ::std::data::List::Iter::next = fn(ref(w7 w1) enum(::std::unicode::String::split_once::8 enum(::std::unicode::String::split_once::9 x(w10 x(w9 x(w8 x(w1 w6)))))))
}

::std::unicode::String::split_once::8 {
  enum(ref(dup2155(w1 w16) w1) x(w9 x(w8 x(w7 x(w6 x(w5 w15))))))
  ::std::data::List::Iter::next = fn(ref(w5 w11) enum(::std::unicode::String::split_once::12 enum(::std::unicode::String::split_once::13 x(w9 x(w8 x(w7 x(w6 x(w11 x(w16 w15)))))))))
}

::std::unicode::String::split_once::9 {
  x(_ x(w4 x(w3 x(_ w1))))
  ::std::unicode::String::split_once::14 = x(w4 x(w3 w1))
}

::std::unicode::String::split_once::12 { enum(ref(dup2169(w1 w13) w1) x(w10 x(w9 x(w8 x(w7 x(w6 x(@ne(w13 ?(::std::unicode::String::split_once::5 ::std::unicode::String::split_once::16 x(w10 x(w9 x(w8 x(w7 x(w6 w15))))))) w15))))))) }

::std::unicode::String::split_once::13 {
  x(_ x(w5 x(w4 x(_ x(w2 x(_ w7))))))
  ::std::unicode::String::split_once::14 = x(w5 x(w4 x(w2 w7)))
}

::std::unicode::String::split_once::14 { x(w3 x(tup(_ tup(_ w12)) x(tup(w6 ref(w8 _)) tup(w3 enum(enum(tup(w6 tup(w8 w12)) w26) enum(_ w26)))))) }

::std::unicode::String::split_once::16 {
  x(w5 x(w4 x(w3 x(w2 x(w1 w37)))))
  ::std::data::List::Iter::drop = fn(ref(w2 _) _)
  ::std::data::List::Iter::drop = fn(ref(w1 _) _)
  ::std::data::List::pop_front = fn(ref(w3 w32) enum(::std::unicode::String::split_once::21 enum(::std::unicode::String::split_once::22 x(w5 x(w4 x(w32 w37))))))
}

::std::unicode::String::split_once::21 {
  enum(w0 x(w5 x(w4 w3)))
  ::std::data::List::concat = fn(w4 fn(tup(1 tup(tup(w0 w12) w12)) w11))
  ::std::unicode::String::split_once::1 = x(w5 x(w11 w3))
}

::std::unicode::String::split_once::22 { x(_ ::std::unicode::String::split_once::23) }

::std::unicode::String::split_once::23 {
  x(w14 x(w13 tup(w10 ::std::logical::Option::None)))
  ::std::data::List::concat = fn(w14 fn(w13 w10))
}

::std::IO::println {
  fn(ref(w1 w12) fn(w3 _))
  ::std::IO::print = fn(ref(w1 w7) fn(w3 _))
  ::std::IO::print_char = fn(ref(w7 w12) fn(10 _))
}

::std::IO::print {
  fn(ref(w1 w16) fn(tup(w7 tup(w8 _)) _))
  ::std::IO::print::1 = x(x(w1 w16) x(w7 w8))
}

::std::IO::print::1 { x(w4 x(dup2405(?(::std::IO::print::3 ::std::IO::print::2 x(w4 x(w6 w1))) w6) w1)) }

::std::IO::print::2 {
  x(x(w17 w21) x(@sub(1 w1) tup(w4 w5)))
  ::std::IO::print_char = fn(ref(w17 w10) fn(w4 _))
  ::std::IO::print::1 = x(x(w10 w21) x(w1 w5))
}

::std::IO::print::3 { x(x(w3 w3) _) }

::std::IO::read_line {
  fn(ref(w1 w17) w14)
  ::std::IO::read_byte = fn(ref(w1 w6) fn(0 dup2448(@ne(0 ?(::std::IO::read_line::3 ::std::IO::read_line::2 x(x(w6 w17) x(w15 w14)))) w15)))
}

::std::IO::read_line::2 { x(w5 x(dup2454(@eq(10 ?(::std::IO::read_line::6 ::std::IO::read_line::5 x(w5 x(w9 w8)))) w9) enum(enum(w8 w12) enum(_ w12)))) }

::std::IO::read_line::3 { x(x(w3 w3) x(_ ::std::logical::Option::None)) }

::std::IO::read_line::5 { x(x(w4 w4) x(_ tup(0 tup(w7 w7)))) }

::std::IO::read_line::6 {
  x(w10 x(w8 w14))
  ::std::IO::read_line::7 = x(w10 x(x(tup(1 tup(tup(w8 w11) w11)) w14) _))
}

::std::IO::read_line::7 {
  x(x(w10 w18) w8)
  ::std::IO::read_byte = fn(ref(w10 w1) fn(10 dup2471(@ne(10 ?(::std::IO::read_line::10 ::std::IO::read_line::9 x(x(w1 w18) x(w16 w8)))) w16)))
}

::std::IO::read_line::9 {
  x(w9 x(w7 x(x(w6 w19) w17)))
  ::std::data::List::concat = fn(w6 fn(tup(1 tup(tup(w7 w10) w10)) w3))
  ::std::IO::read_line::7 = x(w9 x(x(w3 w19) w17))
}

::std::IO::read_line::10 { x(x(w5 w5) x(_ x(x(w2 w2) _))) }

