
::main { ::day_17::main }

::day_17::main {
  fn(ref(w3 w42) _)
  ::std::io::IO::full_input = fn(ref(w3 w8) w10)
  ::day_17::main::2 = x(x(w10 w53) w51)
  ::std::n32::N32::parse = fn(w51 w14)
  ::std::option::Option::unwrap = fn(w14 w15)
  ::day_17::main::2 = x(x(w53 w56) w54)
  ::std::n32::N32::parse = fn(w54 w19)
  ::std::option::Option::unwrap = fn(w19 w20)
  ::day_17::main::2 = x(x(w56 w59) w57)
  ::std::n32::N32::parse = fn(w57 w24)
  ::std::option::Option::unwrap = fn(w24 w25)
  ::day_17::main::2 = x(x(w59 _) w60)
  ::std::list::List::split = fn(w60 fn(tup(1 tup(tup(44 w63) w63)) w30))
  ::std::n32::N32::parse = fn(w64 w68)
  ::std::option::Option::unwrap = fn(w68 w69)
  ::std::list::List::map = fn(w30 fn(fn(w64 w69) w32))
  ::std::array::Array::from_list = fn(w32 w35)
  ::day_17::main::4 = x(w15 x(w20 x(w25 x(w35 x(x(tup(0 tup(w70 w70)) w74) x(0 100))))))
  ::std::list::List::map = fn(w74 fn(::std::n32::N32::to_string w46))
  ::std::list::List::join = fn(w46 fn(tup(1 tup(tup(44 w80) w80)) w48))
  ::std::list::List::concat = fn(tup(8 tup(tup(80 tup(97 tup(114 tup(116 tup(32 tup(49 tup(58 tup(32 w79)))))))) w79)) fn(w48 w49))
  ::std::io::IO::println = fn(ref(w8 w42) fn(w49 _))
}

::day_17::main::2 {
  x(x(w20 w15) w11)
  ::std::list::List::split_once = fn(w20 fn(tup(2 tup(tup(58 tup(32 w21)) w21)) tup(_ w5)))
  ::std::option::Option::unwrap = fn(w5 w8)
  ::std::list::List::split_once = fn(w8 fn(tup(1 tup(tup(10 w22) w22)) tup(w11 w12)))
  ::std::option::Option::unwrap = fn(w12 w15)
}

::day_17::main::4 {
  x(w13 x(w12 x(w11 x(w10 x(w9 x(dup41(@lt(w4 ?(::day_17::main::6 ::day_17::main::5 x(w13 x(w12 x(w11 x(w2 x(w9 x(w15 w6)))))))) w15) w6))))))
  ::std::array::Array::len = fn(ref(w10 w2) w4)
}

::day_17::main::5 { x(w8 x(w7 x(w6 x(w5 x(w4 x(w2 dup50(?(::day_17::main::8 ::day_17::main::7 x(w8 x(w7 x(w6 x(w5 x(w4 x(w2 w9))))))) w9))))))) }

::day_17::main::6 { x(_ x(_ x(_ x(_ x(x(w3 w3) _))))) }

::day_17::main::7 {
  x(w31 x(w30 x(w29 x(w28 x(x(w27 w49) x(dup66(w5 dup66(@add(1 w15) w36)) @sub(1 w1)))))))
  ::std::array::Array::get = fn(ref(w28 w3) fn(w5 ref(dup52(dup71(?(::day_17::main::20 ::day_17::main::19 x(x(w31 w45) x(x(w30 w43) x(x(w29 w41) x(x(w27 w39) x(x(w36 @add(2 w23)) x(w35 x(w19 _)))))))) w35) w8) w8)))
  ::std::array::Array::get = fn(ref(w3 w12) fn(w15 ref(dup53(w19 w18) w18)))
  ::day_17::main::4 = x(w45 x(w43 x(w41 x(w12 x(x(w39 w49) x(w23 w1))))))
}

::day_17::main::8 { x(_ x(_ x(_ x(_ x(x(w3 w3) _))))) }

::day_17::main::10 { x(w7 x(w6 x(w5 x(dup78(@eq(4 ?(::day_17::main::13 ::day_17::main::12 x(w7 x(w6 x(w5 x(w11 w10)))))) w11) w10)))) }

::day_17::main::12 { x(w5 x(_ x(_ x(_ w5)))) }

::day_17::main::13 { x(_ x(w5 x(w4 x(dup86(@eq(5 ?(::day_17::main::15 ::day_17::main::14 x(w5 x(w4 x(w8 w7))))) w8) w7)))) }

::day_17::main::14 { x(w4 x(_ x(_ w4))) }

::day_17::main::15 { x(_ x(w4 x(dup91(@eq(6 ?(::day_17::main::17 ::day_17::main::16 x(w4 x(w7 w6)))) w7) w6))) }

::day_17::main::16 { x(w3 x(_ w3)) }

::day_17::main::17 { x(_ x(w2 w2)) }

::day_17::main::19 { x(x(dup97(w13 w26) w13) x(w12 x(w10 x(w8 x(w6 x(dup106(@eq(1 ?(::day_17::main::22 ::day_17::main::21 x(w26 x(w12 x(w10 x(w8 x(w6 x(w17 w3)))))))) w17) w3)))))) }

::day_17::main::20 {
  x(x(dup110(w21 @n32_shr(w17 w3)) w3) x(x(dup111(w13 w20) w13) x(x(dup112(w11 w19) w11) x(x(w10 w10) x(x(w8 w8) x(_ x(w5 _)))))))
  ::day_17::main::10 = x(w21 x(w20 x(w19 x(w5 w17))))
}

::day_17::main::21 { x(_ x(x(@n32_xor(w4 w2) w2) x(x(w11 w11) x(x(w9 w9) x(x(w7 w7) x(_ x(w4 _))))))) }

::day_17::main::22 { x(w13 x(w12 x(w10 x(w8 x(w6 x(dup134(@eq(2 ?(::day_17::main::24 ::day_17::main::23 x(w13 x(w12 x(w10 x(w8 x(w6 x(w16 w3)))))))) w16) w3)))))) }

::day_17::main::23 {
  x(w15 x(x(w14 w2) x(x(dup140(w11 w18) w11) x(x(w10 w10) x(x(w8 w8) x(_ x(w5 _)))))))
  ::day_17::main::10 = x(w15 x(w14 x(w18 x(w5 @n32_and(7 w2)))))
}

::day_17::main::24 { x(w13 x(w12 x(w10 x(w8 x(w6 x(dup155(@eq(3 ?(::day_17::main::26 ::day_17::main::25 x(w13 x(w12 x(w10 x(w8 x(w6 x(w16 w3)))))))) w16) w3)))))) }

::day_17::main::25 { x(?(::day_17::main::29 ::day_17::main::28 x(w5 w2)) x(x(w11 w11) x(x(w9 w9) x(x(w7 w7) x(w5 x(_ w2)))))) }

::day_17::main::26 { x(w13 x(w12 x(w10 x(w8 x(x(w6 w6) x(dup175(@eq(4 ?(::day_17::main::31 ::day_17::main::30 x(w13 x(w12 x(w10 x(w8 x(w16 w3))))))) w16) w3)))))) }

::day_17::main::28 { x(x(_ w1) x(@sub(2 w1) _)) }

::day_17::main::29 { x(x(w3 w3) _) }

::day_17::main::30 { x(_ x(x(@n32_xor(w0 w2) w2) x(x(dup184(w8 w0) w8) x(x(w7 w7) _)))) }

::day_17::main::31 { x(w11 x(w10 x(w8 x(w6 x(dup194(@eq(5 ?(::day_17::main::33 ::day_17::main::32 x(w11 x(w10 x(w8 x(w6 x(w14 w3))))))) w14) w3))))) }

::day_17::main::32 {
  x(w17 x(x(dup198(w15 w21) w15) x(x(dup199(w13 w20) w13) x(x(w12 w7) x(_ x(w9 _))))))
  ::day_17::main::10 = x(w17 x(w21 x(w20 x(w9 @n32_and(7 w2)))))
  ::std::list::List::concat = fn(w12 fn(tup(1 tup(tup(w2 w23) w23)) w7))
}

::day_17::main::33 { x(w11 x(w10 x(w8 x(x(w6 w6) x(dup212(@eq(6 ?(::day_17::main::35 ::day_17::main::34 x(w11 x(w10 x(w8 x(w14 w3)))))) w14) w3))))) }

::day_17::main::34 {
  x(dup215(@n32_shr(w13 w3) w17) x(x(w11 w3) x(x(dup218(w8 w15) w8) x(_ x(w6 _)))))
  ::day_17::main::10 = x(w17 x(w11 x(w15 x(w6 w13))))
}

::day_17::main::35 { x(w9 x(x(dup223(w7 w14) w7) x(w6 x(@eq(7 ?(::day_17::main::37 ::day_17::main::36 x(w9 x(w14 x(w6 w3))))) w3)))) }

::day_17::main::36 {
  x(dup229(@n32_shr(w11 w3) w15) x(w9 x(x(w8 w3) x(w6 _))))
  ::day_17::main::10 = x(w15 x(w9 x(w8 x(w6 w11))))
}

::day_17::main::37 { x(_ x(_ x(x(w3 w3) _))) }

::std::array::Array::empty { tup(0 _) }

::std::array::Array::from_list {
  fn(tup(w2 tup(w3 _)) w12)
  ::std::array::Array::from_fn = fn(w2 fn(ref(w3 _) fn(fn(ref(tup(w19 w20) w20) w19) w12)))
}

::std::array::Array::from_fn { fn(dup269(?(::std::array::Array::from_fn::4 ::std::array::Array::from_fn::3 x(w14 x(w13 x(w6 w11)))) w14) fn(ref(dup270(w3 w13) w3) fn(w6 w11))) }

::std::array::Array::from_fn::3 {
  x(dup276(w1 dup276(w9 w29)) x(w34 x(fn(ref(w36 w41) w43) tup(w29 w6))))
  ::std::array::Node::unzip_with = fn(w1 fn(w25 fn(fn(w36 tup(w43 w41)) tup(w6 w7))))
  ::std::array::Array::pop_back = fn(ref(tup(w9 w7) w14) w16)
  ::std::option::Option::unwrap = fn(w16 _)
  ::std::array::Array::push_front = fn(ref(w14 tup(_ w25)) fn(w34 _))
}

::std::array::Array::from_fn::4 { x(_ x(_ x(_ ::std::array::Array::empty))) }

::std::array::Array::len { fn(ref(tup(dup346(w12 w9) w10) tup(w9 w10)) w12) }

::std::array::Array::get {
  fn(ref(tup(dup352(w2 w13) w5) tup(w2 w6)) fn(w10 w19))
  ::std::array::Array::get::2 = x(x(ref(w5 w6) w16) x(w10 w13))
  ::std::array::Node::as_leaf = fn(w16 w19)
}

::std::array::Array::get::2 { x(w5 x(w3 dup363(@lt$(1 ?(::std::array::Array::get::4 ::std::array::Array::get::3 x(w5 x(w3 w6)))) w6))) }

::std::array::Array::get::3 {
  x(x(w13 w17) x(dup367(@rem(2 w3) @div(2 w9)) w10))
  ::std::array::Node::half = fn(w13 fn(w10 fn(w3 tup(w5 w6))))
  ::std::array::Array::get::2 = x(x(w5 w17) x(w9 w6))
}

::std::array::Array::get::4 { x(x(w3 w3) _) }

::std::array::Array::push_front { fn(ref(tup(dup402(?(::std::array::Array::push_front::4 ::std::array::Array::push_front::3 x(w20 x(ref(w5 w6) x(w10 _)))) dup402(w20 @add(1 w15))) w5) tup(w15 w6)) fn(w10 _)) }

::std::array::Array::push_front::3 {
  x(w14 x(w13 x(w12 _)))
  ::std::array::Array::push_front::5 = x(x(w13 ref(w4 tup(w7 w4))) w14)
  ::std::array::Node::leaf = fn(w12 w7)
}

::std::array::Array::push_front::4 {
  x(_ x(ref(_ w5) x(w8 _)))
  ::std::array::Node::leaf = fn(w8 w5)
}

::std::array::Array::push_front::5 { x(w4 dup423(@lt$(1 ?(::std::array::Array::push_front::7 ::std::array::Array::push_front::6 x(w4 w5))) w5)) }

::std::array::Array::push_front::6 {
  x(x(ref(tup(w2 w4) tup(w15 w12)) w26) @div(2 w19))
  tup(w4 w2) = tup(w11 w12)
  ::std::array::Array::push_front::5 = x(x(ref(w11 w15) w26) w19)
}

::std::array::Array::push_front::7 { x(x(w2 w2) _) }

::std::array::Array::pop_back { fn(ref(tup(dup436(?(::std::array::Array::pop_back::4 ::std::array::Array::pop_back::3 x(x(w16 w17) x(ref(w5 w6) w14))) w16) w5) tup(w17 w6)) w14) }

::std::array::Array::pop_back::3 { x(x(dup442(@eq(1 ?(::std::array::Array::pop_back::6 ::std::array::Array::pop_back::5 x(x(w8 w9) w3))) w8) w9) w3) }

::std::array::Array::pop_back::4 {
  x(x(w3 w3) x(_ w5))
  ::std::array::Array::pop_back::14 = x(w5 ::std::option::Option::None)
}

::std::array::Array::pop_back::5 {
  x(x(_ 0) x(ref(w2 _) w11))
  ::std::array::Node::to_leaf = fn(w2 w4)
  ::std::option::Option::Some = fn(w4 w5)
  ::std::array::Array::pop_back::14 = x(w11 w5)
}

::std::array::Array::pop_back::6 {
  x(x(dup453(w0 @sub(1 w3)) w3) x(w6 w9))
  ::std::array::Array::pop_back::7 = x(w6 x(w0 w9))
}

::std::array::Array::pop_back::7 {
  x(ref(w6 w25) x(dup459(@sub(1 @rem(2 dup461(w12 w26))) w11) w23))
  ::std::array::Node::half = fn(ref(w6 w9) fn(w11 fn(w12 tup(w14 dup460(@eq(1 ?(::std::array::Array::pop_back::10 ::std::array::Array::pop_back::9 x(w14 x(w27 x(w26 x(x(w9 w25) w23)))))) w27)))))
}

::std::array::Array::pop_back::9 {
  x(ref(w1 _) x(_ x(?(::std::array::Array::pop_back::13 ::std::array::Array::pop_back::12 x(w6 x(w7 w20))) x(x(tup(w6 w7) w20) w12))))
  ::std::array::Node::to_leaf = fn(w1 w3)
  ::std::option::Option::Some = fn(w3 w12)
}

::std::array::Array::pop_back::10 {
  x(w5 x(w4 x(_ x(x(w2 w2) w24))))
  ::std::array::Array::pop_back::7 = x(w5 x(w4 w24))
}

::std::array::Array::pop_back::12 { x(w3 x(_ w3)) }

::std::array::Array::pop_back::13 { x(_ x(w2 w2)) }

::std::array::Array::pop_back::14 { x(w11 w11) }

::std::array::Node::to_leaf { fn(x x) }

::std::array::Node::as_leaf { fn(x x) }

::std::array::Node::leaf { fn(x x) }

::std::array::Node::half { fn(ref(tup(w3 w5) tup(w20 w18)) fn(w9 fn(?(::std::array::Node::half::4 ::std::array::Node::half::3 x(x(w3 w20) x(x(w5 w18) x(w9 w15)))) w15))) }

::std::array::Node::half::3 { x(x(w11 w11) x(x(w9 w1) x(@div(2 w4) tup(ref(w9 w1) w4)))) }

::std::array::Node::half::4 { x(x(w12 w1) x(x(w10 w10) x(@add(1 @div(2 w5)) tup(ref(w12 w1) w5)))) }

::std::array::Node::unzip_with { fn(dup639(@eq(1 ?(::std::array::Node::unzip_with::4 ::std::array::Node::unzip_with::3 x(w13 x(w3 x(w4 w10))))) w13) fn(w3 fn(w4 w10))) }

::std::array::Node::unzip_with::3 {
  x(_ x(w14 x(fn(w2 tup(w4 w5)) tup(w8 w10))))
  ::std::array::Node::to_leaf = fn(w14 w2)
  ::std::array::Node::leaf = fn(w4 w8)
  ::std::array::Node::leaf = fn(w5 w10)
}

::std::array::Node::unzip_with::4 {
  x(dup651(@add(1 @div(2 w6)) @div(2 w14)) x(tup(w1 w2) x(dup653(w8 w16) tup(tup(w10 w18) tup(w11 w19)))))
  ::std::array::Node::unzip_with = fn(w6 fn(w1 fn(w8 tup(w10 w11))))
  ::std::array::Node::unzip_with = fn(w14 fn(w2 fn(w16 tup(w18 w19))))
}

::std::io::IO::println {
  fn(ref(w3 w14) fn(w5 _))
  ::std::io::IO::print = fn(ref(w3 w9) fn(w5 _))
  ::std::io::IO::print_char = fn(ref(w9 w14) fn(10 _))
}

::std::io::IO::print {
  fn(ref(w3 w15) fn(tup(w9 tup(w10 _)) _))
  ::std::io::IO::print::2 = x(x(w3 w15) x(w9 w10))
}

::std::io::IO::print::2 { x(w4 x(dup697(?(::std::io::IO::print::4 ::std::io::IO::print::3 x(w4 x(w6 w1))) w6) w1)) }

::std::io::IO::print::3 {
  x(x(w17 w21) x(@sub(1 w1) tup(w4 w5)))
  ::std::io::IO::print_char = fn(ref(w17 w10) fn(w4 _))
  ::std::io::IO::print::2 = x(x(w10 w21) x(w1 w5))
}

::std::io::IO::print::4 { x(x(w3 w3) _) }

::std::io::IO::print_char { fn(ref(@io_print_char(char io) io) fn(char _)) }

::std::io::IO::full_input {
  fn(ref(w3 w14) w11)
  ::std::io::IO::full_input::2 = x(x(w3 w14) x(tup(0 tup(w10 w10)) w11))
}

::std::io::IO::full_input::2 {
  x(x(w9 w16) x(w7 w12))
  ::std::io::IO::read_byte = fn(ref(w9 w1) fn(0 dup791(@ne(0 ?(::std::io::IO::full_input::5 ::std::io::IO::full_input::4 x(x(w1 w16) x(w7 x(w13 w12))))) w13)))
}

::std::io::IO::full_input::4 {
  x(w8 x(w6 x(w5 w16)))
  ::std::list::List::concat = fn(w6 fn(tup(1 tup(tup(w5 w9) w9)) w3))
  ::std::io::IO::full_input::2 = x(w8 x(w3 w16))
}

::std::io::IO::full_input::5 { x(x(w5 w5) x(w3 x(_ w3))) }

::std::io::IO::read_byte { fn(ref(dup(io0 @io_read_byte(default dup(byte @seq$(io0 io1)))) io1) fn(default byte)) }

::std::list::List::len { fn(ref(tup(dup803(w13 w9) w10) tup(w9 w10)) w13) }

::std::list::List::map {
  fn(tup(dup870(w8 w23) tup(w3 _)) fn(w5 tup(w8 tup(w12 w20))))
  ::std::list::List::map::2 = x(w23 x(w3 x(w5 x(w12 w20))))
}

::std::list::List::map::2 { x(dup881(?(::std::list::List::map::4 ::std::list::List::map::3 x(w10 w4)) w10) w4) }

::std::list::List::map::3 {
  x(@sub(1 w18) x(tup(w1 w2) x(dup890(fn(w1 w9) w26) x(tup(w9 w11) w25))))
  ::std::list::List::map::2 = x(w18 x(w2 x(w26 x(w11 w25))))
}

::std::list::List::map::4 { x(_ x(_ x(_ x(w1 w1)))) }

::std::list::List::pop_front { fn(ref(tup(dup900(?(::std::list::List::pop_front::4 ::std::list::List::pop_front::3 x(x(w17 w18) x(x(w5 w16) w14))) w17) tup(w5 w6)) tup(w18 tup(w16 w6))) w14) }

::std::list::List::pop_front::3 {
  x(x(@sub(1 w1) w1) x(x(tup(w3 w4) w4) w9))
  ::std::option::Option::Some = fn(w3 w9)
}

::std::list::List::pop_front::4 { x(x(w4 w4) x(x(w2 w2) ::std::option::Option::None)) }

::std::list::List::concat { fn(tup(@add(w12 w20) tup(w8 w13)) fn(tup(w12 tup(w13 w23)) tup(w20 tup(w8 w23)))) }

::std::list::List::join {
  fn(w2 fn(w3 w15))
  ::std::list::List::into_iter = fn(w2 w7)
  ::std::list::List::IntoIter::next = fn(ref(w7 w11) enum(::std::list::List::join::5 enum(::std::list::List::join::6 x(w3 x(w11 w15)))))
}

::std::list::List::join::5 {
  enum(w0 x(w4 x(w3 w7)))
  ::std::list::List::join::7 = x(w4 x(w3 x(w0 w7)))
}

::std::list::List::join::6 { x(_ x(_ tup(0 tup(w4 w4)))) }

::std::list::List::join::7 {
  x(w8 x(w7 w6))
  ::std::list::List::IntoIter::next = fn(ref(w7 w1) enum(::std::list::List::join::10 enum(::std::list::List::join::11 x(w8 x(w1 w6)))))
}

::std::list::List::join::10 {
  enum(w0 x(dup983(w6 w14) x(w4 x(w3 w12))))
  ::std::list::List::concat = fn(w6 fn(w0 w8))
  ::std::list::List::concat = fn(w3 fn(w8 w10))
  ::std::list::List::join::7 = x(w14 x(w4 x(w10 w12)))
}

::std::list::List::join::11 { x(_ x(_ x(w1 w1))) }

::std::list::List::iter { fn(ref(tup(dup1060(w2 w12) tup(w5 w6)) tup(w2 tup(w14 w6))) tup(w12 ref(w5 w14))) }

::std::list::List::Iter::next { fn(ref(tup(dup1067(?(::std::list::List::Iter::next::4 ::std::list::List::Iter::next::3 x(x(w16 w17) x(x(w5 w15) w13))) w16) w5) tup(w17 w15)) w13) }

::std::list::List::Iter::next::3 {
  x(x(@sub(1 w1) w1) x(x(ref(tup(w4 w7) tup(w5 w8)) ref(w7 w8)) w15))
  ::std::option::Option::Some = fn(ref(w4 w5) w15)
}

::std::list::List::Iter::next::4 { x(x(w8 w8) x(x(ref(w2 w2) _) ::std::option::Option::None)) }

::std::list::List::Iter::drop { fn(ref(tup(_ ref(w9 w9)) _) _) }

::std::list::List::into_iter { fn(tup(w2 tup(w3 _)) tup(w2 w3)) }

::std::list::List::IntoIter::next { fn(ref(tup(dup1096(?(::std::list::List::IntoIter::next::4 ::std::list::List::IntoIter::next::3 x(x(w16 w17) x(x(w5 w15) w13))) w16) w5) tup(w17 w15)) w13) }

::std::list::List::IntoIter::next::3 {
  x(x(@sub(1 w1) w1) x(x(tup(w3 w4) w4) w9))
  ::std::option::Option::Some = fn(w3 w9)
}

::std::list::List::IntoIter::next::4 { x(x(w4 w4) x(x(w2 w2) ::std::option::Option::None)) }

::std::list::List::split {
  fn(w2 fn(w3 w10))
  ::std::list::List::split::2 = x(w2 x(w3 x(tup(0 tup(w9 w9)) w10)))
}

::std::list::List::split::2 {
  x(w14 x(dup1143(w1 w20) x(w12 w18)))
  ::std::list::List::split_once = fn(w14 fn(w1 tup(w3 enum(::std::list::List::split::6 enum(::std::list::List::split::7 x(w20 x(w9 w18)))))))
  ::std::list::List::concat = fn(w12 fn(tup(1 tup(tup(w3 w15) w15)) w9))
}

::std::list::List::split::6 {
  enum(w0 w4)
  ::std::list::List::split::2 = x(w0 w4)
}

::std::list::List::split::7 { x(_ x(w1 w1)) }

::std::list::List::split_once {
  fn(w2 fn(w3 w15))
  ::std::list::List::split_once::2 = x(w3 x(tup(0 tup(w14 w14)) x(w2 w15)))
}

::std::list::List::split_once::2 {
  x(w12 x(w11 x(w10 w13)))
  ::std::list::List::len = fn(ref(w10 w1) @le$(w7 ?(::std::list::List::split_once::4 ::std::list::List::split_once::3 x(w5 x(w11 x(w1 w13))))))
  ::std::list::List::len = fn(ref(w12 w5) w7)
}

::std::list::List::split_once::3 {
  x(w23 x(w22 x(w21 w42)))
  ::std::list::List::iter = fn(ref(w23 w1) w3)
  ::std::list::List::iter = fn(ref(w21 w6) w8)
  ::std::list::List::split_once::6 = x(w1 x(w22 x(w6 x(w3 x(w8 w42)))))
}

::std::list::List::split_once::4 { x(_ ::std::list::List::split_once::24) }

::std::list::List::split_once::6 {
  x(w10 x(w9 x(w8 x(w7 w6))))
  ::std::list::List::Iter::next = fn(ref(w7 w1) enum(::std::list::List::split_once::9 enum(::std::list::List::split_once::10 x(w10 x(w9 x(w8 x(w1 w6)))))))
}

::std::list::List::split_once::9 {
  enum(ref(dup1259(w1 w16) w1) x(w9 x(w8 x(w7 x(w6 x(w5 w15))))))
  ::std::list::List::Iter::next = fn(ref(w5 w11) enum(::std::list::List::split_once::13 enum(::std::list::List::split_once::14 x(w9 x(w8 x(w7 x(w6 x(w11 x(w16 w15)))))))))
}

::std::list::List::split_once::10 {
  x(_ x(w4 x(w3 x(_ w1))))
  ::std::list::List::split_once::15 = x(w4 x(w3 w1))
}

::std::list::List::split_once::13 { enum(ref(dup1273(w1 w13) w1) x(w10 x(w9 x(w8 x(w7 x(w6 x(@ne(w13 ?(::std::list::List::split_once::6 ::std::list::List::split_once::17 x(w10 x(w9 x(w8 x(w7 x(w6 w15))))))) w15))))))) }

::std::list::List::split_once::14 {
  x(_ x(w5 x(w4 x(_ x(w2 x(_ w7))))))
  ::std::list::List::split_once::15 = x(w5 x(w4 x(w2 w7)))
}

::std::list::List::split_once::15 {
  x(w3 x(tup(_ tup(_ w12)) x(tup(w6 ref(w8 _)) tup(w3 w20))))
  ::std::option::Option::Some = fn(tup(w6 tup(w8 w12)) w20)
}

::std::list::List::split_once::17 {
  x(w5 x(w4 x(w3 x(w2 x(w1 w31)))))
  ::std::list::List::Iter::drop = fn(ref(w2 _) _)
  ::std::list::List::Iter::drop = fn(ref(w1 _) _)
  ::std::list::List::pop_front = fn(ref(w3 w27) enum(::std::list::List::split_once::22 enum(::std::list::List::split_once::23 x(w5 x(w4 x(w27 w31))))))
}

::std::list::List::split_once::22 {
  enum(w0 x(w5 x(w4 w3)))
  ::std::list::List::concat = fn(w4 fn(tup(1 tup(tup(w0 w10) w10)) w9))
  ::std::list::List::split_once::2 = x(w5 x(w9 w3))
}

::std::list::List::split_once::23 { x(_ ::std::list::List::split_once::24) }

::std::list::List::split_once::24 {
  x(w14 x(w13 tup(w10 ::std::option::Option::None)))
  ::std::list::List::concat = fn(w14 fn(w13 w10))
}

::std::n32::N32::to_string { fn(dup2377(?(::std::n32::N32::to_string::4 ::std::n32::N32::to_string::3 x(w8 w7)) w8) w7) }

::std::n32::N32::to_string::3 {
  x(w4 w7)
  ::std::n32::N32::to_string::5 = x(w4 x(tup(0 tup(w5 w5)) w7))
}

::std::n32::N32::to_string::4 { x(_ tup(1 tup(tup(48 w3) w3))) }

::std::n32::N32::to_string::5 { x(dup2387(?(::std::n32::N32::to_string::7 ::std::n32::N32::to_string::6 x(w6 w2)) w6) w2) }

::std::n32::N32::to_string::6 {
  x(dup2390(@rem(10 w1) @div(10 w8)) x(w11 w15))
  48 = @add(w1 w2)
  ::std::list::List::concat = fn(tup(1 tup(tup(w2 w13) w13)) fn(w11 w5))
  ::std::n32::N32::to_string::5 = x(w8 x(w5 w15))
}

::std::n32::N32::to_string::7 { x(_ x(w1 w1)) }

::std::n32::N32::parse { fn(tup(dup2397(?(::std::n32::N32::parse::4 ::std::n32::N32::parse::3 x(w13 x(w7 w11))) w13) tup(w7 _)) w11) }

::std::n32::N32::parse::3 {
  x(w5 x(w4 w6))
  ::std::n32::N32::parse::5 = x(w5 x(w4 x(0 w6)))
}

::std::n32::N32::parse::4 {
  x(_ x(_ w4))
  ::std::n32::N32::parse::11 = x(w4 ::std::option::Option::None)
}

::std::n32::N32::parse::5 { x(dup2408(?(::std::n32::N32::parse::7 ::std::n32::N32::parse::6 x(w8 w3)) w8) w3) }

::std::n32::N32::parse::6 {
  x(w18 x(tup(dup2417(dup2412(w20 @le(57 w23)) w26) w2) x(w16 w25)))
  48 = @le(w20 @n32_and(w23 ?(::std::n32::N32::parse::10 ::std::n32::N32::parse::9 x(w18 x(w2 x(w16 x(w26 w25)))))))
}

::std::n32::N32::parse::7 {
  x(_ x(_ x(w1 w8)))
  ::std::option::Option::Some = fn(w1 w6)
  ::std::n32::N32::parse::11 = x(w8 w6)
}

::std::n32::N32::parse::9 {
  x(@sub(1 w19) x(w3 x(@mul(10 @add(w15 w17)) x(@sub(48 w15) w20))))
  ::std::n32::N32::parse::5 = x(w19 x(w3 x(w17 w20)))
}

::std::n32::N32::parse::10 { x(_ x(_ x(_ x(_ ::std::option::Option::None)))) }

::std::n32::N32::parse::11 { x(w8 w8) }

::std::option::Option::Some { fn(f0 enum(enum(f0 r) enum(_ r))) }

::std::option::Option::None { enum(_ enum(r r)) }

::std::option::Option::unwrap { fn(enum(::std::option::Option::unwrap::4 enum(_ w8)) w8) }

::std::option::Option::unwrap::4 { enum(w0 w0) }

