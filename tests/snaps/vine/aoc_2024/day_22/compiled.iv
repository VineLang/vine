
::std::logical::Option::None { enum(_ enum(n0 n0)) }

::std::numeric::N64::add { fn(tup(dup(@add(n0 n1) @n32_add_high(n2 n3)) @add(n4 @add(n3 n5))) fn(tup(dup(n0 n2) n4) tup(n1 n5))) }

::std::numeric::N64::sub { fn(tup(dup(@sub(n0 n1) @lt(n2 n3)) @sub(n4 @sub(n3 n5))) fn(tup(dup(n0 n2) n4) tup(n1 n5))) }

::std::numeric::N64::mul_n32_n32 { fn(dup(@mul(n0 n1) @n32_mul_high(n2 n3)) fn(dup(n0 n2) tup(n1 n3))) }

::std::ops::Ord::Lt { enum(n0 enum(_ enum(_ n0))) }

::std::ops::Ord::Eq { enum(_ enum(n0 enum(_ n0))) }

::std::ops::Ord::Gt { enum(_ enum(_ enum(n0 n0))) }

::std::IO::print_char { fn(ref(@io_print_char(n0 n1) n1) fn(n0 _)) }

::std::IO::read_byte { fn(ref(dup(n0 @io_read_byte(n1 dup(n2 @seq$(n0 n3)))) n3) fn(n1 n2)) }

::main { ::day_22::main }

::day_22::main {
  fn(ref(w1 w29) _)
  ::day_22::main::1 = x(x(w1 w42) x(x(::std::data::Map::empty w40) x(x(0 w38) 0)))
  ::std::numeric::N64::to_string::to_string = fn(w38 tup(@add(8 w43) tup(w44 w45)))
  ::std::IO::println = fn(ref(w42 w9) fn(tup(w43 tup(tup(80 tup(97 tup(114 tup(116 tup(32 tup(49 tup(58 tup(32 w44)))))))) w45)) _))
  ::std::data::Map::len = fn(ref(w40 w19) w21)
  ::std::numeric::N32::to_string::to_string = fn(w21 w22)
  ::std::IO::println = fn(ref(w9 w16) fn(w22 _))
  ::std::data::Map::into_iter = fn(w19 w26)
  ::day_22::main::15 = x(x(0 w50) w26)
  ::std::numeric::N32::to_string::to_string = fn(w50 tup(@add(8 w51) tup(w52 w53)))
  ::std::IO::println = fn(ref(w16 w29) fn(tup(w51 tup(tup(80 tup(97 tup(114 tup(116 tup(32 tup(50 tup(58 tup(32 w52)))))))) w53)) _))
}

::day_22::main::1 {
  x(x(w11 w18) w9)
  ::std::IO::read_line = fn(ref(w11 w1) enum(::day_22::main::4 enum(::day_22::main::5 x(x(w1 w18) w9))))
}

::day_22::main::4 {
  enum(w0 x(w8 x(x(w6 w42) x(x(w4 w40) dup34(w35 @add(1 w27))))))
  0 = tup(_ tup(w11 tup(w12 w13)))
  ::std::numeric::N32::parse = fn(w0 w16)
  ::std::logical::Option::unwrap = fn(w16 w17)
  ::day_22::main::6 = x(x(w6 w37) x(w35 x(w11 x(w12 x(w13 x(x(w17 w31) 0))))))
  ::std::numeric::N64::from_n32 = fn(w31 w23)
  ::std::numeric::N64::add = fn(w4 fn(w23 w24))
  ::day_22::main::1 = x(w8 x(x(w37 w42) x(x(w24 w40) w27)))
}

::day_22::main::5 { x(x(w6 w6) x(x(w4 w4) x(x(w2 w2) _))) }

::day_22::main::6 { x(w11 x(w9 x(w8 x(w7 x(w6 x(w5 x(dup56(@lt(2000 ?(::day_22::main::8 ::day_22::main::7 x(w11 x(w9 x(w8 x(w7 x(w6 x(w5 x(w13 w2))))))))) w13) w2))))))) }

::day_22::main::7 {
  x(x(w33 w54) x(dup61(w42 w52) x(w30 x(w29 x(w28 x(x(w27 w48) x(dup72(@le$(4 ?(::day_22::main::11 ::day_22::main::10 x(x(w33 w44) x(w42 x(w14 x(w40 x(w39 x(w38 x(w37 _))))))))) @add(1 w23)) w24)))))))
  ::day_22::evolve = fn(ref(w27 dup71(@rem(10 dup76(@sub(w24 w12) dup76(w19 w37))) w47)) _)
  tup(w30 tup(w29 tup(w28 w12))) = tup(w14 tup(dup64(w40 w51) tup(dup66(w39 w50) dup68(w38 w49))))
  ::day_22::main::6 = x(x(w44 w54) x(w52 x(w51 x(w50 x(w49 x(x(w47 w48) x(w23 w19)))))))
}

::day_22::main::8 { x(x(w9 w9) x(_ x(_ x(_ x(_ x(x(w3 w3) _)))))) }

::day_22::main::10 {
  x(x(w32 w1) x(dup82(w34 w42) x(@mul(20 @add(w28 @mul(20 @add(w27 @mul(20 @add(w26 w12)))))) x(w28 x(w27 x(w26 x(w25 w36)))))))
  1 = @sub$(0 w13)
  ::std::data::Map::get_or_insert::1 = fn(ref(w32 w1) fn(w12 fn(tup(0 w13) ref(tup(w17 dup91(@ne(w34 ?(::day_22::main::14 ::day_22::main::13 x(w42 x(w25 x(x(w17 w40) x(x(w37 w38) w36)))))) w37)) tup(w40 w38)))))
}

::day_22::main::11 { x(x(w8 w8) _) }

::day_22::main::13 { x(w11 x(w10 x(x(@add(w10 w2) w2) x(x(_ w11) _)))) }

::day_22::main::14 { x(_ x(_ x(x(w4 w4) x(x(w2 w2) _)))) }

::day_22::main::15 {
  x(w7 w5)
  ::std::data::Map::IntoIter::next = fn(ref(w5 w1) enum(::day_22::main::18 enum(::day_22::main::19 x(w7 w1))))
}

::day_22::main::18 {
  enum(tup(_ tup(w5 _)) x(x(w10 w17) w8))
  ::std::numeric::N32::max = fn(w10 fn(w5 w13))
  ::day_22::main::15 = x(x(w13 w17) w8)
}

::day_22::main::19 { x(x(w2 w2) _) }

::std::data::Map::get_or_insert::1 { fn(ref(tup(dup131(?(::std::data::Map::insert::1::3 ::std::data::Map::insert::1::2 x(x(n0 n1) x(x(n2 n3) x(n4 x(n5 enum(::std::logical::Option::unwrap_or::4 enum(::std::logical::Option::unwrap_or::5 x(n6 n7)))))))) n0) n2) tup(n1 n3)) fn(n4 fn(n6 ref(n7 n5)))) }

::std::data::Map::insert::1 { fn(ref(tup(dup131(?(::std::data::Map::insert::1::3 ::std::data::Map::insert::1::2 x(x(n0 n1) x(x(n2 n3) x(n4 x(n5 n6))))) n0) n2) tup(n1 n3)) fn(n4 fn(n5 n6))) }

::std::data::Map::insert::1::2 { x(n0 x(x(tup(n1 tup(tup(dup203(n2 dup203(n3 n4)) n5) n6)) n7) x(dup202(n8 dup202(@lt(n3 ?(::std::numeric::N32::ord::cmp::3 ::std::numeric::N32::ord::cmp::2 x(n9 x(n4 enum(::std::data::Map::insert::1::8 enum(::std::data::Map::insert::1::9 enum(::std::data::Map::insert::1::10 x(n0 x(x(tup(n10 tup(tup(n11 n12) n13)) n7) x(n8 x(n14 x(x(n1 n10) x(x(n2 n11) x(x(n5 n12) x(x(n6 n13) x(n15 _)))))))))))))))) n9)) x(n14 n15)))) }

::std::data::Map::insert::1::3 { x(x(_ 1) x(x(_ tup(::std::data::Map::empty tup(tup(n0 n1) ::std::data::Map::empty))) x(n0 x(n1 ::std::logical::Option::None)))) }

::std::data::Map::insert::1::8 { x(x(_ n0) x(x(tup(tup(dup1259(dup1252(n1 n2) @add(n3 @add(1 n0))) n4) tup(n5 tup(dup1260(dup1251(n6 @mul$(3 @add(2 @le$(n2 ?(::std::data::Map::balance_right::3 ::std::data::Map::balance_right::2 x(tup(n1 n4) x(n5 x(tup(n6 n7) n8)))))))) n3) n7))) n8) x(n9 x(n10 x(x(tup(dup131(?(::std::data::Map::insert::1::3 ::std::data::Map::insert::1::2 x(x(n11 n12) x(x(n13 n14) x(n9 x(n10 n15))))) n11) n13) tup(n12 n14)) x(x(n16 n16) x(x(n17 n17) x(x(n18 n18) x(n15 _))))))))) }

::std::data::Map::insert::1::9 { x(x(n0 n0) x(x(n1 n1) x(n2 x(n3 x(x(n4 n4) x(x(_ n2) x(x(n5 n3) x(x(n6 n6) x(enum(enum(n5 n7) enum(_ n7)) _))))))))) }

::std::data::Map::insert::1::10 { x(x(_ n0) x(x(tup(tup(dup1259(dup1251(n1 @mul$(3 @add(2 @le$(n2 ?(::std::data::Map::balance_left::3 ::std::data::Map::balance_left::2 x(tup(n1 n3) x(n4 x(tup(n5 n6) n7)))))))) @add(n8 @add(1 n0))) n3) tup(n4 tup(dup1260(dup1252(n5 n2) n8) n6))) n7) x(n9 x(n10 x(x(n11 n11) x(x(n12 n12) x(x(n13 n13) x(x(tup(dup131(?(::std::data::Map::insert::1::3 ::std::data::Map::insert::1::2 x(x(n14 n15) x(x(n16 n17) x(n9 x(n10 n18))))) n14) n16) tup(n15 n17)) x(n18 _))))))))) }

::std::numeric::N32::ord::cmp { fn(ref(dup202(n0 dup202(@lt(n1 ?(::std::numeric::N32::ord::cmp::3 ::std::numeric::N32::ord::cmp::2 x(n2 x(n3 n4)))) n2)) n0) fn(ref(dup203(n5 dup203(n1 n3)) n5) n4)) }

::std::numeric::N32::ord::cmp::2 { x(_ x(_ ::std::ops::Ord::Lt)) }

::std::numeric::N32::ord::cmp::3 { x(@lt$(n0 ?(::std::ops::Ord::Eq ::std::ops::Ord::Gt n1)) x(n0 n1)) }

::std::numeric::N64::to_string::to_string { fn(dup213(tup(@eq(0 ?(::std::numeric::N64::eq::3 ::std::numeric::N64::eq::2 x(n0 x(0 ?(::std::numeric::N64::to_string::to_string::3 ::std::numeric::N64::to_string::to_string::2 x(n1 n2)))))) n0) n1) n2) }

::std::numeric::N64::to_string::to_string::2 { x(_ tup(1 tup(tup(48 n0) n0))) }

::std::numeric::N64::to_string::to_string::3 { x(dup222(tup(@eq(0 ?(::std::numeric::N64::eq::3 ::std::numeric::N64::eq::2 x(n0 x(0 ?(::std::numeric::N64::to_string::to_string::6 ::std::numeric::N64::to_string::to_string::5 x(n1 x(tup(0 tup(n2 n2)) n3))))))) n0) n1) n3) }

::std::numeric::N64::to_string::to_string::4 { x(dup222(tup(@eq(0 ?(::std::numeric::N64::eq::3 ::std::numeric::N64::eq::2 x(n0 x(0 ?(::std::numeric::N64::to_string::to_string::6 ::std::numeric::N64::to_string::to_string::5 x(n1 n2)))))) n0) n1) n2) }

::std::numeric::N64::to_string::to_string::5 { x(_ x(n0 n0)) }

::std::numeric::N64::to_string::to_string::6 { x(tup(n0 dup1628(@div(10 n1) @rem(10 dup1629(@lt$(10 ?(::std::numeric::N64::div_rem_n32::3 ::std::numeric::N64::div_rem_n32::2 x(x(n2 dup1649(?(::std::numeric::N64::div_rem_n32::6 ::std::numeric::N64::div_rem_n32::5 x(x(n0 dup1627(@div(10 n3) @rem(10 @add$(48 n4)))) x(n5 x(10 x(0 @add(n3 dup222(@eq(0 ?(::std::numeric::N64::eq::3 ::std::numeric::N64::eq::2 x(n6 x(0 ?(::std::numeric::N64::to_string::to_string::6 ::std::numeric::N64::to_string::to_string::5 x(tup(n7 n8) x(tup(n9 tup(tup(n4 n10) n11)) n12))))))) n7))))))) n5)) x(10 x(x(n1 dup222(n6 n8)) _))))) n2)))) x(tup(@add$(1 n9) tup(n10 n11)) n12)) }

::std::numeric::N32::to_string::to_string { fn(dup233(?(::std::numeric::N32::to_string::to_string::3 ::std::numeric::N32::to_string::to_string::2 x(n0 n1)) n0) n1) }

::std::numeric::N32::to_string::to_string::2 { x(dup242(?(::std::numeric::N32::to_string::to_string::6 ::std::numeric::N32::to_string::to_string::5 x(n0 x(tup(0 tup(n1 n1)) n2))) n0) n2) }

::std::numeric::N32::to_string::to_string::3 { x(_ tup(1 tup(tup(48 n0) n0))) }

::std::numeric::N32::to_string::to_string::4 { x(dup242(?(::std::numeric::N32::to_string::to_string::6 ::std::numeric::N32::to_string::to_string::5 x(n0 n1)) n0) n1) }

::std::numeric::N32::to_string::to_string::5 { x(dup245(@rem(10 @add$(48 n0)) @div(10 dup242(?(::std::numeric::N32::to_string::to_string::6 ::std::numeric::N32::to_string::to_string::5 x(n1 x(tup(n2 tup(tup(n0 n3) n4)) n5))) n1))) x(tup(@add$(1 n2) tup(n3 n4)) n5)) }

::std::numeric::N32::to_string::to_string::6 { x(_ x(n0 n0)) }

::day_22::evolve { fn(ref(dup252(@n32_xor(n0 @n32_and(16777215 dup253(@n32_xor(n1 @n32_and(16777215 dup254(@n32_xor(n2 @n32_and(16777215 n3)) @n32_shl(11 n2)))) @n32_shr(5 n1)))) @n32_shl(6 n0)) n3) _) }

::std::data::List::pop_front { fn(ref(tup(dup349(?(::std::data::List::pop_front::3 ::std::data::List::pop_front::2 x(x(n0 n1) x(x(n2 n3) n4))) n0) tup(n2 n5)) tup(n1 tup(n3 n5))) n4) }

::std::data::List::pop_front::2 { x(x(@sub(1 n0) n0) x(x(tup(n1 n2) n2) enum(enum(n1 n3) enum(_ n3)))) }

::std::data::List::pop_front::3 { x(x(n0 n0) x(x(n1 n1) ::std::logical::Option::None)) }

::std::data::List::concat { fn(tup(@add(n0 n1) tup(n2 n3)) fn(tup(n0 tup(n3 n4)) tup(n1 tup(n2 n4)))) }

::std::data::List::push_front { fn(ref(tup(@add$(1 n0) tup(n1 n2)) tup(n0 tup(tup(n3 n1) n2))) fn(n3 _)) }

::std::data::Map::empty { tup(0 _) }

::std::data::Map::new { fn(tup(dup979(n0 @add(n1 @add(1 n2))) n3) fn(n4 fn(tup(dup979(n5 n1) n6) tup(n2 tup(tup(n0 n3) tup(n4 tup(n5 n6))))))) }

::std::data::Map::len { fn(ref(tup(dup979(n0 n1) n2) tup(n0 n2)) n1) }

::std::data::Map::into_iter { fn(n0 tup(n0 tup(0 tup(n1 n1)))) }

::std::data::Map::IntoIter::next { fn(ref(tup(tup(?(::std::data::Map::IntoIter::next::4 ::std::data::Map::IntoIter::next::3 x(x(_ n0) x(x(n1 tup(dup349(?(::std::data::List::pop_front::3 ::std::data::List::pop_front::2 x(x(n2 n3) x(x(n4 n5) enum(::std::data::Map::IntoIter::next::8 enum(::std::data::Map::IntoIter::next::9 x(x(n0 n6) n7)))))) n2) tup(n4 n8))) x(n9 _)))) n9) n1) tup(n6 tup(n3 tup(n5 n8)))) n7) }

::std::data::Map::IntoIter::next::1 { x(x(tup(?(::std::data::Map::IntoIter::next::4 ::std::data::Map::IntoIter::next::3 x(x(_ n0) x(n1 x(n2 n3)))) n2) n0) x(n1 n3)) }

::std::data::Map::IntoIter::next::3 { x(x(_ n0) x(x(tup(@add$(1 n1) tup(n2 n3)) n4) x(tup(tup(?(::std::data::Map::IntoIter::next::4 ::std::data::Map::IntoIter::next::3 x(x(_ n0) x(x(tup(n1 tup(tup(n5 n2) n3)) n4) x(n6 n7)))) n6) n5) n7))) }

::std::data::Map::IntoIter::next::4 { x(x(n0 n0) x(x(n1 n1) _)) }

::std::data::Map::IntoIter::next::8 { enum(tup(n0 n1) x(x(_ n1) enum(enum(n0 n2) enum(_ n2)))) }

::std::data::Map::IntoIter::next::9 { x(x(n0 n0) ::std::logical::Option::None) }

::std::data::Map::balance_left { fn(ref(tup(tup(dup1251(n0 @mul$(3 @add(2 @le$(n1 ?(::std::data::Map::balance_left::3 ::std::data::Map::balance_left::2 x(tup(n0 n2) x(n3 x(tup(n4 n5) n6)))))))) n2) tup(n3 tup(dup1252(n4 n1) n5))) n6) _) }

::std::data::Map::balance_left::2 { x(n0 x(n1 x(n2 tup(n0 tup(n1 n2))))) }

::std::data::Map::balance_left::3 { x(n0 x(n1 x(tup(_ tup(tup(dup1255(n2 @le(n3 ?(::std::data::Map::balance_left::6 ::std::data::Map::balance_left::5 x(n0 x(n1 x(tup(n2 n4) x(n5 x(tup(n6 n7) n8)))))))) n4) tup(n5 tup(dup1256(n6 @mul$(2 n3)) n7)))) n8))) }

::std::data::Map::balance_left::5 { x(tup(dup979(n0 @add(n1 @add(1 n2))) n3) x(n4 x(tup(dup979(n5 n1) n6) x(n7 x(n8 tup(tup(n2 tup(tup(n0 n3) tup(n4 tup(n5 n6)))) tup(n7 n8))))))) }

::std::data::Map::balance_left::6 { x(tup(dup979(n0 @add(n1 @add(1 n2))) n3) x(n4 x(tup(_ tup(tup(dup979(n5 n1) n6) tup(n7 tup(dup979(n8 @add(n9 @add(1 n10))) n11)))) x(n12 x(tup(dup979(n13 n9) n14) tup(tup(n2 tup(tup(n0 n3) tup(n4 tup(n5 n6)))) tup(n7 tup(n10 tup(tup(n8 n11) tup(n12 tup(n13 n14))))))))))) }

::std::data::Map::balance_right { fn(ref(tup(tup(dup1252(n0 n1) n2) tup(n3 tup(dup1251(n4 @mul$(3 @add(2 @le$(n1 ?(::std::data::Map::balance_right::3 ::std::data::Map::balance_right::2 x(tup(n0 n2) x(n3 x(tup(n4 n5) n6)))))))) n5))) n6) _) }

::std::data::Map::balance_right::2 { x(n0 x(n1 x(n2 tup(n0 tup(n1 n2))))) }

::std::data::Map::balance_right::3 { x(tup(_ tup(tup(dup1256(n0 @mul$(2 n1)) n2) tup(n3 tup(dup1255(n4 @le(n1 ?(::std::data::Map::balance_right::6 ::std::data::Map::balance_right::5 x(n5 x(n6 x(tup(n0 n2) x(n3 x(tup(n4 n7) n8)))))))) n7)))) x(n5 x(n6 n8))) }

::std::data::Map::balance_right::5 { x(n0 x(tup(dup979(n1 n2) n3) x(n4 x(n5 x(tup(dup979(n6 @add(n2 @add(1 n7))) n8) tup(n4 tup(n5 tup(n7 tup(tup(n6 n8) tup(n0 tup(n1 n3))))))))))) }

::std::data::Map::balance_right::6 { x(n0 x(tup(dup979(n1 n2) n3) x(tup(dup979(n4 @add(n5 @add(1 n6))) n7) x(n8 x(tup(_ tup(tup(dup979(n9 n5) n10) tup(n11 tup(dup979(n12 @add(n2 @add(1 n13))) n14)))) tup(tup(n6 tup(tup(n4 n7) tup(n8 tup(n9 n10)))) tup(n11 tup(n13 tup(tup(n12 n14) tup(n0 tup(n1 n3))))))))))) }

::std::data::Map::is_balanced { fn(ref(tup(dup1251(n0 @mul$(3 @add(2 @le$(n1 n2)))) n3) tup(n0 n3)) fn(ref(tup(dup1252(n4 n1) n5) tup(n4 n5)) n2)) }

::std::data::Map::is_single { fn(ref(tup(dup1255(n0 @le(n1 n2)) n3) tup(n0 n3)) fn(ref(tup(dup1256(n4 @mul$(2 n1)) n5) tup(n4 n5)) n2)) }

::std::data::Map::size { fn(ref(tup(tup(dup1259(n0 @add(n1 @add(1 n2))) n3) tup(n4 tup(dup1260(n5 n1) n6))) tup(tup(n0 n3) tup(n4 tup(n5 n6)))) n2) }

::std::logical::Option::unwrap_or { fn(enum(::std::logical::Option::unwrap_or::4 enum(::std::logical::Option::unwrap_or::5 x(n0 n1))) fn(n0 n1)) }

::std::logical::Option::unwrap_or::4 { enum(n0 x(_ n0)) }

::std::logical::Option::unwrap_or::5 { x(n0 n0) }

::std::logical::Option::unwrap { fn(enum(::std::logical::Option::unwrap::3 enum(_ n0)) n0) }

::std::logical::Option::unwrap::3 { enum(n0 n0) }

::std::numeric::N32::parse { fn(tup(dup1432(?(::std::numeric::N32::parse::3 ::std::numeric::N32::parse::2 x(n0 x(n1 n2))) n0) tup(n1 _)) n2) }

::std::numeric::N32::parse::2 { x(dup1442(?(::std::numeric::N32::parse::6 ::std::numeric::N32::parse::5 x(n0 x(n1 x(0 n2)))) n0) x(n1 n2)) }

::std::numeric::N32::parse::3 { x(_ x(_ ::std::logical::Option::None)) }

::std::numeric::N32::parse::4 { x(dup1442(?(::std::numeric::N32::parse::6 ::std::numeric::N32::parse::5 x(n0 n1)) n0) n1) }

::std::numeric::N32::parse::5 { x(n0 x(tup(dup1451(dup1446(@le$(48 @n32_and(n1 ?(::std::numeric::N32::parse::9 ::std::numeric::N32::parse::8 x(n0 x(n2 x(n3 x(n4 n5))))))) @le(57 n1)) n4) n2) x(n3 n5))) }

::std::numeric::N32::parse::6 { x(_ x(_ x(n0 enum(enum(n0 n1) enum(_ n1))))) }

::std::numeric::N32::parse::8 { x(@sub(1 dup1442(?(::std::numeric::N32::parse::6 ::std::numeric::N32::parse::5 x(n0 x(n1 x(n2 n3)))) n0)) x(n1 x(@mul(10 @add(n4 n2)) x(@sub(48 n4) n3)))) }

::std::numeric::N32::parse::9 { x(_ x(_ x(_ x(_ ::std::logical::Option::None)))) }

::std::numeric::N32::parse::10 { x(n0 n0) }

::std::numeric::N32::max { fn(dup1485(@lt$(n0 ?(::std::numeric::N32::max::3 ::std::numeric::N32::max::2 x(n1 x(n2 n3)))) n1) fn(dup1486(n0 n2) n3)) }

::std::numeric::N32::max::2 { x(n0 x(_ n0)) }

::std::numeric::N32::max::3 { x(_ x(n0 n0)) }

::std::numeric::N64::from_n32 { fn(n0 tup(n0 0)) }

::std::numeric::N64::div_rem_n32 { fn(tup(n0 dup1628(@div(n1 n2) @rem(n3 dup1629(@lt$(n4 ?(::std::numeric::N64::div_rem_n32::3 ::std::numeric::N64::div_rem_n32::2 x(x(n5 dup1649(?(::std::numeric::N64::div_rem_n32::6 ::std::numeric::N64::div_rem_n32::5 x(x(n0 dup1627(@div(n6 n7) @rem(n8 n9))) x(n10 x(n11 x(0 @add(n7 n12)))))) n10)) x(n13 x(x(n2 n14) _))))) n5)))) fn(dup1631(n1 dup1631(n3 dup1631(n4 dup1631(n13 dup1631(n11 dup1631(n6 n8)))))) tup(tup(n12 n14) n9))) }

::std::numeric::N64::div_rem_n32::2 { x(x(dup1641(@div(n0 n1) @rem(n2 n3)) n3) x(dup1642(n0 n2) x(x(_ n1) _))) }

::std::numeric::N64::div_rem_n32::3 { x(x(n0 n0) x(_ x(x(n1 n1) _))) }

::std::numeric::N64::div_rem_n32::4 { x(n0 x(dup1649(?(::std::numeric::N64::div_rem_n32::6 ::std::numeric::N64::div_rem_n32::5 x(n0 x(n1 n2))) n1) n2)) }

::std::numeric::N64::div_rem_n32::5 { x(x(dup(@sub(n0 n1) @lt(n2 n3)) n4) x(dup1656(n5 @sub(n6 @sub(n3 dup1649(?(::std::numeric::N64::div_rem_n32::6 ::std::numeric::N64::div_rem_n32::5 x(x(n1 n4) x(n7 x(n8 x(n9 n10))))) n7)))) x(dup1658(@div$(4294967295 @mul(n5 dup1662(n11 dup(@mul(n12 dup(n0 n2)) @n32_mul_high(n13 n6))))) dup1658(dup(n12 n13) n8)) x(@add(n11 n9) n10)))) }

::std::numeric::N64::div_rem_n32::6 { x(x(n0 n0) x(_ x(_ x(n1 n1)))) }

::std::numeric::N64::eq { fn(tup(@eq(n0 ?(::std::numeric::N64::eq::3 ::std::numeric::N64::eq::2 x(n1 x(n2 n3)))) n1) fn(tup(n0 n2) n3)) }

::std::numeric::N64::eq::2 { x(@eq(n0 ?(0 1 n1)) x(n0 n1)) }

::std::numeric::N64::eq::3 { x(_ x(_ 0)) }

::std::IO::println { fn(ref(n0 n1) fn(tup(dup2382(?(::std::IO::print::3 ::std::IO::print::2 x(x(n0 @io_print_char(10 n1)) x(n2 n3))) n2) tup(n3 _)) _)) }

::std::IO::print { fn(ref(n0 n1) fn(tup(dup2382(?(::std::IO::print::3 ::std::IO::print::2 x(x(n0 n1) x(n2 n3))) n2) tup(n3 _)) _)) }

::std::IO::print::1 { x(n0 x(dup2382(?(::std::IO::print::3 ::std::IO::print::2 x(n0 x(n1 n2))) n1) n2)) }

::std::IO::print::2 { x(x(@io_print_char(n0 n1) n2) x(@sub(1 dup2382(?(::std::IO::print::3 ::std::IO::print::2 x(x(n1 n2) x(n3 n4))) n3)) tup(n0 n4))) }

::std::IO::print::3 { x(x(n0 n0) _) }

::std::IO::read_line { fn(ref(dup(n0 @io_read_byte(0 dup(dup2425(@ne(0 ?(::std::IO::read_line::3 ::std::IO::read_line::2 x(x(n1 n2) x(n3 n4)))) n3) @seq$(n0 n1)))) n2) n4) }

::std::IO::read_line::2 { x(n0 x(dup2431(@eq(10 ?(::std::IO::read_line::6 ::std::IO::read_line::5 x(n0 x(n1 n2)))) n1) enum(enum(n2 n3) enum(_ n3)))) }

::std::IO::read_line::3 { x(x(n0 n0) x(_ ::std::logical::Option::None)) }

::std::IO::read_line::5 { x(x(n0 n0) x(_ tup(0 tup(n1 n1)))) }

::std::IO::read_line::6 { x(x(dup(n0 @io_read_byte(10 dup(dup2448(@ne(10 ?(::std::IO::read_line::10 ::std::IO::read_line::9 x(x(n1 n2) x(n3 x(x(tup(1 tup(tup(n4 n5) n5)) n6) _))))) n3) @seq$(n0 n1)))) n2) x(n4 n6)) }

::std::IO::read_line::7 { x(x(dup(n0 @io_read_byte(10 dup(dup2448(@ne(10 ?(::std::IO::read_line::10 ::std::IO::read_line::9 x(x(n1 n2) x(n3 n4)))) n3) @seq$(n0 n1)))) n2) n4) }

::std::IO::read_line::9 { x(x(dup(n0 @io_read_byte(10 dup(dup2448(@ne(10 ?(::std::IO::read_line::10 ::std::IO::read_line::9 x(x(n1 n2) x(n3 x(x(tup(n4 tup(n5 n6)) n7) n8))))) n3) @seq$(n0 n1)))) n2) x(n9 x(x(tup(@add(1 n4) tup(n5 tup(n9 n6))) n7) n8))) }

::std::IO::read_line::10 { x(x(n0 n0) x(_ x(x(n1 n1) _))) }

