
::main { ::day_21::main }

::day_21::main {
  fn(ref(w3 w37) _)
  ::std::io::IO::full_input = fn(ref(w3 w8) w10)
  ::std::list::List::split_trim = fn(w10 fn(tup(1 tup(tup(10 w44) w44)) dup5(w15 w33)))
  ::std::list::List::into_iter = fn(w15 w16)
  ::day_21::main::2 = x(x(0 w47) w16)
  ::std::n32::N32::to_string = fn(w47 w23)
  ::std::list::List::concat = fn(tup(8 tup(tup(80 tup(97 tup(114 tup(116 tup(32 tup(49 tup(58 tup(32 w48)))))))) w48)) fn(w23 w24))
  ::std::io::IO::println = fn(ref(w8 w19) fn(w24 _))
  ::day_21::main::8 = x(x(::day_21::base_cost_func w51) 0)
  ::day_21::cost_func = fn(w51 fn(12 fn(0 w30)))
  ::std::list::List::into_iter = fn(w33 w34)
  ::day_21::main::11 = x(w30 x(x(0 w54) w34))
  ::std::n64::N64::to_string = fn(w54 w41)
  ::std::list::List::concat = fn(tup(8 tup(tup(80 tup(97 tup(114 tup(116 tup(32 tup(50 tup(58 tup(32 w56)))))))) w56)) fn(w41 w42))
  ::std::io::IO::println = fn(ref(w19 w37) fn(w42 _))
}

::day_21::main::2 {
  x(w7 w5)
  ::std::list::List::IntoIter::next = fn(ref(w5 w1) enum(::day_21::main::5 enum(::day_21::main::6 x(w7 w1))))
}

::day_21::main::5 {
  enum(dup28(w32 dup28(w34 dup28(w36 dup28(w38 w17)))) x(x(@add(w28 w30) w42) w2))
  ::day_21::main::7 = x(w32 fn(0 w6))
  ::day_21::main::7 = x(w34 fn(1 w8))
  ::std::n32::N32::min = fn(w6 fn(w8 w9))
  ::day_21::main::7 = x(w36 fn(2 w11))
  ::std::n32::N32::min = fn(w9 fn(w11 w12))
  ::day_21::main::7 = x(w38 fn(3 w14))
  ::std::n32::N32::min = fn(w12 fn(w14 w15))
  ::std::list::List::split_once = fn(w17 fn(tup(1 tup(tup(65 w39) w39)) tup(w20 _)))
  ::std::n32::N32::parse = fn(w20 w23)
  ::std::option::Option::unwrap = fn(w23 @mul(w15 w28))
  ::day_21::main::2 = x(x(w30 w42) w2)
}

::day_21::main::6 { x(x(w2 w2) _) }

::day_21::main::7 {
  x(w18 fn(w0 w16))
  ::day_21::control_string = fn(65 fn(w18 fn(w0 fn(::day_21::control_numeric w5))))
  ::day_21::control_string = fn(65 fn(w5 fn(0 fn(::day_21::control_directional w8))))
  ::day_21::control_string = fn(65 fn(w8 fn(0 fn(::day_21::control_directional w11))))
  ::std::list::List::len = fn(ref(w11 _) w16)
}

::day_21::main::8 { x(w4 dup47(@lt(25 ?(::day_21::main::10 ::day_21::main::9 x(w4 w5))) w5)) }

::day_21::main::9 {
  x(x(w7 w10) @add(1 w4))
  ::day_21::cost_func = fn(w7 fn(6 fn(1 w1)))
  ::day_21::main::8 = x(x(w1 w10) w4)
}

::day_21::main::10 { x(x(w2 w2) _) }

::day_21::main::11 {
  x(w8 x(w7 w5))
  ::std::list::List::IntoIter::next = fn(ref(w5 w1) enum(::day_21::main::14 enum(::day_21::main::15 x(w8 x(w7 w1)))))
}

::day_21::main::14 {
  enum(dup66(w6 w29) x(w5 x(x(w4 w35) w2)))
  ::day_21::main::16 = x(x(w5 w31) x(w29 x(x(0 w28) 2)))
  ::std::list::List::split_once = fn(w6 fn(tup(1 tup(tup(65 w32) w32)) tup(w13 _)))
  ::std::n32::N32::parse = fn(w13 w16)
  ::std::option::Option::unwrap = fn(w16 w17)
  ::std::n64::N64::from_n32 = fn(w17 w22)
  ::std::n64::N64::mul = fn(w28 fn(w22 w23))
  ::std::n64::N64::add = fn(w4 fn(w23 w24))
  ::day_21::main::11 = x(w31 x(x(w24 w35) w2))
}

::day_21::main::15 { x(_ x(x(w2 w2) _)) }

::day_21::main::16 {
  x(w10 x(w8 w7))
  ::std::list::List::pop_front = fn(ref(w8 w1) enum(::day_21::main::19 enum(::day_21::main::20 x(w10 x(w1 w7)))))
}

::day_21::main::19 {
  enum(w0 x(x(w7 w43) x(w5 x(x(w4 w40) w2))))
  ::std::array::Array::get = fn(ref(w7 w14) fn(w2 w18))
  ::std::array::Array::get = fn(w18 fn(w21 ref(dup83(w25 w24) w24)))
  ::std::n64::N64::add = fn(w4 fn(w25 w26))
  ::day_21::main::16 = x(x(w14 w43) x(w5 x(x(w26 w40) w28)))
  fn(dup94(@eq(48 ?(::day_21::main::24 ::day_21::main::23 x(w37 w36))) w37) w36) = fn(w0 dup95(w21 w28))
}

::day_21::main::20 { x(x(w5 w5) x(_ x(x(w2 w2) _))) }

::day_21::main::23 { x(_ 1) }

::day_21::main::24 { x(dup103(@eq(65 ?(::day_21::main::27 ::day_21::main::26 x(w6 w5))) w6) w5) }

::day_21::main::26 { x(_ 2) }

::day_21::main::27 { x(@sub(49 @add(3 w2)) w2) }

::day_21::control_string {
  fn(w2 fn(w3 fn(w4 fn(w5 w13))))
  ::day_21::control_string::2 = x(w2 x(w3 x(w4 x(w5 x(tup(0 tup(w11 w11)) w13)))))
}

::day_21::control_string::2 {
  x(w10 x(w9 w8))
  ::std::list::List::pop_front = fn(ref(w9 w1) enum(::day_21::control_string::5 enum(::day_21::control_string::6 x(w10 x(w1 w8)))))
}

::day_21::control_string::5 {
  enum(dup135(w10 w17) x(w7 x(w6 x(dup129(@n32_and(1 @ne(0 w13)) @div(2 w20)) x(dup131(fn(w7 fn(w10 fn(w13 w14))) w23) x(w3 w22))))))
  ::std::list::List::concat = fn(w3 fn(w14 w16))
  ::day_21::control_string::2 = x(w17 x(w6 x(w20 x(w23 x(w16 w22)))))
}

::day_21::control_string::6 { x(_ x(_ x(_ x(_ x(w1 w1))))) }

::day_21::control_numeric {
  fn(w2 fn(w3 fn(?(::day_21::control_numeric::11 ::day_21::control_numeric::10 x(w58 x(w57 x(w56 x(w55 dup140(?(::day_21::control_numeric::26 ::day_21::control_numeric::25 x(w65 x(w64 x(x(tup(0 tup(w59 w59)) w63) _)))) ?(::day_21::control_numeric::29 ::day_21::control_numeric::28 x(w71 x(w70 x(x(w45 w69) _)))))))))) w49)))
  ::day_21::pos_diff = fn(w34 fn(w35 w36))
  ::std::list::List::new = fn(w36 fn(118 w37))
  ::std::list::List::concat = fn(w63 fn(w37 w39))
  ::day_21::pos_diff = fn(w40 fn(w41 w42))
  ::std::list::List::new = fn(w42 fn(94 w43))
  ::std::list::List::concat = fn(w39 fn(w43 w45))
  ::std::list::List::concat = fn(w69 fn(tup(1 tup(tup(65 w72) w72)) w49))
  tup(0 tup(w50 w50)) = _
  ::day_21::control_numeric::2 = fn(w2 dup142(@rem(3 dup144(w58 dup144(w65 w71))) @div(3 dup145(w57 dup145(w34 w41)))))
  ::day_21::control_numeric::2 = fn(w3 dup143(@rem(3 dup146(w56 dup146(w64 w70))) @div(3 dup147(w55 dup147(w35 w40)))))
}

::day_21::control_numeric::2 { fn(dup161(@eq(48 ?(::day_21::control_numeric::5 ::day_21::control_numeric::4 x(w8 w7))) w8) w7) }

::day_21::control_numeric::4 { x(_ 1) }

::day_21::control_numeric::5 { x(dup166(@eq(65 ?(::day_21::control_numeric::8 ::day_21::control_numeric::7 x(w6 w5))) w6) w5) }

::day_21::control_numeric::7 { x(_ 2) }

::day_21::control_numeric::8 { x(@sub(49 @add(3 w2)) w2) }

::day_21::control_numeric::10 {
  x(_ x(w3 x(w2 x(_ w5))))
  ::day_21::control_numeric::17 = x(w3 x(w2 w5))
}

::day_21::control_numeric::11 { x(?(::day_21::control_numeric::13 ::day_21::control_numeric::12 w4) w4) }

::day_21::control_numeric::12 { x(_ x(_ x(_ 0))) }

::day_21::control_numeric::13 { x(w4 x(w3 x(?(::day_21::control_numeric::17 ::day_21::control_numeric::14 x(w4 x(w3 w5))) w5))) }

::day_21::control_numeric::14 { x(_ x(_ 0)) }

::day_21::control_numeric::17 { x(?(::day_21::control_numeric::19 ::day_21::control_numeric::18 w2) w2) }

::day_21::control_numeric::18 { x(_ 1) }

::day_21::control_numeric::19 { x(?(0 1 w3) w3) }

::day_21::control_numeric::25 {
  x(dup200(w1 w6) x(dup201(w0 w7) x(x(w14 w11) _)))
  ::day_21::pos_diff = fn(w0 fn(w1 w2))
  ::std::list::List::new = fn(w2 fn(62 w3))
  ::std::list::List::concat = fn(w14 fn(w3 w5))
  ::day_21::pos_diff = fn(w6 fn(w7 w8))
  ::std::list::List::new = fn(w8 fn(60 w9))
  ::std::list::List::concat = fn(w5 fn(w9 w11))
}

::day_21::control_numeric::26 { x(_ x(_ x(x(w2 w2) _))) }

::day_21::control_numeric::28 { x(_ x(_ x(x(w2 w2) _))) }

::day_21::control_numeric::29 {
  x(dup210(w1 w6) x(dup211(w0 w7) x(x(w14 w11) _)))
  ::day_21::pos_diff = fn(w0 fn(w1 w2))
  ::std::list::List::new = fn(w2 fn(62 w3))
  ::std::list::List::concat = fn(w14 fn(w3 w5))
  ::day_21::pos_diff = fn(w6 fn(w7 w8))
  ::std::list::List::new = fn(w8 fn(60 w9))
  ::std::list::List::concat = fn(w5 fn(w9 w11))
}

::day_21::control_directional {
  fn(w2 fn(w3 fn(_ w56)))
  ::day_21::pos_diff = fn(w30 fn(w31 w32))
  ::std::list::List::new = fn(w32 fn(118 w33))
  ::std::list::List::concat = fn(tup(0 tup(w60 w60)) fn(w33 w35))
  ::day_21::pos_diff = fn(w36 fn(w37 w38))
  ::std::list::List::new = fn(w38 fn(60 w39))
  ::std::list::List::concat = fn(w35 fn(w39 w41))
  ::day_21::pos_diff = fn(w42 fn(w43 w44))
  ::std::list::List::new = fn(w44 fn(62 w45))
  ::std::list::List::concat = fn(w41 fn(w45 w47))
  ::day_21::pos_diff = fn(w48 fn(w49 w50))
  ::std::list::List::new = fn(w50 fn(94 w51))
  ::std::list::List::concat = fn(w47 fn(w51 w53))
  ::std::list::List::concat = fn(w53 fn(tup(1 tup(tup(65 w61) w61)) w56))
  tup(0 tup(w57 w57)) = _
  ::day_21::control_directional::2 = fn(w2 dup218(@rem(3 dup220(w36 w43)) @div(3 dup221(w30 w49))))
  ::day_21::control_directional::2 = fn(w3 dup219(@rem(3 dup222(w37 w42)) @div(3 dup223(w31 w48))))
}

::day_21::control_directional::2 { fn(dup234(@eq(60 ?(::day_21::control_directional::5 ::day_21::control_directional::4 x(w8 w7))) w8) w7) }

::day_21::control_directional::4 { x(_ 0) }

::day_21::control_directional::5 { x(dup239(@eq(118 ?(::day_21::control_directional::8 ::day_21::control_directional::7 x(w6 w5))) w6) w5) }

::day_21::control_directional::7 { x(_ 1) }

::day_21::control_directional::8 { x(dup243(@eq(62 ?(::day_21::control_directional::11 ::day_21::control_directional::10 x(w6 w5))) w6) w5) }

::day_21::control_directional::10 { x(_ 2) }

::day_21::control_directional::11 { x(@eq(94 ?(5 4 w5)) w5) }

::day_21::pos_diff { fn(dup252(w8 w12) fn(dup253(@lt$(w8 ?(::day_21::pos_diff::4 ::day_21::pos_diff::3 x(w12 x(w11 w10)))) w11) w10)) }

::day_21::pos_diff::3 { x(_ x(_ 0)) }

::day_21::pos_diff::4 { x(@sub(w4 w2) x(w4 w2)) }

::day_21::base_cost_func {
  w5
  ::std::array::Array::new = fn(6 fn(::std::n64::N64::one w4))
  ::std::array::Array::new = fn(6 fn(w4 w5))
}

::day_21::cost_func {
  fn(w2 fn(dup266(w7 dup266(w8 w18)) fn(w4 w16)))
  ::std::array::Array::new = fn(w8 fn(_ w9))
  ::std::array::Array::new = fn(w7 fn(w9 w10))
  ::day_21::cost_func::2 = x(w2 x(w18 x(w4 x(x(w10 w16) 0))))
}

::day_21::cost_func::2 { x(w8 x(dup275(w1 w13) x(w6 x(w5 dup279(@lt(w1 ?(::day_21::cost_func::4 ::day_21::cost_func::3 x(w8 x(w13 x(w6 x(w5 w9)))))) w9))))) }

::day_21::cost_func::3 {
  x(w8 x(dup282(w14 w21) x(dup283(w13 w20) x(x(w5 w19) dup287(w10 @add(1 w2))))))
  ::day_21::cost_func::5 = x(x(w8 w16) x(w14 x(w13 x(x(w5 w12) x(w10 0)))))
  ::day_21::cost_func::2 = x(w16 x(w21 x(w20 x(x(w12 w19) w2))))
}

::day_21::cost_func::4 { x(_ x(_ x(_ x(x(w2 w2) _)))) }

::day_21::cost_func::5 { x(w10 x(dup293(w1 w16) x(w7 x(w6 x(w4 dup298(@lt(w1 ?(::day_21::cost_func::7 ::day_21::cost_func::6 x(w10 x(w16 x(w7 x(w6 x(w4 w11))))))) w11)))))) }

::day_21::cost_func::6 {
  x(x(w28 w48) x(w26 x(dup304(w32 dup304(w38 w45)) x(x(w24 w44) x(dup308(w31 dup308(w37 dup308(w10 w42))) dup309(w30 dup309(w36 dup309(w15 @add(1 w20)))))))))
  ::day_21::cost_func::8 = x(x(w28 w34) x(w32 x(w31 x(w30 fn(1 w1)))))
  ::day_21::cost_func::8 = x(x(w34 w40) x(w38 x(w37 x(w36 fn(0 w3)))))
  ::std::n64::N64::min = fn(w1 fn(w3 w4))
  ::std::array::Array::get = fn(ref(w24 w8) fn(w10 w12))
  ::std::array::Array::get = fn(w12 fn(w15 ref(_ w4)))
  ::day_21::cost_func::5 = x(x(w40 w48) x(w26 x(w45 x(x(w8 w44) x(w42 w20)))))
}

::day_21::cost_func::7 { x(x(w7 w7) x(_ x(_ x(x(w3 w3) _)))) }

::day_21::cost_func::8 {
  x(x(w28 w54) x(w26 x(dup320(@rem(3 dup326(w34 w43)) @div(3 dup327(w33 w42))) x(dup321(@rem(3 dup328(w32 w41)) @div(3 dup329(w31 w40))) fn(?(::day_21::cost_func::26 ::day_21::cost_func::25 x(w26 x(w34 x(w33 x(w32 x(w31 ?(::day_21::cost_func::41 ::day_21::cost_func::40 x(x(w28 w47) x(x(0 w45) x(w43 x(w42 x(w41 x(w40 x(x(5 w39) _)))))))))))))) w52)))))
  ::day_21::cost_func::9 = x(x(w47 w54) x(x(w45 w52) x(x(w39 _) fn(5 _))))
}

::day_21::cost_func::9 {
  x(x(w27 w5) x(x(w25 w17) x(x(w23 w19) fn(dup345(w12 w19) _))))
  ::std::array::Array::get = fn(ref(w27 w5) fn(w23 w9))
  ::std::array::Array::get = fn(w9 fn(w12 ref(dup338(w16 w15) w15)))
  ::std::n64::N64::add = fn(w25 fn(w16 w17))
}

::day_21::cost_func::10 {
  x(x(w10 w27) x(x(w8 w25) x(w6 x(dup356(w13 w22) x(x(w4 w21) _)))))
  ::day_21::cost_func::11 = x(x(w10 w19) x(x(w8 w17) x(x(w6 w15) x(w13 x(w4 w12)))))
  ::day_21::cost_func::14 = x(x(w19 w27) x(x(w17 w25) x(w15 x(w22 x(w12 w21)))))
}

::day_21::cost_func::11 { x(w11 x(w9 x(x(dup367(@lt(w1 ?(::day_21::cost_func::13 ::day_21::cost_func::12 x(w11 x(w9 x(x(w15 w16) x(w14 w4)))))) w15) w16) x(dup368(w1 w14) w4)))) }

::day_21::cost_func::12 {
  x(x(w12 w28) x(x(w10 w26) x(x(@add(1 w3) w24) x(w6 x(w5 w21)))))
  ::day_21::cost_func::9 = x(x(w12 w19) x(x(w10 w17) x(x(w5 w15) fn(2 _))))
  ::day_21::cost_func::11 = x(x(w19 w28) x(x(w17 w26) x(x(w3 w24) x(w6 x(w15 w21)))))
}

::day_21::cost_func::13 { x(x(w8 w8) x(x(w6 w6) x(x(w4 w4) x(_ x(w1 w1))))) }

::day_21::cost_func::14 { x(w10 x(w8 x(dup393(@lt$(w1 ?(::day_21::cost_func::16 ::day_21::cost_func::15 x(w10 x(w8 x(w14 x(w13 w4)))))) w14) x(dup394(w1 w13) w4)))) }

::day_21::cost_func::15 {
  x(x(w11 w26) x(x(w9 w24) x(@sub(1 w3) x(w6 x(w5 w20)))))
  ::day_21::cost_func::9 = x(x(w11 w18) x(x(w9 w16) x(x(w5 w14) fn(0 _))))
  ::day_21::cost_func::14 = x(x(w18 w26) x(x(w16 w24) x(w3 x(w6 x(w14 w20)))))
}

::day_21::cost_func::16 { x(x(w7 w7) x(x(w5 w5) x(_ x(_ x(w1 w1))))) }

::day_21::cost_func::17 {
  x(x(w10 w27) x(x(w8 w25) x(w6 x(dup421(w13 w22) x(x(w4 w21) _)))))
  ::day_21::cost_func::18 = x(x(w10 w19) x(x(w8 w17) x(x(w6 w15) x(w13 x(w4 w12)))))
  ::day_21::cost_func::21 = x(x(w19 w27) x(x(w17 w25) x(w15 x(w22 x(w12 w21)))))
}

::day_21::cost_func::18 { x(w11 x(w9 x(x(dup432(@lt(w1 ?(::day_21::cost_func::20 ::day_21::cost_func::19 x(w11 x(w9 x(x(w15 w16) x(w14 w4)))))) w15) w16) x(dup433(w1 w14) w4)))) }

::day_21::cost_func::19 {
  x(x(w12 w28) x(x(w10 w26) x(x(@add(1 w3) w24) x(w6 x(w5 w21)))))
  ::day_21::cost_func::9 = x(x(w12 w19) x(x(w10 w17) x(x(w5 w15) fn(4 _))))
  ::day_21::cost_func::18 = x(x(w19 w28) x(x(w17 w26) x(x(w3 w24) x(w6 x(w15 w21)))))
}

::day_21::cost_func::20 { x(x(w8 w8) x(x(w6 w6) x(x(w4 w4) x(_ x(w1 w1))))) }

::day_21::cost_func::21 { x(w10 x(w8 x(dup458(@lt$(w1 ?(::day_21::cost_func::23 ::day_21::cost_func::22 x(w10 x(w8 x(w14 x(w13 w4)))))) w14) x(dup459(w1 w13) w4)))) }

::day_21::cost_func::22 {
  x(x(w11 w26) x(x(w9 w24) x(@sub(1 w3) x(w6 x(w5 w20)))))
  ::day_21::cost_func::9 = x(x(w11 w18) x(x(w9 w16) x(x(w5 w14) fn(1 _))))
  ::day_21::cost_func::21 = x(x(w18 w26) x(x(w16 w24) x(w3 x(w6 x(w14 w20)))))
}

::day_21::cost_func::23 { x(x(w7 w7) x(x(w5 w5) x(_ x(_ x(w1 w1))))) }

::day_21::cost_func::25 {
  x(w5 x(_ x(w3 x(w2 x(_ w6)))))
  ::day_21::cost_func::32 = x(w5 x(w3 x(w2 w6)))
}

::day_21::cost_func::26 { x(w6 x(?(::day_21::cost_func::28 ::day_21::cost_func::27 x(w6 w4)) w4)) }

::day_21::cost_func::27 { x(_ x(_ x(_ x(_ 0)))) }

::day_21::cost_func::28 { x(dup489(w1 w11) x(w6 x(w5 x(@eq(w1 ?(::day_21::cost_func::30 ::day_21::cost_func::32 x(w11 x(w6 x(w5 w8))))) w8)))) }

::day_21::cost_func::30 { x(_ x(_ x(_ 0))) }

::day_21::cost_func::32 { x(w6 x(@eq(w6 ?(::day_21::cost_func::34 ::day_21::cost_func::33 w4)) w4)) }

::day_21::cost_func::33 { x(?(0 1 w3) w3) }

::day_21::cost_func::34 { x(_ 1) }

::day_21::cost_func::40 {
  x(x(w14 w32) x(x(w12 w30) x(w10 x(w9 x(w8 x(w7 x(x(w6 w26) _)))))))
  ::day_21::cost_func::10 = x(x(w14 w23) x(x(w12 w21) x(w10 x(w8 x(x(w6 w17) _)))))
  ::day_21::cost_func::17 = x(x(w23 w32) x(x(w21 w30) x(w9 x(w7 x(x(w17 w26) _)))))
}

::day_21::cost_func::41 {
  x(x(w14 w32) x(x(w12 w30) x(w10 x(w9 x(w8 x(w7 x(x(w6 w26) _)))))))
  ::day_21::cost_func::17 = x(x(w14 w23) x(x(w12 w21) x(w9 x(w7 x(x(w6 w17) _)))))
  ::day_21::cost_func::10 = x(x(w23 w32) x(x(w21 w30) x(w10 x(w8 x(x(w17 w26) _)))))
}

::std::array::Array::new {
  fn(dup548(w6 w7) fn(w3 tup(w6 w9)))
  ::std::array::Node::new = fn(w7 fn(w3 w9))
}

::std::array::Array::get {
  fn(ref(tup(dup658(w2 w13) w5) tup(w2 w6)) fn(w10 w19))
  ::std::array::Array::get::2 = x(x(ref(w5 w6) w16) x(w10 w13))
  ::std::array::Node::as_leaf = fn(w16 w19)
}

::std::array::Array::get::2 { x(w5 x(w3 dup669(@lt$(1 ?(::std::array::Array::get::4 ::std::array::Array::get::3 x(w5 x(w3 w6)))) w6))) }

::std::array::Array::get::3 {
  x(x(w13 w17) x(dup673(@rem(2 w3) @div(2 w9)) w10))
  ::std::array::Node::half = fn(w13 fn(w10 fn(w3 tup(w5 w6))))
  ::std::array::Array::get::2 = x(x(w5 w17) x(w9 w6))
}

::std::array::Array::get::4 { x(x(w3 w3) _) }

::std::array::Node::as_leaf { fn(x x) }

::std::array::Node::leaf { fn(x x) }

::std::array::Node::new { fn(dup855(@eq(1 ?(::std::array::Node::new::4 ::std::array::Node::new::3 x(w11 x(w3 w9)))) w11) fn(w3 w9)) }

::std::array::Node::new::3 {
  x(_ x(w3 w1))
  ::std::array::Node::leaf = fn(w3 w1)
}

::std::array::Node::new::4 {
  x(dup863(@add(1 @div(2 w2)) @div(2 w6)) x(dup864(w3 w7) tup(w4 w8)))
  ::std::array::Node::new = fn(w2 fn(w3 w4))
  ::std::array::Node::new = fn(w6 fn(w7 w8))
}

::std::array::Node::half { fn(ref(tup(w3 w5) tup(w20 w18)) fn(w9 fn(?(::std::array::Node::half::4 ::std::array::Node::half::3 x(x(w3 w20) x(x(w5 w18) x(w9 w15)))) w15))) }

::std::array::Node::half::3 { x(x(w11 w11) x(x(w9 w1) x(@div(2 w4) tup(ref(w9 w1) w4)))) }

::std::array::Node::half::4 { x(x(w12 w1) x(x(w10 w10) x(@add(1 @div(2 w5)) tup(ref(w12 w1) w5)))) }

::std::io::IO::println {
  fn(ref(w3 w14) fn(w5 _))
  ::std::io::IO::print = fn(ref(w3 w9) fn(w5 _))
  ::std::io::IO::print_char = fn(ref(w9 w14) fn(10 _))
}

::std::io::IO::print {
  fn(ref(w3 w15) fn(tup(w9 tup(w10 _)) _))
  ::std::io::IO::print::2 = x(x(w3 w15) x(w9 w10))
}

::std::io::IO::print::2 { x(w4 x(dup1011(?(::std::io::IO::print::4 ::std::io::IO::print::3 x(w4 x(w6 w1))) w6) w1)) }

::std::io::IO::print::3 {
  x(x(w17 w21) x(@sub(1 w1) tup(w4 w5)))
  ::std::io::IO::print_char = fn(ref(w17 w10) fn(w4 _))
  ::std::io::IO::print::2 = x(x(w10 w21) x(w1 w5))
}

::std::io::IO::print::4 { x(x(w3 w3) _) }

::std::io::IO::print_char { fn(ref(@io_print_char(char io) io) fn(char _)) }

::std::io::IO::full_input {
  fn(ref(w3 w14) w11)
  ::std::io::IO::full_input::2 = x(x(w3 w14) x(tup(0 tup(w10 w10)) w11))
}

::std::io::IO::full_input::2 {
  x(x(w9 w16) x(w7 w12))
  ::std::io::IO::read_byte = fn(ref(w9 w1) fn(0 dup1105(@ne(0 ?(::std::io::IO::full_input::5 ::std::io::IO::full_input::4 x(x(w1 w16) x(w7 x(w13 w12))))) w13)))
}

::std::io::IO::full_input::4 {
  x(w8 x(w6 x(w5 w16)))
  ::std::list::List::concat = fn(w6 fn(tup(1 tup(tup(w5 w9) w9)) w3))
  ::std::io::IO::full_input::2 = x(w8 x(w3 w16))
}

::std::io::IO::full_input::5 { x(x(w5 w5) x(w3 x(_ w3))) }

::std::io::IO::read_byte { fn(ref(dup(io0 @io_read_byte(default dup(byte @seq$(io0 io1)))) io1) fn(default byte)) }

::std::list::List::len { fn(ref(tup(dup1117(w13 w9) w10) tup(w9 w10)) w13) }

::std::list::List::new {
  fn(w2 fn(w3 w11))
  ::std::list::List::new::2 = x(w2 x(w3 x(tup(0 tup(w9 w9)) w11)))
}

::std::list::List::new::2 { x(dup1130(@lt$(0 ?(::std::list::List::new::4 ::std::list::List::new::3 x(w9 w4))) w9) w4) }

::std::list::List::new::3 {
  x(@sub(1 w6) x(dup1136(w3 w13) x(w8 w12)))
  ::std::list::List::push_back = fn(ref(w8 w1) fn(w3 _))
  ::std::list::List::new::2 = x(w6 x(w13 x(w1 w12)))
}

::std::list::List::new::4 { x(_ x(_ x(w1 w1))) }

::std::list::List::pop_front { fn(ref(tup(dup1214(?(::std::list::List::pop_front::4 ::std::list::List::pop_front::3 x(x(w17 w18) x(x(w5 w16) w14))) w17) tup(w5 w6)) tup(w18 tup(w16 w6))) w14) }

::std::list::List::pop_front::3 {
  x(x(@sub(1 w1) w1) x(x(tup(w3 w4) w4) w9))
  ::std::option::Option::Some = fn(w3 w9)
}

::std::list::List::pop_front::4 { x(x(w4 w4) x(x(w2 w2) ::std::option::Option::None)) }

::std::list::List::concat { fn(tup(@add(w12 w20) tup(w8 w13)) fn(tup(w12 tup(w13 w23)) tup(w20 tup(w8 w23)))) }

::std::list::List::push_back {
  fn(ref(w3 w11) fn(w5 _))
  ::std::list::List::concat = fn(w3 fn(tup(1 tup(tup(w5 w12) w12)) w11))
}

::std::list::List::iter { fn(ref(tup(dup1374(w2 w12) tup(w5 w6)) tup(w2 tup(w14 w6))) tup(w12 ref(w5 w14))) }

::std::list::List::Iter::next { fn(ref(tup(dup1381(?(::std::list::List::Iter::next::4 ::std::list::List::Iter::next::3 x(x(w16 w17) x(x(w5 w15) w13))) w16) w5) tup(w17 w15)) w13) }

::std::list::List::Iter::next::3 {
  x(x(@sub(1 w1) w1) x(x(ref(tup(w4 w7) tup(w5 w8)) ref(w7 w8)) w15))
  ::std::option::Option::Some = fn(ref(w4 w5) w15)
}

::std::list::List::Iter::next::4 { x(x(w8 w8) x(x(ref(w2 w2) _) ::std::option::Option::None)) }

::std::list::List::Iter::drop { fn(ref(tup(_ ref(w9 w9)) _) _) }

::std::list::List::into_iter { fn(tup(w2 tup(w3 _)) tup(w2 w3)) }

::std::list::List::IntoIter::next { fn(ref(tup(dup1410(?(::std::list::List::IntoIter::next::4 ::std::list::List::IntoIter::next::3 x(x(w16 w17) x(x(w5 w15) w13))) w16) w5) tup(w17 w15)) w13) }

::std::list::List::IntoIter::next::3 {
  x(x(@sub(1 w1) w1) x(x(tup(w3 w4) w4) w9))
  ::std::option::Option::Some = fn(w3 w9)
}

::std::list::List::IntoIter::next::4 { x(x(w4 w4) x(x(w2 w2) ::std::option::Option::None)) }

::std::list::List::split_trim {
  fn(w2 fn(w3 w12))
  ::std::list::List::split_trim::2 = x(w2 x(w3 x(tup(0 tup(w11 w11)) x(1 x(x(_ 1) w12)))))
}

::std::list::List::split_trim::2 {
  x(w24 x(dup1482(w1 w44) x(w22 x(w21 x(x(w20 w41) w39)))))
  ::std::list::List::split_once = fn(w24 fn(w1 tup(w3 enum(::std::list::List::split_trim::24 enum(::std::list::List::split_trim::25 x(w44 x(w33 x(w42 x(x(w36 w41) w39)))))))))
  ::std::list::List::len = fn(ref(w3 w7) @eq(0 dup1493(?(::std::list::List::split_trim::5 ::std::list::List::split_trim::4 x(w21 dup1486(?(::std::list::List::split_trim::11 ::std::list::List::split_trim::10 x(x(w22 w33) x(w31 x(w7 _)))) w42))) ?(::std::list::List::split_trim::17 ::std::list::List::split_trim::16 x(w36 dup1488(w20 w31))))))
}

::std::list::List::split_trim::4 { x(?(0 1 w3) w3) }

::std::list::List::split_trim::5 { x(_ 0) }

::std::list::List::split_trim::10 { x(x(w4 w4) x(_ x(_ _))) }

::std::list::List::split_trim::11 { x(w5 x(?(::std::list::List::split_trim::13 ::std::list::List::split_trim::12 x(w5 w2)) w2)) }

::std::list::List::split_trim::12 { x(x(w3 w3) x(_ _)) }

::std::list::List::split_trim::13 {
  x(x(w7 w3) x(w5 _))
  ::std::list::List::concat = fn(w7 fn(tup(1 tup(tup(w5 w8) w8)) w3))
}

::std::list::List::split_trim::16 { x(?(0 1 w3) w3) }

::std::list::List::split_trim::17 { x(_ 0) }

::std::list::List::split_trim::24 {
  enum(w0 w7)
  ::std::list::List::split_trim::2 = x(w0 w7)
}

::std::list::List::split_trim::25 { x(_ x(w4 x(_ x(x(w2 w2) w4)))) }

::std::list::List::split_once {
  fn(w2 fn(w3 w15))
  ::std::list::List::split_once::2 = x(w3 x(tup(0 tup(w14 w14)) x(w2 w15)))
}

::std::list::List::split_once::2 {
  x(w12 x(w11 x(w10 w13)))
  ::std::list::List::len = fn(ref(w10 w1) @le$(w7 ?(::std::list::List::split_once::4 ::std::list::List::split_once::3 x(w5 x(w11 x(w1 w13))))))
  ::std::list::List::len = fn(ref(w12 w5) w7)
}

::std::list::List::split_once::3 {
  x(w23 x(w22 x(w21 w42)))
  ::std::list::List::iter = fn(ref(w23 w1) w3)
  ::std::list::List::iter = fn(ref(w21 w6) w8)
  ::std::list::List::split_once::6 = x(w1 x(w22 x(w6 x(w3 x(w8 w42)))))
}

::std::list::List::split_once::4 { x(_ ::std::list::List::split_once::24) }

::std::list::List::split_once::6 {
  x(w10 x(w9 x(w8 x(w7 w6))))
  ::std::list::List::Iter::next = fn(ref(w7 w1) enum(::std::list::List::split_once::9 enum(::std::list::List::split_once::10 x(w10 x(w9 x(w8 x(w1 w6)))))))
}

::std::list::List::split_once::9 {
  enum(ref(dup1576(w1 w16) w1) x(w9 x(w8 x(w7 x(w6 x(w5 w15))))))
  ::std::list::List::Iter::next = fn(ref(w5 w11) enum(::std::list::List::split_once::13 enum(::std::list::List::split_once::14 x(w9 x(w8 x(w7 x(w6 x(w11 x(w16 w15)))))))))
}

::std::list::List::split_once::10 {
  x(_ x(w4 x(w3 x(_ w1))))
  ::std::list::List::split_once::15 = x(w4 x(w3 w1))
}

::std::list::List::split_once::13 { enum(ref(dup1590(w1 w13) w1) x(w10 x(w9 x(w8 x(w7 x(w6 x(@ne(w13 ?(::std::list::List::split_once::6 ::std::list::List::split_once::17 x(w10 x(w9 x(w8 x(w7 x(w6 w15))))))) w15))))))) }

::std::list::List::split_once::14 {
  x(_ x(w5 x(w4 x(_ x(w2 x(_ w7))))))
  ::std::list::List::split_once::15 = x(w5 x(w4 x(w2 w7)))
}

::std::list::List::split_once::15 {
  x(w3 x(tup(_ tup(_ w12)) x(tup(w6 ref(w8 _)) tup(w3 w20))))
  ::std::option::Option::Some = fn(tup(w6 tup(w8 w12)) w20)
}

::std::list::List::split_once::17 {
  x(w5 x(w4 x(w3 x(w2 x(w1 w31)))))
  ::std::list::List::Iter::drop = fn(ref(w2 _) _)
  ::std::list::List::Iter::drop = fn(ref(w1 _) _)
  ::std::list::List::pop_front = fn(ref(w3 w27) enum(::std::list::List::split_once::22 enum(::std::list::List::split_once::23 x(w5 x(w4 x(w27 w31))))))
}

::std::list::List::split_once::22 {
  enum(w0 x(w5 x(w4 w3)))
  ::std::list::List::concat = fn(w4 fn(tup(1 tup(tup(w0 w10) w10)) w9))
  ::std::list::List::split_once::2 = x(w5 x(w9 w3))
}

::std::list::List::split_once::23 { x(_ ::std::list::List::split_once::24) }

::std::list::List::split_once::24 {
  x(w14 x(w13 tup(w10 ::std::option::Option::None)))
  ::std::list::List::concat = fn(w14 fn(w13 w10))
}

::std::n32::N32::to_string { fn(dup2704(?(::std::n32::N32::to_string::4 ::std::n32::N32::to_string::3 x(w8 w7)) w8) w7) }

::std::n32::N32::to_string::3 {
  x(w4 w7)
  ::std::n32::N32::to_string::5 = x(w4 x(tup(0 tup(w5 w5)) w7))
}

::std::n32::N32::to_string::4 { x(_ tup(1 tup(tup(48 w3) w3))) }

::std::n32::N32::to_string::5 { x(dup2714(?(::std::n32::N32::to_string::7 ::std::n32::N32::to_string::6 x(w6 w2)) w6) w2) }

::std::n32::N32::to_string::6 {
  x(dup2717(@rem(10 w1) @div(10 w8)) x(w11 w15))
  48 = @add(w1 w2)
  ::std::list::List::concat = fn(tup(1 tup(tup(w2 w13) w13)) fn(w11 w5))
  ::std::n32::N32::to_string::5 = x(w8 x(w5 w15))
}

::std::n32::N32::to_string::7 { x(_ x(w1 w1)) }

::std::n32::N32::parse { fn(tup(dup2724(?(::std::n32::N32::parse::4 ::std::n32::N32::parse::3 x(w13 x(w7 w11))) w13) tup(w7 _)) w11) }

::std::n32::N32::parse::3 {
  x(w5 x(w4 w6))
  ::std::n32::N32::parse::5 = x(w5 x(w4 x(0 w6)))
}

::std::n32::N32::parse::4 {
  x(_ x(_ w4))
  ::std::n32::N32::parse::11 = x(w4 ::std::option::Option::None)
}

::std::n32::N32::parse::5 { x(dup2735(?(::std::n32::N32::parse::7 ::std::n32::N32::parse::6 x(w8 w3)) w8) w3) }

::std::n32::N32::parse::6 {
  x(w18 x(tup(dup2744(dup2739(w20 @le(57 w23)) w26) w2) x(w16 w25)))
  48 = @le(w20 @n32_and(w23 ?(::std::n32::N32::parse::10 ::std::n32::N32::parse::9 x(w18 x(w2 x(w16 x(w26 w25)))))))
}

::std::n32::N32::parse::7 {
  x(_ x(_ x(w1 w8)))
  ::std::option::Option::Some = fn(w1 w6)
  ::std::n32::N32::parse::11 = x(w8 w6)
}

::std::n32::N32::parse::9 {
  x(@sub(1 w19) x(w3 x(@mul(10 @add(w15 w17)) x(@sub(48 w15) w20))))
  ::std::n32::N32::parse::5 = x(w19 x(w3 x(w17 w20)))
}

::std::n32::N32::parse::10 { x(_ x(_ x(_ x(_ ::std::option::Option::None)))) }

::std::n32::N32::parse::11 { x(w8 w8) }

::std::n32::N32::min { fn(dup2785(@lt(w8 ?(::std::n32::N32::min::4 ::std::n32::N32::min::3 x(w12 x(w11 w10)))) w12) fn(dup2786(w8 w11) w10)) }

::std::n32::N32::min::3 { x(w3 x(_ w3)) }

::std::n32::N32::min::4 { x(_ x(w2 w2)) }

::std::n64::N64::one { tup(1 0) }

::std::n64::N64::from_n32 { fn(w2 tup(w2 0)) }

::std::n64::N64::add { fn(tup(dup(@add(bl0 l) @n32_add_high(bl1 c)) @add(bh @add(c h))) fn(tup(dup(bl0 bl1) bh) tup(l h))) }

::std::n64::N64::sub { fn(tup(dup(@sub(bl0 l) @lt(bl1 c)) @sub(bh @sub(c h))) fn(tup(dup(bl0 bl1) bh) tup(l h))) }

::std::n64::N64::mul { fn(tup(dup(@mul(bl0 l) dup(@n32_mul_high(bl1 ll) @mul(bh @add(hl @add(ll h))))) ah) fn(tup(dup(bl0 dup(bl1 @mul(ah hl))) bh) tup(l h))) }

::std::n64::N64::mul_n32_n32 { fn(dup(@mul(b0 l) @n32_mul_high(b1 h)) fn(dup(b0 b1) tup(l h))) }

::std::n64::N64::div_rem_n32 {
  fn(tup(w2 dup2950(@div(w9 w10) @rem(w12 dup2951(@lt$(w31 ?(::std::n64::N64::div_rem_n32::4 ::std::n64::N64::div_rem_n32::3 x(x(w37 w38) x(w36 x(x(w10 w35) _))))) w37)))) fn(dup2953(w9 dup2953(w12 dup2953(w31 dup2953(w36 dup2953(w41 dup2953(w18 w22)))))) tup(tup(w21 w35) w24)))
  ::std::n64::N64::div_rem_n32::5 = x(x(w2 dup2949(@div(w18 w19) @rem(w22 w24))) x(w38 x(w41 x(0 @add(w19 w21)))))
}

::std::n64::N64::div_rem_n32::3 { x(x(dup2964(@div(w1 w2) @rem(w4 w6)) w6) x(dup2965(w1 w4) x(x(_ w2) _))) }

::std::n64::N64::div_rem_n32::4 { x(x(w5 w5) x(_ x(x(w2 w2) _))) }

::std::n64::N64::div_rem_n32::5 { x(w6 x(dup2973(?(::std::n64::N64::div_rem_n32::7 ::std::n64::N64::div_rem_n32::6 x(w6 x(w10 w3))) w10) w3)) }

::std::n64::N64::div_rem_n32::6 {
  x(x(w27 w33) x(dup2980(w2 w9) x(dup2982(w0 dup2982(w12 w30)) x(@add(w5 w7) w29))))
  4294967295 = @div(w0 @mul(w2 dup2986(w5 w11)))
  ::std::n64::N64::mul_n32_n32 = fn(w11 fn(w12 w13))
  ::std::n64::N64::sub = fn(tup(w27 w9) fn(w13 tup(w15 w16)))
  ::std::n64::N64::div_rem_n32::5 = x(x(w15 w33) x(w16 x(w30 x(w7 w29))))
}

::std::n64::N64::div_rem_n32::7 { x(x(w5 w5) x(_ x(_ x(w1 w1)))) }

::std::n64::N64::eq { fn(tup(@eq(w5 ?(::std::n64::N64::eq::4 ::std::n64::N64::eq::3 x(w3 x(w6 w14)))) w3) fn(tup(w5 w6) w14)) }

::std::n64::N64::eq::3 { x(@eq(w4 ?(0 1 w6)) x(w4 w6)) }

::std::n64::N64::eq::4 { x(_ x(_ 0)) }

::std::n64::N64::le { fn(tup(w2 dup3078(@lt(w12 ?(::std::n64::N64::le::4 ::std::n64::N64::le::3 x(w2 x(w17 x(w5 x(w15 w14)))))) w17)) fn(tup(w5 dup3080(w12 w15)) w14)) }

::std::n64::N64::le::3 { x(_ x(_ x(_ x(_ 1)))) }

::std::n64::N64::le::4 { x(w7 x(@eq(w4 ?(::std::n64::N64::le::6 ::std::n64::N64::le::5 x(w7 x(w5 w8)))) x(w5 x(w4 w8)))) }

::std::n64::N64::le::5 { x(@le(w4 ?(0 1 w6)) x(w4 w6)) }

::std::n64::N64::le::6 { x(_ x(_ 0)) }

::std::n64::N64::min {
  fn(dup3143(w7 w12) fn(dup3144(w8 w11) w10))
  ::std::n64::N64::le = fn(w7 fn(w8 ?(::std::n64::N64::min::4 ::std::n64::N64::min::3 x(w12 x(w11 w10)))))
}

::std::n64::N64::min::3 { x(w3 x(_ w3)) }

::std::n64::N64::min::4 { x(_ x(w2 w2)) }

::std::n64::N64::to_string {
  fn(dup3231(w6 w9) w8)
  ::std::n64::N64::eq = fn(w6 fn(0 ?(::std::n64::N64::to_string::4 ::std::n64::N64::to_string::3 x(w9 w8))))
}

::std::n64::N64::to_string::3 { x(_ tup(1 tup(tup(48 w3) w3))) }

::std::n64::N64::to_string::4 {
  x(w4 w7)
  ::std::n64::N64::to_string::5 = x(w4 x(tup(0 tup(w5 w5)) w7))
}

::std::n64::N64::to_string::5 {
  x(dup3241(w0 w7) w3)
  ::std::n64::N64::eq = fn(w0 fn(0 ?(::std::n64::N64::to_string::7 ::std::n64::N64::to_string::6 x(w7 w3))))
}

::std::n64::N64::to_string::6 { x(_ x(w1 w1)) }

::std::n64::N64::to_string::7 {
  x(w15 x(w14 w18))
  ::std::n64::N64::div_rem_n32 = fn(w15 fn(10 tup(w2 w3)))
  48 = @add(w3 w6)
  ::std::list::List::concat = fn(tup(1 tup(tup(w6 w16) w16)) fn(w14 w9))
  ::std::n64::N64::to_string::5 = x(w2 x(w9 w18))
}

::std::option::Option::Some { fn(f0 enum(enum(f0 r) enum(_ r))) }

::std::option::Option::None { enum(_ enum(r r)) }

::std::option::Option::unwrap { fn(enum(::std::option::Option::unwrap::4 enum(_ w8)) w8) }

::std::option::Option::unwrap::4 { enum(w0 w0) }

