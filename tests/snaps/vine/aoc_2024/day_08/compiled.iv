
::std::logical::Option::None { enum(_ enum(n0 n0)) }

::std::ops::Ord::Lt { enum(n0 enum(_ enum(_ n0))) }

::std::ops::Ord::Eq { enum(_ enum(n0 enum(_ n0))) }

::std::ops::Ord::Gt { enum(_ enum(_ enum(n0 n0))) }

::std::IO::print_char { fn(ref(@io_print_char(n0 n1) n1) fn(n0 _)) }

::std::IO::read_byte { fn(ref(dup(n0 @io_read_byte(n1 dup(n2 @seq$(n0 n3)))) n3) fn(n1 n2)) }

::main { ::day_08::main }

::day_08::main {
  fn(ref(w1 w43) _)
  ::std::IO::full_input = fn(ref(w1 w6) w8)
  ::std::unicode::String::split_trim = fn(w8 fn(tup(1 tup(tup(10 w55) w55)) w15))
  ::std::data::List::get = fn(ref(w15 w18) fn(0 w21))
  ::std::unicode::String::len = fn(w21 w24)
  ::std::data::List::len = fn(ref(w18 w27) w29)
  ::day_08::main::15 = x(::std::data::Map::empty x(x(::std::data::Map::empty w63) x(x(::std::data::Map::empty w61) x(w27 x(w24 x(w29 0))))))
  ::std::data::Map::len = fn(ref(w63 _) w39)
  ::std::numeric::N32::to_string::to_string = fn(w39 tup(@add(8 w65) tup(w66 w67)))
  ::std::IO::println = fn(ref(w6 w33) fn(tup(w65 tup(tup(80 tup(97 tup(114 tup(116 tup(32 tup(49 tup(58 tup(32 w66)))))))) w67)) _))
  ::std::data::Map::len = fn(ref(w61 _) w49)
  ::std::numeric::N32::to_string::to_string = fn(w49 tup(@add(8 w70) tup(w71 w72)))
  ::std::IO::println = fn(ref(w33 w43) fn(tup(w70 tup(tup(80 tup(97 tup(114 tup(116 tup(32 tup(50 tup(58 tup(32 w71)))))))) w72)) _))
}

::day_08::main::1 { x(w10 x(w8 x(w7 fn(tup(dup23(@lt(w8 ?(::day_08::main::4 ::day_08::main::3 x(w10 x(w7 x(w16 x(w1 w14)))))) w16) w1) w14)))) }

::day_08::main::3 { x(w8 x(w6 x(w5 x(dup32(@lt(w6 ?(::day_08::main::6 ::day_08::main::5 x(w8 x(w5 x(w10 w9))))) w10) w9)))) }

::day_08::main::4 { x(x(w5 w5) _) }

::day_08::main::5 {
  x(x(w12 w1) x(w10 x(w9 _)))
  ::std::data::Map::insert::1 = fn(ref(w12 w1) fn(tup(w10 w9) _))
}

::day_08::main::6 { x(x(w4 w4) _) }

::day_08::main::8 {
  x(w10 x(w8 x(w7 fn(tup(w0 w1) fn(w3 _)))))
  ::day_08::main::9 = x(w10 x(w8 x(w7 x(w0 x(w1 w3)))))
}

::day_08::main::9 { x(w9 x(dup52(w1 w14) x(w6 x(dup54(@lt(w1 ?(::day_08::main::11 ::day_08::main::10 x(w9 x(w14 x(w6 x(w12 w4)))))) w12) w4)))) }

::day_08::main::10 { x(w9 x(w7 x(dup60(w1 w13) x(w5 x(dup62(@lt(w1 ?(::day_08::main::13 ::day_08::main::12 x(w9 x(w7 x(w13 x(w5 x(w11 w3))))))) w11) w3))))) }

::day_08::main::11 { x(x(w6 w6) _) }

::day_08::main::12 {
  x(x(w21 w28) x(w19 x(w18 x(dup70(w3 w9) x(dup72(w4 w11) dup74(w8 w22))))))
  ::std::data::Map::insert::1 = fn(ref(w21 w1) fn(tup(w3 w4) _))
  tup(w9 w11) = @add(w8 tup(w10 w12))
  ::day_08::main::9 = x(x(w1 w28) x(w19 x(w18 x(w10 x(w12 w22)))))
}

::day_08::main::13 { x(x(w6 w6) _) }

::day_08::main::15 {
  x(w13 x(w12 x(w10 x(w8 w7))))
  ::std::data::List::pop_front = fn(ref(w8 w1) enum(::day_08::main::18 enum(::day_08::main::19 x(w13 x(w12 x(w10 x(w1 w7)))))))
}

::day_08::main::18 {
  enum(w0 x(w10 x(x(w9 w32) x(x(w7 w30) x(w5 x(dup96(w18 w27) x(dup97(w17 w26) dup98(w16 @add(1 w13)))))))))
  ::day_08::main::20 = x(x(w10 w24) x(x(w9 w22) x(x(w7 w20) x(w18 x(w17 x(w16 x(w0 0)))))))
  ::day_08::main::15 = x(w24 x(x(w22 w32) x(x(w20 w30) x(w5 x(w27 x(w26 w13))))))
}

::day_08::main::19 { x(_ x(x(w7 w7) x(x(w5 w5) _))) }

::day_08::main::20 {
  x(w17 x(w15 x(w13 x(w11 x(w10 x(w9 x(w8 w7)))))))
  ::std::data::List::pop_front = fn(ref(w8 w2) enum(::day_08::main::23 enum(::day_08::main::24 x(w17 x(w15 x(w13 x(w11 x(w10 x(w9 x(w2 w7))))))))))
}

::day_08::main::23 {
  enum(dup133(@ne(46 ?(::day_08::main::27 ::day_08::main::26 x(x(w12 w29) x(x(w10 w27) x(x(w8 w25) x(w23 x(w22 x(w21 x(w20 x(w19 _)))))))))) w19) x(x(w12 w40) x(x(w10 w38) x(x(w8 w36) x(dup127(w23 w34) x(dup128(w22 w33) x(dup129(w21 w32) x(w3 dup131(w20 @add(1 w15))))))))))
  ::day_08::main::20 = x(x(w29 w40) x(x(w27 w38) x(x(w25 w36) x(w34 x(w33 x(w32 x(w3 w15)))))))
}

::day_08::main::24 { x(x(w10 w10) x(x(w8 w8) x(x(w6 w6) _))) }

::day_08::main::26 {
  x(x(w32 w1) x(w30 x(w28 x(w26 x(w25 x(dup147(w10 w37) x(dup148(w9 w36) x(w22 _))))))))
  ::std::data::Map::get_or_insert::1 = fn(ref(w32 w1) fn(w22 fn(tup(0 tup(w33 w33)) ref(dup151(w13 w16) w17))))
  ::std::data::List::into_iter = fn(w13 w14)
  ::day_08::main::28 = x(w30 x(w28 x(w26 x(w25 x(w37 x(w36 x(w35 w14)))))))
  ::std::data::List::push_back = fn(ref(w16 w17) fn(w19 _))
  tup(w9 w10) = dup152(w35 w19)
}

::day_08::main::27 { x(x(w11 w11) x(x(w9 w9) x(x(w7 w7) _))) }

::day_08::main::28 {
  x(w14 x(w12 x(w10 x(w9 x(w8 x(w7 x(w6 w5)))))))
  ::std::data::List::IntoIter::next = fn(ref(w5 w1) enum(::day_08::main::31 enum(::day_08::main::32 x(w14 x(w12 x(w10 x(w9 x(w8 x(w7 x(w6 w1))))))))))
}

::day_08::main::31 {
  enum(dup184(w16 dup184(@add(w21 @sub(w23 w24)) dup184(w21 dup184(tup(w27 w28) w31)))) x(x(w11 w82) x(x(w9 w80) x(dup178(w55 dup178(w60 dup178(w65 dup178(w70 w78)))) x(dup179(w54 dup179(w59 dup179(w64 dup179(w69 w77)))) x(dup180(w36 w76) x(dup181(w33 w75) x(dup182(@add(w14 @sub(w16 w17)) dup182(w14 dup182(w23 dup182(@sub(w31 @div(w39 dup187(w44 dup187(w48 @sub$(0 w51))))) dup182(w43 dup182(@sub(w48 w49) w74)))))) w2))))))))
  ::day_08::main::1 = x(x(w11 w57) x(w55 x(w54 fn(w17 _))))
  ::day_08::main::1 = x(x(w57 w62) x(w60 x(w59 fn(w24 _))))
  ::std::numeric::N32::diff = fn(w33 fn(w27 w35))
  ::std::numeric::N32::diff = fn(w36 fn(w28 w38))
  ::std::numeric::N32::gcd = fn(w35 fn(w38 w39))
  ::day_08::main::8 = x(x(w9 w67) x(w65 x(w64 fn(w43 fn(w44 _)))))
  ::day_08::main::8 = x(x(w67 w72) x(w70 x(w69 fn(w49 fn(w51 _)))))
  ::day_08::main::28 = x(x(w62 w82) x(x(w72 w80) x(w78 x(w77 x(w76 x(w75 x(w74 w2)))))))
}

::day_08::main::32 { x(x(w9 w9) x(x(w7 w7) _)) }

::std::data::Map::insert::1 { fn(ref(tup(dup196(?(::std::data::Map::insert::1::3 ::std::data::Map::insert::1::2 x(x(n0 n1) x(x(n2 n3) x(n4 x(n5 n6))))) n0) n2) tup(n1 n3)) fn(n4 fn(n5 n6))) }

::std::data::Map::insert::1::2 { x(n0 x(x(tup(n1 tup(tup(tup(dup291(n2 dup291(n3 n4)) n5) n6) n7)) n8) x(tup(dup290(n9 dup290(@lt(n3 ?(::std::numeric::N32::ord::cmp::3 ::std::numeric::N32::ord::cmp::2 x(n10 x(n4 enum(::std::ops::Ord::pair::cmp::1::5 enum(::std::ops::Ord::pair::cmp::1::6 enum(::std::ops::Ord::pair::cmp::1::7 x(x(n11 n12) x(x(n5 n13) enum(::std::data::Map::insert::1::8 enum(::std::data::Map::insert::1::9 enum(::std::data::Map::insert::1::10 x(n0 x(x(tup(n14 tup(tup(n15 n16) n17)) n8) x(tup(n9 n12) x(n18 x(x(n1 n14) x(x(tup(n2 n13) n15) x(x(n6 n16) x(x(n7 n17) x(n19 _))))))))))))))))))))) n10)) n11) x(n18 n19)))) }

::std::data::Map::insert::1::3 { x(x(_ 1) x(x(_ tup(::std::data::Map::empty tup(tup(n0 n1) ::std::data::Map::empty))) x(n0 x(n1 ::std::logical::Option::None)))) }

::std::data::Map::insert::1::8 { x(x(_ n0) x(x(tup(tup(dup1415(dup1408(n1 n2) @add(n3 @add(1 n0))) n4) tup(n5 tup(dup1416(dup1407(n6 @mul$(3 @add(2 @le$(n2 ?(::std::data::Map::balance_right::3 ::std::data::Map::balance_right::2 x(tup(n1 n4) x(n5 x(tup(n6 n7) n8)))))))) n3) n7))) n8) x(n9 x(n10 x(x(tup(dup196(?(::std::data::Map::insert::1::3 ::std::data::Map::insert::1::2 x(x(n11 n12) x(x(n13 n14) x(n9 x(n10 n15))))) n11) n13) tup(n12 n14)) x(x(n16 n16) x(x(n17 n17) x(x(n18 n18) x(n15 _))))))))) }

::std::data::Map::insert::1::9 { x(x(n0 n0) x(x(n1 n1) x(n2 x(n3 x(x(n4 n4) x(x(_ n2) x(x(n5 n3) x(x(n6 n6) x(enum(enum(n5 n7) enum(_ n7)) _))))))))) }

::std::data::Map::insert::1::10 { x(x(_ n0) x(x(tup(tup(dup1415(dup1407(n1 @mul$(3 @add(2 @le$(n2 ?(::std::data::Map::balance_left::3 ::std::data::Map::balance_left::2 x(tup(n1 n3) x(n4 x(tup(n5 n6) n7)))))))) @add(n8 @add(1 n0))) n3) tup(n4 tup(dup1416(dup1408(n5 n2) n8) n6))) n7) x(n9 x(n10 x(x(n11 n11) x(x(n12 n12) x(x(n13 n13) x(x(tup(dup196(?(::std::data::Map::insert::1::3 ::std::data::Map::insert::1::2 x(x(n14 n15) x(x(n16 n17) x(n9 x(n10 n18))))) n14) n16) tup(n15 n17)) x(n18 _))))))))) }

::std::ops::Ord::pair::cmp::1 { fn(ref(tup(dup290(n0 dup290(@lt(n1 ?(::std::numeric::N32::ord::cmp::3 ::std::numeric::N32::ord::cmp::2 x(n2 x(n3 enum(::std::ops::Ord::pair::cmp::1::5 enum(::std::ops::Ord::pair::cmp::1::6 enum(::std::ops::Ord::pair::cmp::1::7 x(x(n4 n5) x(x(n6 n7) n8))))))))) n2)) n4) tup(n0 n5)) fn(ref(tup(dup291(n9 dup291(n1 n3)) n6) tup(n9 n7)) n8)) }

::std::ops::Ord::pair::cmp::1::5 { x(x(n0 n0) x(x(n1 n1) ::std::ops::Ord::Lt)) }

::std::ops::Ord::pair::cmp::1::6 { x(x(dup290(n0 dup290(@lt(n1 ?(::std::numeric::N32::ord::cmp::3 ::std::numeric::N32::ord::cmp::2 x(n2 x(n3 n4)))) n2)) n0) x(x(dup291(n5 dup291(n1 n3)) n5) n4)) }

::std::ops::Ord::pair::cmp::1::7 { x(x(n0 n0) x(x(n1 n1) ::std::ops::Ord::Gt)) }

::std::numeric::N32::ord::cmp { fn(ref(dup290(n0 dup290(@lt(n1 ?(::std::numeric::N32::ord::cmp::3 ::std::numeric::N32::ord::cmp::2 x(n2 x(n3 n4)))) n2)) n0) fn(ref(dup291(n5 dup291(n1 n3)) n5) n4)) }

::std::numeric::N32::ord::cmp::2 { x(_ x(_ ::std::ops::Ord::Lt)) }

::std::numeric::N32::ord::cmp::3 { x(@lt$(n0 ?(::std::ops::Ord::Eq ::std::ops::Ord::Gt n1)) x(n0 n1)) }

::std::data::Map::get_or_insert::1 { fn(ref(tup(dup313(?(::std::data::Map::insert::2::3 ::std::data::Map::insert::2::2 x(x(n0 n1) x(x(n2 n3) x(n4 x(n5 enum(::std::logical::Option::unwrap_or::4 enum(::std::logical::Option::unwrap_or::5 x(n6 n7)))))))) n0) n2) tup(n1 n3)) fn(n4 fn(n6 ref(n7 n5)))) }

::std::data::Map::insert::2 { fn(ref(tup(dup313(?(::std::data::Map::insert::2::3 ::std::data::Map::insert::2::2 x(x(n0 n1) x(x(n2 n3) x(n4 x(n5 n6))))) n0) n2) tup(n1 n3)) fn(n4 fn(n5 n6))) }

::std::data::Map::insert::2::2 { x(n0 x(x(tup(n1 tup(tup(dup385(n2 dup385(n3 n4)) n5) n6)) n7) x(dup384(n8 dup384(@lt(n3 ?(::std::unicode::Char::ord::cmp::3 ::std::unicode::Char::ord::cmp::2 x(n9 x(n4 enum(::std::data::Map::insert::2::8 enum(::std::data::Map::insert::2::9 enum(::std::data::Map::insert::2::10 x(n0 x(x(tup(n10 tup(tup(n11 n12) n13)) n7) x(n8 x(n14 x(x(n1 n10) x(x(n2 n11) x(x(n5 n12) x(x(n6 n13) x(n15 _)))))))))))))))) n9)) x(n14 n15)))) }

::std::data::Map::insert::2::3 { x(x(_ 1) x(x(_ tup(::std::data::Map::empty tup(tup(n0 n1) ::std::data::Map::empty))) x(n0 x(n1 ::std::logical::Option::None)))) }

::std::data::Map::insert::2::8 { x(x(_ n0) x(x(tup(tup(dup1415(dup1408(n1 n2) @add(n3 @add(1 n0))) n4) tup(n5 tup(dup1416(dup1407(n6 @mul$(3 @add(2 @le$(n2 ?(::std::data::Map::balance_right::3 ::std::data::Map::balance_right::2 x(tup(n1 n4) x(n5 x(tup(n6 n7) n8)))))))) n3) n7))) n8) x(n9 x(n10 x(x(tup(dup313(?(::std::data::Map::insert::2::3 ::std::data::Map::insert::2::2 x(x(n11 n12) x(x(n13 n14) x(n9 x(n10 n15))))) n11) n13) tup(n12 n14)) x(x(n16 n16) x(x(n17 n17) x(x(n18 n18) x(n15 _))))))))) }

::std::data::Map::insert::2::9 { x(x(n0 n0) x(x(n1 n1) x(n2 x(n3 x(x(n4 n4) x(x(_ n2) x(x(n5 n3) x(x(n6 n6) x(enum(enum(n5 n7) enum(_ n7)) _))))))))) }

::std::data::Map::insert::2::10 { x(x(_ n0) x(x(tup(tup(dup1415(dup1407(n1 @mul$(3 @add(2 @le$(n2 ?(::std::data::Map::balance_left::3 ::std::data::Map::balance_left::2 x(tup(n1 n3) x(n4 x(tup(n5 n6) n7)))))))) @add(n8 @add(1 n0))) n3) tup(n4 tup(dup1416(dup1408(n5 n2) n8) n6))) n7) x(n9 x(n10 x(x(n11 n11) x(x(n12 n12) x(x(n13 n13) x(x(tup(dup313(?(::std::data::Map::insert::2::3 ::std::data::Map::insert::2::2 x(x(n14 n15) x(x(n16 n17) x(n9 x(n10 n18))))) n14) n16) tup(n15 n17)) x(n18 _))))))))) }

::std::unicode::Char::ord::cmp { fn(ref(dup384(n0 dup384(@lt(n1 ?(::std::unicode::Char::ord::cmp::3 ::std::unicode::Char::ord::cmp::2 x(n2 x(n3 n4)))) n2)) n0) fn(ref(dup385(n5 dup385(n1 n3)) n5) n4)) }

::std::unicode::Char::ord::cmp::2 { x(_ x(_ ::std::ops::Ord::Lt)) }

::std::unicode::Char::ord::cmp::3 { x(@lt$(n0 ?(::std::ops::Ord::Eq ::std::ops::Ord::Gt n1)) x(n0 n1)) }

::std::numeric::N32::to_string::to_string { fn(dup395(?(::std::numeric::N32::to_string::to_string::3 ::std::numeric::N32::to_string::to_string::2 x(n0 n1)) n0) n1) }

::std::numeric::N32::to_string::to_string::2 { x(dup404(?(::std::numeric::N32::to_string::to_string::6 ::std::numeric::N32::to_string::to_string::5 x(n0 x(tup(0 tup(n1 n1)) n2))) n0) n2) }

::std::numeric::N32::to_string::to_string::3 { x(_ tup(1 tup(tup(48 n0) n0))) }

::std::numeric::N32::to_string::to_string::4 { x(dup404(?(::std::numeric::N32::to_string::to_string::6 ::std::numeric::N32::to_string::to_string::5 x(n0 n1)) n0) n1) }

::std::numeric::N32::to_string::to_string::5 { x(dup407(@rem(10 @add$(48 n0)) @div(10 dup404(?(::std::numeric::N32::to_string::to_string::6 ::std::numeric::N32::to_string::to_string::5 x(n1 x(tup(n2 tup(tup(n0 n3) n4)) n5))) n1))) x(tup(@add$(1 n2) tup(n3 n4)) n5)) }

::std::numeric::N32::to_string::to_string::6 { x(_ x(n0 n0)) }

::std::data::List::len { fn(ref(tup(dup413(n0 n1) n2) tup(n1 n2)) n0) }

::std::data::List::get { fn(ref(tup(n0 tup(n1 n2)) tup(n0 tup(n3 n2))) fn(dup444(?(::std::data::List::get::3 ::std::data::List::get::2 x(x(ref(n1 n3) ref(tup(n4 n5) tup(n6 n5))) n7)) n7) ref(n4 n6))) }

::std::data::List::get::1 { x(n0 dup444(?(::std::data::List::get::3 ::std::data::List::get::2 x(n0 n1)) n1)) }

::std::data::List::get::2 { x(x(ref(tup(n0 n1) tup(n0 n2)) n3) @sub(1 dup444(?(::std::data::List::get::3 ::std::data::List::get::2 x(x(ref(n1 n2) n3) n4)) n4))) }

::std::data::List::get::3 { x(x(n0 n0) _) }

::std::data::List::pop_front { fn(ref(tup(dup505(?(::std::data::List::pop_front::3 ::std::data::List::pop_front::2 x(x(n0 n1) x(x(n2 n3) n4))) n0) tup(n2 n5)) tup(n1 tup(n3 n5))) n4) }

::std::data::List::pop_front::2 { x(x(@sub(1 n0) n0) x(x(tup(n1 n2) n2) enum(enum(n1 n3) enum(_ n3)))) }

::std::data::List::pop_front::3 { x(x(n0 n0) x(x(n1 n1) ::std::logical::Option::None)) }

::std::data::List::concat { fn(tup(@add(n0 n1) tup(n2 n3)) fn(tup(n0 tup(n3 n4)) tup(n1 tup(n2 n4)))) }

::std::data::List::push_back { fn(ref(tup(@add(1 n0) tup(n1 tup(n2 n3))) tup(n0 tup(n1 n3))) fn(n2 _)) }

::std::data::List::iter { fn(ref(tup(dup653(n0 n1) tup(n2 n3)) tup(n0 tup(n4 n3))) tup(n1 ref(n2 n4))) }

::std::data::List::Iter::next { fn(ref(tup(dup659(?(::std::data::List::Iter::next::3 ::std::data::List::Iter::next::2 x(x(n0 n1) x(x(n2 n3) n4))) n0) n2) tup(n1 n3)) n4) }

::std::data::List::Iter::next::2 { x(x(@sub(1 n0) n0) x(x(ref(tup(n1 n2) tup(n3 n4)) ref(n2 n4)) enum(enum(ref(n1 n3) n5) enum(_ n5)))) }

::std::data::List::Iter::next::3 { x(x(n0 n0) x(x(ref(n1 n1) _) ::std::logical::Option::None)) }

::std::data::List::Iter::drop { fn(ref(tup(_ ref(n0 n0)) _) _) }

::std::data::List::into_iter { fn(tup(n0 tup(n1 _)) tup(n0 n1)) }

::std::data::List::IntoIter::next { fn(ref(tup(dup685(?(::std::data::List::IntoIter::next::3 ::std::data::List::IntoIter::next::2 x(x(n0 n1) x(x(n2 n3) n4))) n0) n2) tup(n1 n3)) n4) }

::std::data::List::IntoIter::next::2 { x(x(@sub(1 n0) n0) x(x(tup(n1 n2) n2) enum(enum(n1 n3) enum(_ n3)))) }

::std::data::List::IntoIter::next::3 { x(x(n0 n0) x(x(n1 n1) ::std::logical::Option::None)) }

::std::data::Map::empty { tup(0 _) }

::std::data::Map::new { fn(tup(dup1135(n0 @add(n1 @add(1 n2))) n3) fn(n4 fn(tup(dup1135(n5 n1) n6) tup(n2 tup(tup(n0 n3) tup(n4 tup(n5 n6))))))) }

::std::data::Map::len { fn(ref(tup(dup1135(n0 n1) n2) tup(n0 n2)) n1) }

::std::data::Map::balance_left { fn(ref(tup(tup(dup1407(n0 @mul$(3 @add(2 @le$(n1 ?(::std::data::Map::balance_left::3 ::std::data::Map::balance_left::2 x(tup(n0 n2) x(n3 x(tup(n4 n5) n6)))))))) n2) tup(n3 tup(dup1408(n4 n1) n5))) n6) _) }

::std::data::Map::balance_left::2 { x(n0 x(n1 x(n2 tup(n0 tup(n1 n2))))) }

::std::data::Map::balance_left::3 { x(n0 x(n1 x(tup(_ tup(tup(dup1411(n2 @le(n3 ?(::std::data::Map::balance_left::6 ::std::data::Map::balance_left::5 x(n0 x(n1 x(tup(n2 n4) x(n5 x(tup(n6 n7) n8)))))))) n4) tup(n5 tup(dup1412(n6 @mul$(2 n3)) n7)))) n8))) }

::std::data::Map::balance_left::5 { x(tup(dup1135(n0 @add(n1 @add(1 n2))) n3) x(n4 x(tup(dup1135(n5 n1) n6) x(n7 x(n8 tup(tup(n2 tup(tup(n0 n3) tup(n4 tup(n5 n6)))) tup(n7 n8))))))) }

::std::data::Map::balance_left::6 { x(tup(dup1135(n0 @add(n1 @add(1 n2))) n3) x(n4 x(tup(_ tup(tup(dup1135(n5 n1) n6) tup(n7 tup(dup1135(n8 @add(n9 @add(1 n10))) n11)))) x(n12 x(tup(dup1135(n13 n9) n14) tup(tup(n2 tup(tup(n0 n3) tup(n4 tup(n5 n6)))) tup(n7 tup(n10 tup(tup(n8 n11) tup(n12 tup(n13 n14))))))))))) }

::std::data::Map::balance_right { fn(ref(tup(tup(dup1408(n0 n1) n2) tup(n3 tup(dup1407(n4 @mul$(3 @add(2 @le$(n1 ?(::std::data::Map::balance_right::3 ::std::data::Map::balance_right::2 x(tup(n0 n2) x(n3 x(tup(n4 n5) n6)))))))) n5))) n6) _) }

::std::data::Map::balance_right::2 { x(n0 x(n1 x(n2 tup(n0 tup(n1 n2))))) }

::std::data::Map::balance_right::3 { x(tup(_ tup(tup(dup1412(n0 @mul$(2 n1)) n2) tup(n3 tup(dup1411(n4 @le(n1 ?(::std::data::Map::balance_right::6 ::std::data::Map::balance_right::5 x(n5 x(n6 x(tup(n0 n2) x(n3 x(tup(n4 n7) n8)))))))) n7)))) x(n5 x(n6 n8))) }

::std::data::Map::balance_right::5 { x(n0 x(tup(dup1135(n1 n2) n3) x(n4 x(n5 x(tup(dup1135(n6 @add(n2 @add(1 n7))) n8) tup(n4 tup(n5 tup(n7 tup(tup(n6 n8) tup(n0 tup(n1 n3))))))))))) }

::std::data::Map::balance_right::6 { x(n0 x(tup(dup1135(n1 n2) n3) x(tup(dup1135(n4 @add(n5 @add(1 n6))) n7) x(n8 x(tup(_ tup(tup(dup1135(n9 n5) n10) tup(n11 tup(dup1135(n12 @add(n2 @add(1 n13))) n14)))) tup(tup(n6 tup(tup(n4 n7) tup(n8 tup(n9 n10)))) tup(n11 tup(n13 tup(tup(n12 n14) tup(n0 tup(n1 n3))))))))))) }

::std::data::Map::is_balanced { fn(ref(tup(dup1407(n0 @mul$(3 @add(2 @le$(n1 n2)))) n3) tup(n0 n3)) fn(ref(tup(dup1408(n4 n1) n5) tup(n4 n5)) n2)) }

::std::data::Map::is_single { fn(ref(tup(dup1411(n0 @le(n1 n2)) n3) tup(n0 n3)) fn(ref(tup(dup1412(n4 @mul$(2 n1)) n5) tup(n4 n5)) n2)) }

::std::data::Map::size { fn(ref(tup(tup(dup1415(n0 @add(n1 @add(1 n2))) n3) tup(n4 tup(dup1416(n5 n1) n6))) tup(tup(n0 n3) tup(n4 tup(n5 n6)))) n2) }

::std::logical::Option::unwrap_or { fn(enum(::std::logical::Option::unwrap_or::4 enum(::std::logical::Option::unwrap_or::5 x(n0 n1))) fn(n0 n1)) }

::std::logical::Option::unwrap_or::4 { enum(n0 x(_ n0)) }

::std::logical::Option::unwrap_or::5 { x(n0 n0) }

::std::numeric::N32::diff { fn(dup1650(@lt$(n0 ?(::std::numeric::N32::diff::3 ::std::numeric::N32::diff::2 x(n1 x(n2 n3)))) n1) fn(dup1651(n0 n2) n3)) }

::std::numeric::N32::diff::2 { x(@sub(n0 n1) x(n0 n1)) }

::std::numeric::N32::diff::3 { x(n0 x(@sub(n0 n1) n1)) }

::std::numeric::N32::gcd { fn(dup1666(?(::std::numeric::N32::gcd::3 ::std::numeric::N32::gcd::2 x(n0 x(n1 n2))) n0) fn(n1 n2)) }

::std::numeric::N32::gcd::1 { x(dup1666(?(::std::numeric::N32::gcd::3 ::std::numeric::N32::gcd::2 x(n0 n1)) n0) n1) }

::std::numeric::N32::gcd::2 { x(dup1669(n0 n1) x(@rem(n0 dup1666(?(::std::numeric::N32::gcd::3 ::std::numeric::N32::gcd::2 x(n2 x(n1 n3))) n2)) n3)) }

::std::numeric::N32::gcd::3 { x(_ x(n0 n0)) }

::std::unicode::String::len { fn(ref(tup(dup2174(n0 n1) n2) tup(n0 n2)) n1) }

::std::unicode::String::split_trim { fn(tup(dup2174(n0 @le$(n1 ?(::std::unicode::String::split_once::3 ::std::unicode::String::split_once::2 x(tup(n2 n3) x(tup(0 tup(n4 n4)) x(tup(n0 n5) tup(tup(dup2174(n6 @eq(0 dup2218(?(::std::unicode::String::split_trim::4 ::std::unicode::String::split_trim::3 x(1 dup2211(?(::std::unicode::String::split_trim::10 ::std::unicode::String::split_trim::9 x(x(tup(0 tup(n7 n7)) n8) x(n9 x(tup(n6 n10) _)))) n11))) ?(::std::unicode::String::split_trim::16 ::std::unicode::String::split_trim::15 x(n12 dup2213(_ n9)))))) n10) enum(::std::unicode::String::split_trim::23 enum(::std::unicode::String::split_trim::24 x(n13 x(n8 x(n11 x(x(n12 1) n14))))))))))))) n5) fn(dup2207(tup(dup2174(n2 n1) n3) n13) n14)) }

::std::unicode::String::split_trim::1 { x(tup(dup2174(n0 @le$(n1 ?(::std::unicode::String::split_once::3 ::std::unicode::String::split_once::2 x(tup(n2 n3) x(tup(0 tup(n4 n4)) x(tup(n0 n5) tup(tup(dup2174(n6 @eq(0 dup2218(?(::std::unicode::String::split_trim::4 ::std::unicode::String::split_trim::3 x(n7 dup2211(?(::std::unicode::String::split_trim::10 ::std::unicode::String::split_trim::9 x(x(n8 n9) x(n10 x(tup(n6 n11) _)))) n12))) ?(::std::unicode::String::split_trim::16 ::std::unicode::String::split_trim::15 x(n13 dup2213(n14 n10)))))) n11) enum(::std::unicode::String::split_trim::23 enum(::std::unicode::String::split_trim::24 x(n15 x(n9 x(n12 x(x(n13 n16) n17))))))))))))) n5) x(dup2207(tup(dup2174(n2 n1) n3) n15) x(n8 x(n7 x(x(n14 n16) n17))))) }

::std::unicode::String::split_trim::3 { x(?(0 1 n0) n0) }

::std::unicode::String::split_trim::4 { x(_ 0) }

::std::unicode::String::split_trim::9 { x(x(n0 n0) _) }

::std::unicode::String::split_trim::10 { x(n0 x(?(::std::unicode::String::split_trim::12 ::std::unicode::String::split_trim::11 x(n0 n1)) n1)) }

::std::unicode::String::split_trim::11 { x(x(n0 n0) _) }

::std::unicode::String::split_trim::12 { x(x(tup(@add(1 n0) tup(n1 tup(n2 n3))) tup(n0 tup(n1 n3))) x(n2 _)) }

::std::unicode::String::split_trim::15 { x(?(0 1 n0) n0) }

::std::unicode::String::split_trim::16 { x(_ 0) }

::std::unicode::String::split_trim::23 { enum(tup(dup2174(n0 @le$(n1 ?(::std::unicode::String::split_once::3 ::std::unicode::String::split_once::2 x(tup(n2 n3) x(tup(0 tup(n4 n4)) x(tup(n0 n5) tup(tup(dup2174(n6 @eq(0 dup2218(?(::std::unicode::String::split_trim::4 ::std::unicode::String::split_trim::3 x(n7 dup2211(?(::std::unicode::String::split_trim::10 ::std::unicode::String::split_trim::9 x(x(n8 n9) x(n10 x(tup(n6 n11) _)))) n12))) ?(::std::unicode::String::split_trim::16 ::std::unicode::String::split_trim::15 x(n13 dup2213(n14 n10)))))) n11) enum(::std::unicode::String::split_trim::23 enum(::std::unicode::String::split_trim::24 x(n15 x(n9 x(n12 x(x(n13 n16) n17))))))))))))) n5) x(dup2207(tup(dup2174(n2 n1) n3) n15) x(n8 x(n7 x(x(n14 n16) n17))))) }

::std::unicode::String::split_trim::24 { x(_ x(n0 x(_ x(x(n1 n1) n0)))) }

::std::unicode::String::split_once { fn(tup(dup2174(n0 @le$(n1 ?(::std::unicode::String::split_once::3 ::std::unicode::String::split_once::2 x(tup(n2 n3) x(tup(0 tup(n4 n4)) x(tup(n0 n5) n6)))))) n5) fn(tup(dup2174(n2 n1) n3) n6)) }

::std::unicode::String::split_once::1 { x(tup(dup2174(n0 n1) n2) x(n3 x(tup(dup2174(n4 @le$(n1 ?(::std::unicode::String::split_once::3 ::std::unicode::String::split_once::2 x(tup(n0 n2) x(n3 x(tup(n4 n5) n6)))))) n5) n6))) }

::std::unicode::String::split_once::2 { x(tup(dup653(n0 dup659(?(::std::data::List::Iter::next::3 ::std::data::List::Iter::next::2 x(x(n1 n2) x(x(ref(n3 n4) n5) enum(::std::unicode::String::split_once::8 enum(::std::unicode::String::split_once::9 x(tup(n0 tup(n4 n6)) x(n7 x(tup(n8 tup(n9 n10)) x(tup(n2 n5) x(tup(n11 ref(n12 n9)) n13)))))))))) n1)) tup(n3 n6)) x(n7 x(tup(dup653(n8 n11) tup(n12 n10)) n13))) }

::std::unicode::String::split_once::3 { x(_ ::std::unicode::String::split_once::23) }

::std::unicode::String::split_once::5 { x(n0 x(n1 x(n2 x(tup(dup659(?(::std::data::List::Iter::next::3 ::std::data::List::Iter::next::2 x(x(n3 n4) x(x(n5 n6) enum(::std::unicode::String::split_once::8 enum(::std::unicode::String::split_once::9 x(n0 x(n1 x(n2 x(tup(n4 n6) n7))))))))) n3) n5) n7)))) }

::std::unicode::String::split_once::8 { enum(ref(dup2297(n0 n1) n0) x(n2 x(n3 x(n4 x(n5 x(tup(dup659(?(::std::data::List::Iter::next::3 ::std::data::List::Iter::next::2 x(x(n6 n7) x(x(n8 n9) enum(::std::unicode::String::split_once::12 enum(::std::unicode::String::split_once::13 x(n2 x(n3 x(n4 x(n5 x(tup(n7 n9) x(n1 n10))))))))))) n6) n8) n10)))))) }

::std::unicode::String::split_once::9 { x(_ x(n0 x(tup(_ tup(_ n1)) x(_ x(tup(n2 ref(n3 _)) tup(n0 enum(enum(tup(n2 tup(n3 n1)) n4) enum(_ n4)))))))) }

::std::unicode::String::split_once::12 { enum(ref(dup2311(n0 n1) n0) x(n2 x(n3 x(n4 x(n5 x(n6 x(@ne(n1 ?(::std::unicode::String::split_once::5 ::std::unicode::String::split_once::16 x(n2 x(n3 x(n4 x(n5 x(n6 n7))))))) n7))))))) }

::std::unicode::String::split_once::13 { x(_ x(n0 x(tup(_ tup(_ n1)) x(_ x(tup(n2 ref(n3 _)) x(_ tup(n0 enum(enum(tup(n2 tup(n3 n1)) n4) enum(_ n4))))))))) }

::std::unicode::String::split_once::14 { x(n0 x(tup(_ tup(_ n1)) x(tup(n2 ref(n3 _)) tup(n0 enum(enum(tup(n2 tup(n3 n1)) n4) enum(_ n4)))))) }

::std::unicode::String::split_once::16 { x(n0 x(n1 x(tup(dup505(?(::std::data::List::pop_front::3 ::std::data::List::pop_front::2 x(x(n2 n3) x(x(n4 n5) enum(::std::unicode::String::split_once::21 enum(::std::unicode::String::split_once::22 x(n0 x(n1 x(tup(n3 tup(n5 n6)) n7)))))))) n2) tup(n4 n6)) x(tup(_ ref(n8 n8)) x(tup(_ ref(n9 n9)) n7))))) }

::std::unicode::String::split_once::21 { enum(n0 x(tup(dup2174(n1 n2) n3) x(tup(@add(1 n4) tup(n5 tup(n0 n6))) x(tup(dup2174(n7 @le$(n2 ?(::std::unicode::String::split_once::3 ::std::unicode::String::split_once::2 x(tup(n1 n3) x(tup(n4 tup(n5 n6)) x(tup(n7 n8) n9)))))) n8) n9)))) }

::std::unicode::String::split_once::22 { x(_ ::std::unicode::String::split_once::23) }

::std::unicode::String::split_once::23 { x(tup(@add(n0 n1) tup(n2 n3)) x(tup(n0 tup(n3 n4)) tup(tup(n1 tup(n2 n4)) ::std::logical::Option::None))) }

::std::IO::println { fn(ref(n0 n1) fn(tup(dup2547(?(::std::IO::print::3 ::std::IO::print::2 x(x(n0 @io_print_char(10 n1)) x(n2 n3))) n2) tup(n3 _)) _)) }

::std::IO::print { fn(ref(n0 n1) fn(tup(dup2547(?(::std::IO::print::3 ::std::IO::print::2 x(x(n0 n1) x(n2 n3))) n2) tup(n3 _)) _)) }

::std::IO::print::1 { x(n0 x(dup2547(?(::std::IO::print::3 ::std::IO::print::2 x(n0 x(n1 n2))) n1) n2)) }

::std::IO::print::2 { x(x(@io_print_char(n0 n1) n2) x(@sub(1 dup2547(?(::std::IO::print::3 ::std::IO::print::2 x(x(n1 n2) x(n3 n4))) n3)) tup(n0 n4))) }

::std::IO::print::3 { x(x(n0 n0) _) }

::std::IO::full_input { fn(ref(dup(n0 @io_read_byte(0 dup(dup2637(@ne(0 ?(::std::IO::full_input::4 ::std::IO::full_input::3 x(x(n1 n2) x(tup(0 tup(n3 n3)) x(n4 n5))))) n4) @seq$(n0 n1)))) n2) n5) }

::std::IO::full_input::1 { x(x(dup(n0 @io_read_byte(0 dup(dup2637(@ne(0 ?(::std::IO::full_input::4 ::std::IO::full_input::3 x(x(n1 n2) x(n3 x(n4 n5))))) n4) @seq$(n0 n1)))) n2) x(n3 n5)) }

::std::IO::full_input::3 { x(x(dup(n0 @io_read_byte(0 dup(dup2637(@ne(0 ?(::std::IO::full_input::4 ::std::IO::full_input::3 x(x(n1 n2) x(tup(n3 tup(n4 n5)) x(n6 n7))))) n6) @seq$(n0 n1)))) n2) x(tup(@add(1 n3) tup(n4 tup(n8 n5))) x(n8 n7))) }

::std::IO::full_input::4 { x(x(n0 n0) x(n1 x(_ n1))) }

