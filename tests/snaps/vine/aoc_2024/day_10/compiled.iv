
::std::logical::Option::None { enum(_ enum(r r)) }

::std::IO::print_char { fn(ref(@io_print_char(char io) io) fn(char _)) }

::std::IO::read_byte { fn(ref(dup(io0 @io_read_byte(default dup(byte @seq$(io0 io1)))) io1) fn(default byte)) }

::main { ::day_10::main }

::day_10::main {
  fn(ref(w1 w41) _)
  ::std::IO::full_input = fn(ref(w1 w6) w8)
  ::std::unicode::String::split_trim = fn(w8 fn(tup(1 tup(tup(10 w50) w50)) w15))
  ::std::data::List::map = fn(w15 fn(fn(w51 w51) w17))
  ::day_10::cross = fn(w17 fn(fn(dup13(w108 dup13(w110 dup13(w112 dup13(w114 dup13(@eq(48 ?(::day_10::main::5 ::day_10::main::4 x(w143 x(x(w66 w142) x(x(w68 w140) x(x(w70 w138) x(w77 x(w78 x(w85 x(w86 x(w93 x(w94 x(w101 x(w102 dup41(w118 dup41(w120 dup41(w122 w124))))))))))))))))) w143))))) fn(tup(tup(tup(w77 w78) tup(w108 w118)) tup(tup(tup(w85 w86) tup(w110 w120)) tup(tup(tup(w93 w94) tup(w112 w122)) tup(tup(w101 w102) tup(w114 w124))))) fn(ref(tup(w64 tup(w66 tup(w68 w70))) tup(w64 tup(w142 tup(w140 w138)))) _))) fn(tup(46 0) fn(ref(tup(w6 0) tup(w22 tup(_ tup(w26 w28)))) _))))
  ::std::numeric::N32::to_string::to_string = fn(w26 w38)
  w38 = tup(@add(8 w147) tup(w145 w148))
  ::std::IO::println = fn(ref(w22 w34) fn(tup(w147 tup(tup(83 tup(99 tup(111 tup(114 tup(101 tup(115 tup(58 tup(32 w145)))))))) w148)) _))
  ::std::numeric::N32::to_string::to_string = fn(w28 w45)
  w45 = tup(@add(9 w152) tup(w150 w153))
  ::std::IO::println = fn(ref(w34 w41) fn(tup(w152 tup(tup(82 tup(97 tup(116 tup(105 tup(110 tup(103 tup(115 tup(58 tup(32 w150))))))))) w153)) _))
}

::day_10::main::4 {
  x(_ x(x(dup50(w0 w2) w3) x(x(w19 w19) x(x(w17 w17) x(_ x(_ x(_ x(_ x(_ x(_ x(_ x(_ w6))))))))))))
  w2 = @add(1 w3)
  ::day_10::set = fn(w0 w5)
  w6 = tup(w5 1)
}

::day_10::main::5 {
  x(dup55(w0 w62) x(x(w36 w36) x(w34 x(w32 x(w30 x(w29 x(w28 x(w27 x(w26 x(w25 x(w24 x(w23 w64))))))))))))
  w0 = @sub(1 w1)
  dup69(w43 dup69(w49 dup69(w55 w61))) = w1
  ::day_10::main::6 = x(w43 x(x(0 w42) x(x(0 w40) w38)))
  w38 = fn(w30 fn(w29 _))
  ::day_10::main::6 = x(w49 x(x(w42 w48) x(x(w40 w46) w44)))
  w44 = fn(w28 fn(w27 _))
  ::day_10::main::6 = x(w55 x(x(w48 w54) x(x(w46 w52) w50)))
  w50 = fn(w26 fn(w25 _))
  ::day_10::main::6 = x(w61 x(x(w54 w60) x(x(w52 w58) w56)))
  w56 = fn(w24 fn(w23 _))
  w62 = @eq(57 w63)
  w63 = ?(::day_10::main::12 ::day_10::main::11 x(w34 x(w32 x(w60 x(w58 w64)))))
}

::day_10::main::6 {
  x(w12 x(w11 x(w9 w5)))
  w5 = fn(w0 fn(tup(w1 w2) w16))
  w0 = @eq(w12 w15)
  w15 = ?(::day_10::main::9 ::day_10::main::8 x(w11 x(w9 x(w1 x(w2 w16)))))
}

::day_10::main::8 {
  x(x(w12 w2) x(x(w10 w5) x(w8 x(w7 _))))
  w12 = @n32_or(w8 w2)
  w10 = @add(w7 w5)
}

::day_10::main::9 { x(x(w6 w6) x(x(w4 w4) _)) }

::day_10::main::11 {
  x(x(w13 w3) x(x(w11 w6) x(w9 x(w8 _))))
  ::day_10::count = fn(w9 w1)
  w13 = @add(w1 w3)
  w11 = @add(w8 w6)
}

::day_10::main::12 {
  x(x(w9 w9) x(x(w7 w7) x(w5 x(w4 w2))))
  w2 = tup(w5 w4)
}

::std::numeric::N32::to_string::to_string {
  fn(dup118(w5 w7) w6)
  w5 = ?(::std::numeric::N32::to_string::to_string::3 ::std::numeric::N32::to_string::to_string::2 x(w7 w6))
}

::std::numeric::N32::to_string::to_string::2 {
  x(w6 w4)
  ::std::numeric::N32::to_string::to_string::4 = x(w6 x(tup(0 tup(w7 w7)) w9))
  w4 = w9
}

::std::numeric::N32::to_string::to_string::3 {
  x(_ w0)
  w0 = tup(w3 tup(tup(48 w4) w5))
  1 = w3
  w4 = w5
}

::std::numeric::N32::to_string::to_string::4 {
  x(dup127(w0 w6) w2)
  w0 = ?(::std::numeric::N32::to_string::to_string::6 ::std::numeric::N32::to_string::to_string::5 x(w6 w2))
}

::std::numeric::N32::to_string::to_string::5 {
  x(dup130(w0 w7) x(w11 w15))
  w0 = @rem(10 w1)
  48 = @add(w1 w2)
  ::std::data::List::concat = fn(tup(1 tup(tup(w2 w13) w13)) fn(w11 w5))
  w7 = @div(10 w8)
  ::std::numeric::N32::to_string::to_string::4 = x(w8 x(w5 w15))
}

::std::numeric::N32::to_string::to_string::6 { x(_ x(w1 w1)) }

::day_10::set {
  fn(dup137(w3 dup137(w6 dup137(w11 w17))) w24)
  1 = @n32_shl(w3 w4)
  w6 = @n32_and(32 w7)
  ::day_10::set::f = fn(w7 fn(w4 fn(0 w9)))
  w11 = @n32_and(64 w12)
  ::day_10::set::f = fn(w12 fn(w9 fn(0 w15)))
  w17 = @n32_and(128 w18)
  ::day_10::set::f = fn(w18 fn(w15 fn(0 w23)))
  w24 = w23
}

::day_10::set::f {
  fn(w0 fn(w1 fn(w2 w8)))
  w0 = ?(::day_10::set::f::3 ::day_10::set::f::2 x(w1 x(w2 w8)))
}

::day_10::set::f::2 {
  x(w5 x(w4 w2))
  w2 = tup(w4 w5)
}

::day_10::set::f::3 {
  x(w5 x(w4 w2))
  w2 = tup(w5 w4)
}

::day_10::count {
  fn(w0 w13)
  tup(w4 w5) = w0
  ::day_10::count::6 = fn(w4 w9)
  ::day_10::count::6 = fn(w5 w12)
  w9 = @add(w12 w13)
}

::day_10::count::1 {
  fn(w0 w7)
  ::day_10::count::2 = x(w0 x(0 w7))
}

::day_10::count::2 {
  x(dup168(w0 w6) w2)
  w0 = ?(::day_10::count::4 ::day_10::count::3 x(w6 w2))
}

::day_10::count::3 {
  x(dup171(w0 w4) x(w7 w10))
  w0 = @n32_and(1 w1)
  w7 = @add(w1 w3)
  w4 = @n32_shr(1 w5)
  ::day_10::count::2 = x(w5 x(w3 w10))
}

::day_10::count::4 { x(_ x(w1 w1)) }

::day_10::count::5 {
  fn(tup(w0 w1) w11)
  ::day_10::count::1 = fn(w0 w7)
  ::day_10::count::1 = fn(w1 w10)
  w7 = @add(w10 w11)
}

::day_10::count::6 {
  fn(tup(w0 w1) w11)
  ::day_10::count::5 = fn(w0 w7)
  ::day_10::count::5 = fn(w1 w10)
  w7 = @add(w10 w11)
}

::day_10::Channel::send {
  fn(tup(w0 w7) fn(w3 w0))
  w7 = w3
}

::day_10::cross {
  fn(w0 fn(w1 fn(dup224(w18 dup224(w30 w23)) fn(ref(w4 w29) _))))
  ::std::data::List::get = fn(ref(w0 w9) fn(0 w11))
  ::std::data::List::len = fn(w11 w15)
  ::day_10::neglect_channel = fn(w18 w19)
  ::std::data::List::new = fn(w15 fn(w19 w20))
  ::day_10::cross::1 = x(w9 x(w1 x(w30 x(x(w4 w29) x(w20 w27)))))
  ::day_10::drop_all = fn(w27 fn(w23 _))
}

::day_10::cross::1 {
  x(w11 w10)
  ::std::data::List::pop_front = fn(ref(w11 w1) w3)
  w3 = enum(::day_10::cross::4 enum(::day_10::cross::5 x(w1 w10)))
}

::day_10::cross::4 {
  enum(w0 x(w8 x(dup242(w32 w38) x(dup243(w9 dup243(w14 w37)) x(x(w5 w36) x(w3 w34))))))
  ::day_10::neglect_channel = fn(w9 w10)
  ::std::data::List::iter = fn(ref(w3 w17) w19)
  ::day_10::cross::7 = x(w32 x(x(w5 w31) x(w0 x(x(w10 w28) x(w19 w26)))))
  ::std::data::List::Iter::drop = fn(ref(w26 _) _)
  ::day_10::Channel::send = fn(w28 fn(w14 _))
  ::day_10::cross::1 = x(w8 x(w38 x(w37 x(x(w31 w36) x(w17 w34)))))
}

::day_10::cross::5 { x(_ x(_ x(_ x(x(w3 w3) x(w1 w1))))) }

::day_10::cross::7 {
  x(w12 x(w11 x(w9 w8)))
  ::std::data::List::pop_front = fn(ref(w9 w1) w3)
  w3 = enum(::day_10::cross::10 enum(::day_10::cross::11 x(w12 x(w11 x(w1 w8)))))
}

::day_10::cross::10 {
  enum(w0 x(dup269(w26 w44) x(x(w8 w43) x(w6 x(x(w5 w40) x(w3 w38))))))
  ::day_10::foo_channel = fn(ref(w5 w11) w13)
  tup(w14 w15) = w13
  ::std::data::List::Iter::next = fn(ref(w3 w18) w20)
  ::std::logical::Option::unwrap = fn(w20 w21)
  ::day_10::foo_channel = fn(w21 w22)
  tup(w23 w24) = w22
  w26 = fn(w0 fn(tup(w23 tup(w24 tup(w15 w14))) fn(ref(w8 w34) _)))
  ::day_10::cross::7 = x(w44 x(x(w34 w43) x(w6 x(x(w11 w40) x(w18 w38)))))
}

::day_10::cross::11 { x(_ x(x(w6 w6) x(_ x(x(w3 w3) x(w1 w1))))) }

::day_10::drop_all {
  fn(w0 fn(w1 _))
  ::day_10::drop_all::1 = x(w0 w1)
}

::day_10::drop_all::1 {
  x(w6 w5)
  ::std::data::List::pop_front = fn(ref(w6 w1) w3)
  w3 = enum(::day_10::drop_all::4 enum(_ x(w1 w5)))
}

::day_10::drop_all::4 {
  enum(w0 x(w3 dup298(w5 w7)))
  ::day_10::Channel::send = fn(w0 fn(w5 _))
  ::day_10::drop_all::1 = x(w3 w7)
}

::day_10::foo_channel {
  fn(ref(w1 w12) w15)
  tup(w8 w9) = ::day_10::new_channel
  w12 = w8
  w15 = tup(w1 w9)
}

::day_10::new_channel { tup(tup(dup308(_ w4) w6) tup(dup309(_ w6) w4)) }

::day_10::neglect_channel {
  fn(w0 w4)
  w4 = tup(w0 _)
}

::std::data::List::len {
  fn(ref(w1 w6) w11)
  w1 = tup(w10 w8)
  w6 = tup(w7 w8)
  w10 = dup317(w11 w7)
}

::std::data::List::new {
  fn(w0 fn(w1 w10))
  ::std::data::List::new::1 = x(w0 x(w1 x(tup(0 tup(w8 w8)) w10)))
}

::std::data::List::new::1 {
  x(dup328(w0 w9) w4)
  w0 = @lt$(0 w1)
  w1 = ?(::std::data::List::new::3 ::std::data::List::new::2 x(w9 w4))
}

::std::data::List::new::2 {
  x(w10 x(dup334(w3 w13) x(w8 w12)))
  ::std::data::List::push_back = fn(ref(w8 w1) fn(w3 _))
  w10 = @sub(1 w6)
  ::std::data::List::new::1 = x(w6 x(w13 x(w1 w12)))
}

::std::data::List::new::3 { x(_ x(_ x(w1 w1))) }

::std::data::List::get {
  fn(ref(tup(w1 tup(w3 w5)) tup(w1 tup(w4 w5))) fn(w9 w13))
  ::std::data::List::get::1 = x(x(ref(w3 w4) w24) w9)
  w13 = ref(w14 w15)
  ref(tup(w14 w16) tup(w15 w16)) = w24
}

::std::data::List::get::1 {
  x(w3 dup348(w0 w4))
  w0 = ?(::std::data::List::get::3 ::std::data::List::get::2 x(w3 w4))
}

::std::data::List::get::2 {
  x(x(w14 w17) w12)
  ref(tup(w1 w3) tup(w1 w4)) = w14
  w12 = @sub(1 w11)
  ::std::data::List::get::1 = x(x(ref(w3 w4) w17) w11)
}

::std::data::List::get::3 { x(x(w2 w2) _) }

::std::data::List::map {
  fn(tup(dup380(w6 w22) tup(w1 _)) fn(w3 w16))
  ::std::data::List::map::1 = x(w22 x(w1 x(w3 x(w10 w19))))
  w16 = tup(w6 tup(w10 w19))
}

::std::data::List::map::1 {
  x(dup390(w0 w10) w4)
  w0 = ?(::std::data::List::map::3 ::std::data::List::map::2 x(w10 w4))
}

::std::data::List::map::2 {
  x(w23 x(w22 x(dup399(w7 w26) x(w20 w25))))
  tup(w1 w2) = w22
  w7 = fn(w1 w9)
  w20 = tup(w9 w11)
  w23 = @sub(1 w18)
  ::std::data::List::map::1 = x(w18 x(w2 x(w26 x(w11 w25))))
}

::std::data::List::map::3 { x(_ x(_ x(_ x(w1 w1)))) }

::std::data::List::pop_front {
  fn(ref(tup(dup409(w12 w16) tup(w3 w4)) tup(w17 tup(w15 w4))) w13)
  w12 = ?(::std::data::List::pop_front::3 ::std::data::List::pop_front::2 x(x(w16 w17) x(x(w3 w15) w13)))
}

::std::data::List::pop_front::2 {
  x(x(w14 w1) x(x(w12 w7) w9))
  w14 = @sub(1 w1)
  tup(w3 w4) = w12
  w7 = w4
  w9 = enum(enum(w3 w15) enum(_ w15))
}

::std::data::List::pop_front::3 { x(x(w4 w4) x(x(w2 w2) ::std::logical::Option::None)) }

::std::data::List::concat {
  fn(w0 fn(w1 w22))
  tup(w5 tup(w6 w15)) = w0
  tup(w10 tup(w11 w21)) = w1
  w15 = w11
  w5 = @add(w10 w18)
  w22 = tup(w18 tup(w6 w21))
}

::std::data::List::push_back {
  fn(ref(w1 w9) fn(w3 _))
  ::std::data::List::concat = fn(w1 fn(tup(1 tup(tup(w3 w11) w11)) w9))
}

::std::data::List::iter {
  fn(ref(tup(dup557(w0 w10) tup(w3 w4)) tup(w0 tup(w12 w4))) w14)
  w14 = tup(w10 ref(w3 w12))
}

::std::data::List::Iter::next {
  fn(ref(tup(dup563(w11 w15) w3) tup(w16 w14)) w12)
  w11 = ?(::std::data::List::Iter::next::3 ::std::data::List::Iter::next::2 x(x(w15 w16) x(x(w3 w14) w12)))
}

::std::data::List::Iter::next::2 {
  x(x(w20 w1) x(x(w18 w13) w15))
  w20 = @sub(1 w1)
  ref(tup(w4 w7) tup(w5 w8)) = w18
  w13 = ref(w7 w8)
  w15 = enum(enum(ref(w4 w5) w21) enum(_ w21))
}

::std::data::List::Iter::next::3 {
  x(x(w8 w8) x(x(w6 _) ::std::logical::Option::None))
  ref(w2 w2) = w6
}

::std::data::List::Iter::drop {
  fn(ref(w1 _) _)
  tup(_ ref(w7 w7)) = w1
}

::std::logical::Option::unwrap {
  fn(w0 w7)
  w0 = enum(::std::logical::Option::unwrap::3 enum(_ w7))
}

::std::logical::Option::unwrap::3 { enum(w0 w0) }

::std::unicode::String::len { fn(ref(tup(dup2100(w0 w13) w2) tup(w0 w2)) w13) }

::std::unicode::String::split_trim {
  fn(w0 fn(w1 w11))
  ::std::unicode::String::split_trim::1 = x(w0 x(w1 x(tup(0 tup(w10 w10)) x(1 x(x(_ 1) w11)))))
}

::std::unicode::String::split_trim::1 {
  x(w24 x(dup2133(w1 w44) x(w22 x(w21 x(x(w20 w41) w39)))))
  ::std::unicode::String::split_once = fn(w24 fn(w1 w2))
  tup(w3 w4) = w2
  ::std::unicode::String::len = fn(ref(w3 w7) w9)
  w9 = @eq(0 w10)
  dup2144(w25 w34) = w10
  w25 = ?(::std::unicode::String::split_trim::4 ::std::unicode::String::split_trim::3 x(w21 w26))
  dup2137(w28 w42) = w26
  w28 = ?(::std::unicode::String::split_trim::10 ::std::unicode::String::split_trim::9 x(x(w22 w33) x(w31 x(w7 _))))
  w34 = ?(::std::unicode::String::split_trim::16 ::std::unicode::String::split_trim::15 x(w36 w35))
  dup2139(w20 w31) = w35
  w4 = enum(::std::unicode::String::split_trim::23 enum(::std::unicode::String::split_trim::24 x(w44 x(w33 x(w42 x(x(w36 w41) w39))))))
}

::std::unicode::String::split_trim::3 {
  x(w2 w3)
  w2 = ?(::std::unicode::String::split_trim::6 1 w3)
}

::std::unicode::String::split_trim::4 {
  x(_ w2)
  0 = w2
}

::std::unicode::String::split_trim::6 {
  r
  0 = r
}

::std::unicode::String::split_trim::9 { x(x(w4 w4) _) }

::std::unicode::String::split_trim::10 {
  x(w5 x(w0 w2))
  w0 = ?(::std::unicode::String::split_trim::12 ::std::unicode::String::split_trim::11 x(w5 w2))
}

::std::unicode::String::split_trim::11 { x(x(w3 w3) _) }

::std::unicode::String::split_trim::12 {
  x(x(w7 w3) x(w5 _))
  ::std::data::List::concat = fn(w7 fn(tup(1 tup(tup(w5 w8) w8)) w3))
}

::std::unicode::String::split_trim::15 {
  x(w0 w3)
  w0 = ?(::std::unicode::String::split_trim::18 1 w3)
}

::std::unicode::String::split_trim::16 {
  x(_ w2)
  0 = w2
}

::std::unicode::String::split_trim::18 {
  r
  0 = r
}

::std::unicode::String::split_trim::23 {
  enum(w0 w7)
  ::std::unicode::String::split_trim::1 = x(w0 w7)
}

::std::unicode::String::split_trim::24 { x(_ x(w4 x(_ x(x(w2 w2) w4)))) }

::std::unicode::String::split_once {
  fn(w0 fn(w1 w16))
  ::std::unicode::String::split_once::1 = x(w1 x(tup(0 tup(w15 w15)) x(w0 w16)))
}

::std::unicode::String::split_once::1 {
  x(w12 x(w11 x(w10 w13)))
  ::std::unicode::String::len = fn(ref(w10 w1) w3)
  ::std::unicode::String::len = fn(ref(w12 w5) w7)
  w3 = @le$(w7 w8)
  w8 = ?(::std::unicode::String::split_once::3 ::std::unicode::String::split_once::2 x(w5 x(w11 x(w1 w13))))
}

::std::unicode::String::split_once::2 {
  x(w27 x(w26 x(w25 w50)))
  ::std::data::List::iter = fn(ref(w27 w2) w5)
  ::std::data::List::iter = fn(ref(w25 w9) w12)
  ::std::unicode::String::split_once::5 = x(w2 x(w26 x(w9 x(w5 x(w12 w50)))))
}

::std::unicode::String::split_once::3 {
  x(_ w2)
  ::std::unicode::String::split_once::23 = w2
}

::std::unicode::String::split_once::5 {
  x(w10 x(w9 x(w8 x(w7 w6))))
  ::std::data::List::Iter::next = fn(ref(w7 w1) w3)
  w3 = enum(::std::unicode::String::split_once::8 enum(::std::unicode::String::split_once::9 x(w10 x(w9 x(w8 x(w1 w6))))))
}

::std::unicode::String::split_once::8 {
  enum(w0 x(w9 x(w8 x(w7 x(w6 x(w5 w15))))))
  w0 = ref(dup2223(w1 w16) w1)
  ::std::data::List::Iter::next = fn(ref(w5 w11) w13)
  w13 = enum(::std::unicode::String::split_once::12 enum(::std::unicode::String::split_once::13 x(w9 x(w8 x(w7 x(w6 x(w11 x(w16 w15))))))))
}

::std::unicode::String::split_once::9 {
  x(_ x(w4 x(w3 x(_ w1))))
  ::std::unicode::String::split_once::14 = x(w4 x(w3 w1))
}

::std::unicode::String::split_once::12 {
  enum(w0 x(w10 x(w9 x(w8 x(w7 x(w6 x(w5 w15)))))))
  w0 = ref(dup2237(w1 w13) w1)
  w5 = @ne(w13 w14)
  w14 = ?(::std::unicode::String::split_once::17 ::std::unicode::String::split_once::16 x(w10 x(w9 x(w8 x(w7 x(w6 w15))))))
}

::std::unicode::String::split_once::13 {
  x(_ x(w5 x(w4 x(_ x(w2 x(_ w7))))))
  ::std::unicode::String::split_once::14 = x(w5 x(w4 x(w2 w7)))
}

::std::unicode::String::split_once::14 {
  x(w3 x(w2 x(w1 w25)))
  tup(w6 ref(w8 _)) = w1
  tup(_ tup(_ w12)) = w2
  w25 = tup(w3 enum(enum(tup(w6 tup(w8 w12)) w26) enum(_ w26)))
}

::std::unicode::String::split_once::16 {
  x(w5 x(w4 x(w3 x(w2 x(w1 w37)))))
  ::std::data::List::Iter::drop = fn(ref(w2 _) _)
  ::std::data::List::Iter::drop = fn(ref(w1 _) _)
  ::std::data::List::pop_front = fn(ref(w3 w32) w35)
  w35 = enum(::std::unicode::String::split_once::21 enum(::std::unicode::String::split_once::22 x(w5 x(w4 x(w32 w37)))))
}

::std::unicode::String::split_once::17 {
  w5
  ::std::unicode::String::split_once::5 = w5
}

::std::unicode::String::split_once::21 {
  enum(w0 x(w5 x(w4 w3)))
  ::std::data::List::concat = fn(w4 fn(tup(1 tup(tup(w0 w12) w12)) w11))
  ::std::unicode::String::split_once::1 = x(w5 x(w11 w3))
}

::std::unicode::String::split_once::22 {
  x(_ w2)
  ::std::unicode::String::split_once::23 = w2
}

::std::unicode::String::split_once::23 {
  x(w14 x(w13 w11))
  ::std::data::List::concat = fn(w14 fn(w13 w10))
  w11 = tup(w10 ::std::logical::Option::None)
}

::std::IO::println {
  fn(ref(w1 w12) fn(w3 _))
  ::std::IO::print = fn(ref(w1 w7) fn(w3 _))
  ::std::IO::print_char = fn(ref(w7 w12) fn(10 _))
}

::std::IO::print {
  fn(ref(w1 w16) fn(w3 _))
  tup(w7 tup(w8 _)) = w3
  ::std::IO::print::1 = x(x(w1 w16) x(w7 w8))
}

::std::IO::print::1 {
  x(w4 x(dup2473(w0 w6) w1))
  w0 = ?(::std::IO::print::3 ::std::IO::print::2 x(w4 x(w6 w1)))
}

::std::IO::print::2 {
  x(x(w17 w21) x(w15 w14))
  w15 = @sub(1 w1)
  tup(w4 w5) = w14
  ::std::IO::print_char = fn(ref(w17 w10) fn(w4 _))
  ::std::IO::print::1 = x(x(w10 w21) x(w1 w5))
}

::std::IO::print::3 { x(x(w3 w3) _) }

::std::IO::full_input {
  fn(ref(w1 w13) w10)
  ::std::IO::full_input::1 = x(x(w1 w13) x(tup(0 tup(w9 w9)) w10))
}

::std::IO::full_input::1 {
  x(x(w9 w16) x(w7 w12))
  ::std::IO::read_byte = fn(ref(w9 w1) fn(0 w3))
  dup2563(w10 w13) = w3
  w10 = @ne(0 w11)
  w11 = ?(::std::IO::full_input::4 ::std::IO::full_input::3 x(x(w1 w16) x(w7 x(w13 w12))))
}

::std::IO::full_input::3 {
  x(w8 x(w6 x(w5 w16)))
  ::std::data::List::concat = fn(w6 fn(tup(1 tup(tup(w5 w9) w9)) w3))
  ::std::IO::full_input::1 = x(w8 x(w3 w16))
}

::std::IO::full_input::4 {
  x(x(w7 w7) x(w5 x(_ w2)))
  w2 = w5
}

