
::std::logical::Option::None { enum(_ enum(n0 n0)) }

::main { ::day_10::main }

::day_10::main {
  fn(ref(w1 w41) _)
  ::std::IO::full_input = fn(ref(w1 w6) w8)
  ::std::unicode::String::split_trim = fn(w8 fn(tup(1 tup(tup(10 w50) w50)) w15))
  ::std::data::List::map = fn(w15 fn(fn(w51 w51) w17))
  ::std::unicode::Char::eq::eq = fn(ref(w126 w127) fn(ref(48 _) ?(::day_10::main::5 ::day_10::main::4 x(w127 x(x(w66 w145) x(x(w68 w143) x(x(w70 w141) x(w77 x(w78 x(w85 x(w86 x(w93 x(w94 x(w101 x(w102 dup42(w118 dup42(w120 dup42(w122 w124))))))))))))))))))
  ::day_10::cross = fn(w17 fn(fn(dup13(w108 dup13(w110 dup13(w112 dup13(w114 w126)))) fn(tup(tup(tup(w77 w78) tup(w108 w118)) tup(tup(tup(w85 w86) tup(w110 w120)) tup(tup(tup(w93 w94) tup(w112 w122)) tup(tup(w101 w102) tup(w114 w124))))) fn(ref(tup(w64 tup(w66 tup(w68 w70))) tup(w64 tup(w145 tup(w143 w141)))) _))) fn(tup(46 0) fn(ref(tup(w6 0) tup(w22 tup(_ tup(w26 w28)))) _))))
  ::std::numeric::N32::to_string::to_string = fn(w26 tup(@n32_add(8 w147) tup(w148 w149)))
  ::std::IO::println = fn(ref(w22 w34) fn(tup(w147 tup(tup(83 tup(99 tup(111 tup(114 tup(101 tup(115 tup(58 tup(32 w148)))))))) w149)) _))
  ::std::numeric::N32::to_string::to_string = fn(w28 tup(@n32_add(9 w152) tup(w153 w154)))
  ::std::IO::println = fn(ref(w34 w41) fn(tup(w152 tup(tup(82 tup(97 tup(116 tup(105 tup(110 tup(103 tup(115 tup(58 tup(32 w153))))))))) w154)) _))
}

::day_10::main::4 {
  x(_ x(x(dup51(w0 w2) w3) x(x(w19 w19) x(x(w17 w17) x(_ x(_ x(_ x(_ x(_ x(_ x(_ x(_ tup(w5 1)))))))))))))
  ::std::numeric::N32::add::add = fn(w2 fn(1 w3))
  ::day_10::set = fn(w0 w5)
}

::day_10::main::5 {
  x(dup56(w0 w66) x(x(w36 w36) x(w34 x(w32 x(w30 x(w29 x(w28 x(w27 x(w26 x(w25 x(w24 x(w23 w71))))))))))))
  ::std::unicode::Char::sub_n32::sub = fn(w0 fn(1 w1))
  ::day_10::main::6 = x(x(w1 w44) x(x(0 w42) x(x(0 w40) fn(w30 fn(w29 _)))))
  ::day_10::main::6 = x(x(w44 w51) x(x(w42 w49) x(x(w40 w47) fn(w28 fn(w27 _)))))
  ::day_10::main::6 = x(x(w51 w58) x(x(w49 w56) x(x(w47 w54) fn(w26 fn(w25 _)))))
  ::day_10::main::6 = x(x(w58 _) x(x(w56 w63) x(x(w54 w61) fn(w24 fn(w23 _)))))
  ::std::unicode::Char::eq::eq = fn(ref(w66 _) fn(ref(57 _) ?(::day_10::main::12 ::day_10::main::11 x(w34 x(w32 x(w63 x(w61 w71)))))))
}

::day_10::main::6 { x(x(dup124(n0 n1) n0) x(n2 x(n3 fn(dup123(_ @n32_eq(n1 ?(::day_10::main::9 ::day_10::main::8 x(n2 x(n3 x(n4 x(n5 n6))))))) fn(tup(n4 n5) n6))))) }

::day_10::main::8 { x(x(tup(tup(tup(@n32_or(n0 n1) @n32_or(n2 n3)) tup(@n32_or(n4 n5) @n32_or(n6 n7))) tup(tup(@n32_or(n8 n9) @n32_or(n10 n11)) tup(@n32_or(n12 n13) @n32_or(n14 n15)))) tup(tup(tup(n1 n3) tup(n5 n7)) tup(tup(n9 n11) tup(n13 n15)))) x(x(@n32_add(n16 n17) n17) x(tup(tup(tup(n0 n2) tup(n4 n6)) tup(tup(n8 n10) tup(n12 n14))) x(n16 _)))) }

::day_10::main::9 { x(x(n0 n0) x(x(n1 n1) _)) }

::day_10::main::11 {
  x(x(w13 w3) x(x(w11 w6) x(w9 x(w8 _))))
  ::day_10::count = fn(w9 w1)
  ::std::numeric::N32::add::add = fn(w13 fn(w1 w3))
  ::std::numeric::N32::add::add = fn(w11 fn(w8 w6))
}

::day_10::main::12 { x(x(w9 w9) x(x(w7 w7) x(w5 x(w4 tup(w5 w4))))) }

::std::unicode::Char::eq::eq { fn(ref(dup123(n0 @n32_eq(n1 n2)) n0) fn(ref(dup124(n3 n1) n3) n2)) }

::std::numeric::N32::add::add { fn(@n32_add(n0 n1) fn(n0 n1)) }

::std::unicode::Char::sub_n32::sub { fn(@n32_sub(w1 out) fn(w1 out)) }

::std::numeric::N32::to_string::to_string { fn(dup177(n0 @n32_ne(0 ?(::std::numeric::N32::to_string::to_string::3 ::std::numeric::N32::to_string::to_string::2 x(n0 n1)))) n1) }

::std::numeric::N32::to_string::to_string::2 { x(dup177(n0 @n32_ne(0 ?(::std::numeric::N32::to_string::to_string::6 ::std::numeric::N32::to_string::to_string::5 x(n0 x(tup(0 tup(n1 n1)) n2))))) n2) }

::std::numeric::N32::to_string::to_string::3 { x(_ tup(1 tup(tup(48 n0) n0))) }

::std::numeric::N32::to_string::to_string::5 { x(dup171(@n32_rem(10 @n32_add$(48 n0)) @n32_div(10 dup177(n1 @n32_ne(0 ?(::std::numeric::N32::to_string::to_string::6 ::std::numeric::N32::to_string::to_string::5 x(n1 x(tup(n2 tup(tup(n0 n3) n4)) n5))))))) x(tup(@n32_add$(1 n2) tup(n3 n4)) n5)) }

::std::numeric::N32::to_string::to_string::6 { x(_ x(n0 n0)) }

::day_10::set {
  fn(dup204(w3 dup204(w6 dup204(w11 w17))) w23)
  ::std::numeric::N32::shl::shl = fn(1 fn(w3 w4))
  ::std::numeric::N32::and::and = fn(w6 fn(32 w7))
  ::day_10::set::f = fn(w7 fn(w4 fn(0 w9)))
  ::std::numeric::N32::and::and = fn(w11 fn(64 w12))
  ::day_10::set::f = fn(w12 fn(w9 fn(0 w15)))
  ::std::numeric::N32::and::and = fn(w17 fn(128 w18))
  ::day_10::set::f = fn(w18 fn(w15 fn(0 w23)))
}

::std::numeric::N32::shl::shl { fn(@n32_shl(w1 out) fn(w1 out)) }

::std::numeric::N32::and::and { fn(@n32_and(n0 n1) fn(n0 n1)) }

::day_10::set::f { fn(dup231(_ @n32_eq(0 ?(::day_10::set::f::3 ::day_10::set::f::2 x(n0 x(n1 n2))))) fn(n0 fn(n1 n2))) }

::day_10::set::f::2 { x(n0 x(n1 tup(n0 n1))) }

::day_10::set::f::3 { x(n0 x(n1 tup(n1 n0))) }

::day_10::count {
  fn(tup(w4 w5) w13)
  ::std::numeric::N32::add::add = fn(w9 fn(w12 w13))
  ::day_10::count::6 = fn(w4 w9)
  ::day_10::count::6 = fn(w5 w12)
}

::day_10::count::3 { x(dup251(@n32_and(1 n0) @n32_shr(1 dup177(n1 @n32_ne(0 ?(::day_10::count::4 ::day_10::count::3 x(n1 x(n2 n3))))))) x(@n32_add(n0 n2) n3)) }

::day_10::count::4 { x(_ x(n0 n0)) }

::day_10::count::6 { fn(tup(tup(dup177(n0 @n32_ne(0 ?(::day_10::count::4 ::day_10::count::3 x(n0 x(0 @n32_add(n1 @n32_add(n2 n3))))))) dup177(n4 @n32_ne(0 ?(::day_10::count::4 ::day_10::count::3 x(n4 x(0 n1)))))) tup(dup177(n5 @n32_ne(0 ?(::day_10::count::4 ::day_10::count::3 x(n5 x(0 @n32_add(n6 n2)))))) dup177(n7 @n32_ne(0 ?(::day_10::count::4 ::day_10::count::3 x(n7 x(0 n6))))))) n3) }

::day_10::cross {
  fn(w0 fn(w1 fn(dup309(w18 dup309(w30 w23)) fn(ref(w4 w29) _))))
  ::std::data::List::get = fn(ref(w0 w9) fn(0 w12))
  ::std::data::List::len = fn(w12 w15)
  ::day_10::neglect_channel = fn(w18 w19)
  ::std::data::List::new = fn(w15 fn(w19 w20))
  ::day_10::cross::1 = x(w9 x(w1 x(w30 x(x(w4 w29) x(w20 w27)))))
  ::day_10::drop_all = fn(w27 fn(w23 _))
}

::day_10::cross::1 { x(tup(dup177(n0 @n32_ne(0 ?(::std::data::List::pop_front::3 ::std::data::List::pop_front::2 x(x(n0 n1) x(x(n2 n3) enum(::day_10::cross::4 enum(::day_10::cross::5 x(tup(n1 tup(n3 n4)) n5)))))))) tup(n2 n4)) n5) }

::day_10::cross::4 { enum(tup(dup177(n0 @n32_ne(0 ?(::std::data::List::pop_front::3 ::std::data::List::pop_front::2 x(x(n0 n1) x(x(n2 n3) enum(::day_10::cross::10 enum(::day_10::cross::11 x(n4 x(x(n5 n6) x(tup(n1 tup(n3 n7)) x(x(tup(n8 _) tup(_ n9)) x(tup(n10 ref(n11 n12)) tup(_ ref(n13 n13)))))))))))))) tup(n2 n7)) x(tup(dup177(n14 @n32_ne(0 ?(::std::data::List::pop_front::3 ::std::data::List::pop_front::2 x(x(n14 n15) x(x(n16 n17) enum(::day_10::cross::4 enum(::day_10::cross::5 x(tup(n15 tup(n17 n18)) x(n19 x(n20 x(x(n6 n21) x(tup(n22 tup(n12 n23)) n24)))))))))))) tup(n16 n18)) x(dup327(n4 n19) x(dup328(n8 dup328(n9 n20)) x(x(n5 n21) x(tup(dup670(n22 n10) tup(n11 n23)) n24)))))) }

::day_10::cross::5 { x(_ x(_ x(_ x(x(n0 n0) x(n1 n1))))) }

::day_10::cross::10 { enum(n0 x(dup354(fn(n0 fn(tup(n1 tup(tup(dup394(_ n2) n3) tup(tup(dup394(_ n4) n5) n6))) fn(ref(n7 n8) _))) n9) x(x(n7 n10) x(tup(dup177(n11 @n32_ne(0 ?(::std::data::List::pop_front::3 ::std::data::List::pop_front::2 x(x(n11 n12) x(x(n13 n14) enum(::day_10::cross::10 enum(::day_10::cross::11 x(n9 x(x(n8 n10) x(tup(n12 tup(n14 n15)) x(x(tup(dup393(_ n5) n4) n16) x(tup(n17 n18) n19)))))))))))) tup(n13 n15)) x(x(n6 n16) x(tup(dup177(n20 @n32_ne(0 ?(::std::data::List::Iter::next::3 ::std::data::List::Iter::next::2 x(x(n20 n17) x(x(n21 n18) enum(::std::logical::Option::unwrap::3 enum(_ ref(n1 tup(dup393(_ n3) n2))))))))) n21) n19)))))) }

::day_10::cross::11 { x(_ x(x(n0 n0) x(_ x(x(n1 n1) x(n2 n2))))) }

::day_10::drop_all {
  fn(w0 fn(w1 _))
  ::day_10::drop_all::1 = x(w0 w1)
}

::day_10::drop_all::1 { x(tup(dup177(n0 @n32_ne(0 ?(::std::data::List::pop_front::3 ::std::data::List::pop_front::2 x(x(n0 n1) x(x(n2 n3) enum(::day_10::drop_all::4 enum(_ x(tup(n1 tup(n3 n4)) n5)))))))) tup(n2 n4)) n5) }

::day_10::drop_all::4 { enum(tup(_ n0) x(tup(dup177(n1 @n32_ne(0 ?(::std::data::List::pop_front::3 ::std::data::List::pop_front::2 x(x(n1 n2) x(x(n3 n4) enum(::day_10::drop_all::4 enum(_ x(tup(n2 tup(n4 n5)) n6)))))))) tup(n3 n5)) dup383(n0 n6))) }

::day_10::neglect_channel { fn(n0 tup(n0 _)) }

::std::data::List::len { fn(ref(tup(dup402(w11 w7) w8) tup(w7 w8)) w11) }

::std::data::List::new {
  fn(w0 fn(w1 w10))
  ::std::data::List::new::1 = x(w0 x(w1 x(tup(0 tup(w8 w8)) w10)))
}

::std::data::List::new::1 { x(dup433(n0 @n32_lt$(0 ?(::std::data::List::new::3 ::std::data::List::new::2 x(n0 n1)))) n1) }

::std::data::List::new::2 { x(@n32_sub(1 dup433(n0 @n32_lt$(0 ?(::std::data::List::new::3 ::std::data::List::new::2 x(n0 x(n1 x(tup(n2 tup(n3 n4)) n5))))))) x(dup420(n6 n1) x(tup(@n32_add(1 n2) tup(n3 tup(n6 n4))) n5))) }

::std::data::List::new::3 { x(_ x(_ x(n0 n0))) }

::std::data::List::get {
  fn(ref(tup(w1 tup(w3 w5)) tup(w1 tup(w4 w5))) fn(w9 ref(w14 w15)))
  ::std::data::List::get::1 = x(x(ref(w3 w4) ref(tup(w14 w16) tup(w15 w16))) w9)
}

::std::data::List::get::1 { x(n0 dup177(n1 @n32_ne(0 ?(::std::data::List::get::3 ::std::data::List::get::2 x(n0 n1))))) }

::std::data::List::get::2 { x(x(ref(tup(n0 n1) tup(n0 n2)) n3) @n32_sub(1 dup177(n4 @n32_ne(0 ?(::std::data::List::get::3 ::std::data::List::get::2 x(x(ref(n1 n2) n3) n4)))))) }

::std::data::List::get::3 { x(x(n0 n0) _) }

::std::data::List::map {
  fn(tup(dup496(w6 w22) tup(w1 _)) fn(w3 tup(w6 tup(w10 w19))))
  ::std::data::List::map::1 = x(w22 x(w1 x(w3 x(w10 w19))))
}

::std::data::List::map::1 { x(dup177(n0 @n32_ne(0 ?(::std::data::List::map::3 ::std::data::List::map::2 x(n0 n1)))) n1) }

::std::data::List::map::2 { x(@n32_sub(1 dup177(n0 @n32_ne(0 ?(::std::data::List::map::3 ::std::data::List::map::2 x(n0 x(n1 x(n2 x(n3 n4)))))))) x(tup(n5 n1) x(dup516(fn(n5 n6) n2) x(tup(n6 n3) n4)))) }

::std::data::List::map::3 { x(_ x(_ x(_ x(n0 n0)))) }

::std::data::List::pop_front::2 { x(x(@n32_sub(1 n0) n0) x(x(tup(n1 n2) n2) enum(enum(n1 n3) enum(_ n3)))) }

::std::data::List::pop_front::3 { x(x(n0 n0) x(x(n1 n1) ::std::logical::Option::None)) }

::std::data::List::Iter::next::2 { x(x(@n32_sub(1 n0) n0) x(x(ref(tup(n1 n2) tup(n3 n4)) ref(n2 n4)) enum(enum(ref(n1 n3) n5) enum(_ n5)))) }

::std::data::List::Iter::next::3 { x(x(n0 n0) x(x(ref(n1 n1) _) ::std::logical::Option::None)) }

::std::logical::Option::unwrap::3 { enum(n0 n0) }

::std::unicode::String::split_trim {
  fn(w0 fn(w1 w11))
  ::std::unicode::String::split_trim::1 = x(w0 x(w1 x(tup(0 tup(w10 w10)) x(1 x(x(_ 1) w11)))))
}

::std::unicode::String::split_trim::1 { x(tup(dup2799(n0 dup493(_ n1)) n2) x(dup2832(tup(dup2799(n3 dup492(_ @n32_le(n1 ?(::std::unicode::String::split_once::3 ::std::unicode::String::split_once::2 x(tup(n3 n4) x(tup(0 tup(n5 n5)) x(tup(n0 n2) tup(tup(dup2799(n6 dup231(_ @n32_eq(0 dup2843(?(::std::unicode::String::split_trim::4 ::std::unicode::String::split_trim::3 x(n7 dup2836(?(::std::unicode::String::split_trim::10 ::std::unicode::String::split_trim::9 x(x(n8 n9) x(n10 x(tup(n6 n11) _)))) n12))) ?(::std::unicode::String::split_trim::16 ::std::unicode::String::split_trim::15 x(n13 dup2838(n14 n10))))))) n11) enum(::std::unicode::String::split_trim::23 enum(::std::unicode::String::split_trim::24 x(n15 x(n9 x(n12 x(x(n13 n16) n17)))))))))))))) n4) n15) x(n8 x(n7 x(x(n14 n16) n17))))) }

::std::unicode::String::split_trim::3 { x(?(0 1 n0) n0) }

::std::unicode::String::split_trim::4 { x(_ 0) }

::std::unicode::String::split_trim::9 { x(x(n0 n0) _) }

::std::unicode::String::split_trim::10 { x(n0 x(?(::std::unicode::String::split_trim::12 ::std::unicode::String::split_trim::11 x(n0 n1)) n1)) }

::std::unicode::String::split_trim::11 { x(x(n0 n0) _) }

::std::unicode::String::split_trim::12 { x(x(tup(@n32_add(1 n0) tup(n1 tup(n2 n3))) tup(n0 tup(n1 n3))) x(n2 _)) }

::std::unicode::String::split_trim::15 { x(?(0 1 n0) n0) }

::std::unicode::String::split_trim::16 { x(_ 0) }

::std::unicode::String::split_trim::23 { enum(tup(dup2799(n0 dup493(_ n1)) n2) x(dup2832(tup(dup2799(n3 dup492(_ @n32_le(n1 ?(::std::unicode::String::split_once::3 ::std::unicode::String::split_once::2 x(tup(n3 n4) x(tup(0 tup(n5 n5)) x(tup(n0 n2) tup(tup(dup2799(n6 dup231(_ @n32_eq(0 dup2843(?(::std::unicode::String::split_trim::4 ::std::unicode::String::split_trim::3 x(n7 dup2836(?(::std::unicode::String::split_trim::10 ::std::unicode::String::split_trim::9 x(x(n8 n9) x(n10 x(tup(n6 n11) _)))) n12))) ?(::std::unicode::String::split_trim::16 ::std::unicode::String::split_trim::15 x(n13 dup2838(n14 n10))))))) n11) enum(::std::unicode::String::split_trim::23 enum(::std::unicode::String::split_trim::24 x(n15 x(n9 x(n12 x(x(n13 n16) n17)))))))))))))) n4) n15) x(n8 x(n7 x(x(n14 n16) n17))))) }

::std::unicode::String::split_trim::24 { x(_ x(n0 x(_ x(x(n1 n1) n0)))) }

::std::unicode::String::split_once::2 { x(tup(dup670(n0 dup177(n1 @n32_ne(0 ?(::std::data::List::Iter::next::3 ::std::data::List::Iter::next::2 x(x(n1 n2) x(x(ref(n3 n4) n5) enum(::std::unicode::String::split_once::8 enum(::std::unicode::String::split_once::9 x(tup(n0 tup(n4 n6)) x(n7 x(tup(n8 tup(n9 n10)) x(tup(n2 n5) x(tup(n11 ref(n12 n9)) n13))))))))))))) tup(n3 n6)) x(n7 x(tup(dup670(n8 n11) tup(n12 n10)) n13))) }

::std::unicode::String::split_once::3 { x(_ ::std::unicode::String::split_once::23) }

::std::unicode::String::split_once::5 { x(n0 x(n1 x(n2 x(tup(dup177(n3 @n32_ne(0 ?(::std::data::List::Iter::next::3 ::std::data::List::Iter::next::2 x(x(n3 n4) x(x(n5 n6) enum(::std::unicode::String::split_once::8 enum(::std::unicode::String::split_once::9 x(n0 x(n1 x(n2 x(tup(n4 n6) n7))))))))))) n5) n7)))) }

::std::unicode::String::split_once::8 { enum(ref(n0 n1) x(n2 x(n3 x(n4 x(n5 x(tup(dup177(n6 @n32_ne(0 ?(::std::data::List::Iter::next::3 ::std::data::List::Iter::next::2 x(x(n6 n7) x(x(n8 n9) enum(::std::unicode::String::split_once::12 enum(::std::unicode::String::split_once::13 x(n2 x(n3 x(n4 x(n5 x(tup(n7 n9) x(x(n0 n1) n10))))))))))))) n8) n10)))))) }

::std::unicode::String::split_once::9 { x(_ x(n0 x(tup(_ tup(_ n1)) x(_ x(tup(n2 ref(n3 _)) tup(n0 enum(enum(tup(n2 tup(n3 n1)) n4) enum(_ n4)))))))) }

::std::unicode::String::split_once::12 { enum(ref(dup2752(n0 n1) n0) x(n2 x(n3 x(n4 x(n5 x(n6 x(x(dup2751(n7 @n32_ne(n1 ?(::std::unicode::String::split_once::5 ::std::unicode::String::split_once::16 x(n2 x(n3 x(n4 x(n5 x(n6 n8)))))))) n7) n8))))))) }

::std::unicode::String::split_once::13 { x(_ x(n0 x(tup(_ tup(_ n1)) x(_ x(tup(n2 ref(n3 _)) x(x(n4 n4) tup(n0 enum(enum(tup(n2 tup(n3 n1)) n5) enum(_ n5))))))))) }

::std::unicode::String::split_once::16 { x(n0 x(n1 x(tup(dup177(n2 @n32_ne(0 ?(::std::data::List::pop_front::3 ::std::data::List::pop_front::2 x(x(n2 n3) x(x(n4 n5) enum(::std::unicode::String::split_once::21 enum(::std::unicode::String::split_once::22 x(n0 x(n1 x(tup(n3 tup(n5 n6)) n7)))))))))) tup(n4 n6)) x(tup(_ ref(n8 n8)) x(tup(_ ref(n9 n9)) n7))))) }

::std::unicode::String::split_once::21 { enum(n0 x(tup(dup2799(n1 dup492(_ @n32_le(n2 ?(::std::unicode::String::split_once::3 ::std::unicode::String::split_once::2 x(tup(n1 n3) x(tup(n4 tup(n5 n6)) x(tup(n7 n8) n9))))))) n3) x(tup(@n32_add(1 n4) tup(n5 tup(n0 n6))) x(tup(dup2799(n7 dup493(_ n2)) n8) n9)))) }

::std::unicode::String::split_once::22 { x(_ ::std::unicode::String::split_once::23) }

::std::unicode::String::split_once::23 { x(tup(@n32_add(n0 n1) tup(n2 n3)) x(tup(n0 tup(n3 n4)) tup(tup(n1 tup(n2 n4)) ::std::logical::Option::None))) }

::std::IO::println { fn(ref(n0 n1) fn(tup(dup177(n2 @n32_ne(0 ?(::std::IO::print::3 ::std::IO::print::2 x(x(n0 @io_print_char(10 n1)) x(n2 n3))))) tup(n3 _)) _)) }

::std::IO::print::2 { x(x(@io_print_char(n0 n1) n2) x(@n32_sub(1 dup177(n3 @n32_ne(0 ?(::std::IO::print::3 ::std::IO::print::2 x(x(n1 n2) x(n3 n4)))))) tup(n0 n4))) }

::std::IO::print::3 { x(x(n0 n0) _) }

::std::IO::full_input {
  fn(ref(w1 w13) w10)
  ::std::IO::full_input::1 = x(x(w1 w13) x(tup(0 tup(w9 w9)) w10))
}

::std::IO::full_input::1 { x(x(dup(@io_read_byte(0 dup(dup2751(n0 @n32_ne(0 ?(::std::IO::full_input::4 ::std::IO::full_input::3 x(x(n1 n2) x(n3 x(n0 n4)))))) @seq$(n5 n1))) n5) n2) x(n3 n4)) }

::std::IO::full_input::3 { x(x(dup(@io_read_byte(0 dup(dup2751(n0 @n32_ne(0 ?(::std::IO::full_input::4 ::std::IO::full_input::3 x(x(n1 n2) x(tup(n3 tup(n4 n5)) x(n0 n6)))))) @seq$(n7 n1))) n7) n2) x(tup(@n32_add(1 n3) tup(n4 tup(n8 n5))) x(n8 n6))) }

::std::IO::full_input::4 { x(x(n0 n0) x(n1 x(_ n1))) }

