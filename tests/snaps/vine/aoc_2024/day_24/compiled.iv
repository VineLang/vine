
::main { ::day_24::main }

::day_24::main {
  fn(ref(w3 w19) _)
  ::std::map::Map::new = fn(::std::list::String::cmp w7)
  ::day_24::main::2 = x(x(w3 w29) x(w7 w27))
  ::day_24::main::11 = x(x(w29 w33) x(w27 w31))
  ref(0 w11) = ref(w37 w14)
  ::day_24::main::22 = x(w31 x(x(w14 w37) x(0 _)))
  ::std::n64::N64::to_string = fn(w11 w23)
  ::std::list::List::concat = fn(tup(8 tup(tup(80 tup(97 tup(114 tup(116 tup(32 tup(49 tup(58 tup(32 w39)))))))) w39)) fn(w23 w24))
  ::std::io::IO::println = fn(ref(w33 w19) fn(w24 _))
}

::day_24::main::2 {
  x(x(w8 w12) w6)
  ::std::io::IO::read_line = fn(ref(w8 w1) enum(::day_24::main::5 enum(::day_24::main::6 x(x(w1 w12) w6))))
}

::day_24::main::5 {
  enum(w0 x(w5 w3))
  ::std::list::List::len = fn(ref(w0 w7) ?(::day_24::main::8 ::day_24::main::7 x(w5 x(w3 w7))))
}

::day_24::main::6 {
  x(x(w3 w3) x(w1 w1))
  _ = _
}

::day_24::main::7 {
  x(w26 x(x(w24 w29) w22))
  ::std::list::List::split_once = fn(w22 fn(tup(2 tup(tup(58 tup(32 w27)) w27)) tup(w3 w4)))
  ::std::option::Option::unwrap = fn(w4 w7)
  ::std::list::List::get = fn(ref(w7 _) fn(0 ref(dup32(@eq(49 w13) w11) w11)))
  ::day_24::Wire::input = fn(w13 w20)
  ::std::map::Map::insert = fn(ref(w24 w16) fn(w3 fn(w20 _)))
  ::day_24::main::2 = x(w26 x(w16 w29))
}

::day_24::main::8 {
  x(x(w4 w4) x(x(w2 w2) _))
  _ = _
}

::day_24::main::10 {
  x(x(w11 w4) fn(w0 w8))
  ::std::map::Map::get_or_insert = fn(ref(w11 w4) fn(w0 fn(::day_24::Wire::new w8)))
}

::day_24::main::11 {
  x(x(w8 w12) w6)
  ::std::io::IO::read_line = fn(ref(w8 w1) enum(::day_24::main::14 enum(::day_24::main::15 x(x(w1 w12) w6))))
}

::day_24::main::14 {
  enum(w0 x(w5 x(w3 w86)))
  ::std::list::List::split = fn(w0 fn(tup(1 tup(tup(32 w69) w69)) w8))
  ::std::list::List::get = fn(ref(w8 w11) fn(0 ref(w14 _)))
  ::std::list::List::get = fn(ref(w11 w18) fn(2 ref(w21 _)))
  ::std::list::List::get = fn(ref(w18 w25) fn(4 ref(w28 _)))
  ::day_24::main::10 = x(x(w3 w72) fn(w14 w34))
  ::day_24::Wire::get = fn(w34 w37)
  ::day_24::main::10 = x(x(w72 w75) fn(w21 w42))
  ::day_24::Wire::get = fn(w42 w45)
  ::std::list::List::get = fn(ref(w25 _) fn(1 w51))
  ::std::list::List::get = fn(w51 fn(0 ref(dup55(dup73(@eq(65 ?(::day_24::main::18 ::day_24::main::17 x(w37 x(w45 x(w79 w78))))) w79) w56) w56)))
  ::day_24::main::10 = x(x(w75 w84) fn(w28 w64))
  ::day_24::Wire::set = fn(w64 fn(w78 _))
  ::day_24::main::11 = x(w5 x(w84 w86))
}

::day_24::main::15 { x(x(w3 w3) x(w1 w1)) }

::day_24::main::17 { x(@n32_and(w5 w2) x(w5 x(_ w2))) }

::day_24::main::18 { x(w4 x(w3 x(@eq(79 ?(::day_24::main::21 ::day_24::main::20 x(w4 x(w3 w7)))) w7))) }

::day_24::main::20 { x(@n32_or(w4 w2) x(w4 w2)) }

::day_24::main::21 { x(@n32_xor(w4 w2) x(w4 w2)) }

::day_24::main::22 {
  x(w13 x(w12 x(dup100(@div(10 w1) dup100(@rem(10 w4) w24)) w23)))
  48 = @add(w1 w2)
  48 = @add(w4 w5)
  ::std::map::Map::get = fn(ref(w13 w16) fn(ref(tup(3 tup(tup(122 tup(w2 tup(w5 w14))) w14)) _) enum(::day_24::main::26 enum(::day_24::main::27 x(w16 x(w12 x(w24 w23)))))))
}

::day_24::main::26 {
  enum(w2 x(w8 x(x(w7 w37) x(@add(1 w19) w34))))
  ::day_24::Wire::get = fn(w2 ?(0 ::std::n64::N64::one w24))
  ::std::n64::N64::shl = fn(w14 fn(1 w15))
  ::std::n64::N64::or = fn(w15 fn(w24 w7))
  ::day_24::main::22 = x(w8 x(x(dup104(w14 _) w37) x(w19 w34)))
}

::day_24::main::27 { x(_ x(x(w3 w3) _)) }

::day_24::Wire::new { tup(w6 w6) }

::day_24::Wire::input { fn(w2 tup(_ w2)) }

::day_24::Wire::get { fn(ref(tup(w2 dup131(w3 w10)) tup(w2 w3)) w10) }

::day_24::Wire::set { fn(ref(tup(w8 w4) tup(_ w4)) fn(w8 _)) }

::std::char::Char::cmp { fn(ref(dup578(w2 dup578(@lt(w12 ?(::std::char::Char::cmp::4 ::std::char::Char::cmp::3 x(w16 x(w15 w14)))) w16)) w2) fn(ref(dup579(w5 dup579(w12 w15)) w5) w14)) }

::std::char::Char::cmp::3 { x(_ x(_ ::std::map::Ord::Lt)) }

::std::char::Char::cmp::4 { x(@lt$(w2 ?(::std::map::Ord::Eq ::std::map::Ord::Gt w7)) x(w2 w7)) }

::std::io::IO::println {
  fn(ref(w3 w14) fn(w5 _))
  ::std::io::IO::print = fn(ref(w3 w9) fn(w5 _))
  ::std::io::IO::print_char = fn(ref(w9 w14) fn(10 _))
}

::std::io::IO::print {
  fn(ref(w3 w15) fn(tup(w9 tup(w10 _)) _))
  ::std::io::IO::print::2 = x(x(w3 w15) x(w9 w10))
}

::std::io::IO::print::2 { x(w4 x(dup608(?(::std::io::IO::print::4 ::std::io::IO::print::3 x(w4 x(w6 w1))) w6) w1)) }

::std::io::IO::print::3 {
  x(x(w17 w21) x(@sub(1 w1) tup(w4 w5)))
  ::std::io::IO::print_char = fn(ref(w17 w10) fn(w4 _))
  ::std::io::IO::print::2 = x(x(w10 w21) x(w1 w5))
}

::std::io::IO::print::4 { x(x(w3 w3) _) }

::std::io::IO::print_char { fn(ref(@io_print_char(char io) io) fn(char _)) }

::std::io::IO::read_line {
  fn(ref(w3 w18) w15)
  ::std::io::IO::read_byte = fn(ref(w3 w8) fn(0 dup653(@ne(0 ?(::std::io::IO::read_line::4 ::std::io::IO::read_line::3 x(x(w8 w18) x(w16 w15)))) w16)))
}

::std::io::IO::read_line::3 {
  x(w5 x(dup660(@eq(10 ?(::std::io::IO::read_line::7 ::std::io::IO::read_line::6 x(w5 x(w9 w8)))) w9) w1))
  ::std::option::Option::Some = fn(w8 w1)
}

::std::io::IO::read_line::4 { x(x(w3 w3) x(_ ::std::option::Option::None)) }

::std::io::IO::read_line::6 { x(x(w4 w4) x(_ tup(0 tup(w5 w5)))) }

::std::io::IO::read_line::7 {
  x(w8 x(w6 w12))
  ::std::io::IO::read_line::8 = x(w8 x(x(tup(1 tup(tup(w6 w9) w9)) w12) _))
}

::std::io::IO::read_line::8 {
  x(x(w10 w18) w8)
  ::std::io::IO::read_byte = fn(ref(w10 w1) fn(10 dup677(@ne(10 ?(::std::io::IO::read_line::11 ::std::io::IO::read_line::10 x(x(w1 w18) x(w16 w8)))) w16)))
}

::std::io::IO::read_line::10 {
  x(w9 x(w7 x(x(w6 w19) w17)))
  ::std::list::List::concat = fn(w6 fn(tup(1 tup(tup(w7 w10) w10)) w3))
  ::std::io::IO::read_line::8 = x(w9 x(x(w3 w19) w17))
}

::std::io::IO::read_line::11 { x(x(w5 w5) x(_ x(x(w2 w2) _))) }

::std::io::IO::read_byte { fn(ref(dup(io0 @io_read_byte(default dup(byte @seq$(io0 io1)))) io1) fn(default byte)) }

::std::list::List::len { fn(ref(tup(dup714(w13 w9) w10) tup(w9 w10)) w13) }

::std::list::List::get {
  fn(ref(tup(w3 tup(w5 w7)) tup(w3 tup(w6 w7))) fn(w11 ref(w16 w17)))
  ::std::list::List::get::2 = x(x(ref(w5 w6) ref(tup(w16 w18) tup(w17 w18))) w11)
}

::std::list::List::get::2 { x(w3 dup748(?(::std::list::List::get::4 ::std::list::List::get::3 x(w3 w4)) w4)) }

::std::list::List::get::3 {
  x(x(ref(tup(w1 w3) tup(w1 w4)) w17) @sub(1 w11))
  ::std::list::List::get::2 = x(x(ref(w3 w4) w17) w11)
}

::std::list::List::get::4 { x(x(w2 w2) _) }

::std::list::List::pop_front { fn(ref(tup(dup811(?(::std::list::List::pop_front::4 ::std::list::List::pop_front::3 x(x(w17 w18) x(x(w5 w16) w14))) w17) tup(w5 w6)) tup(w18 tup(w16 w6))) w14) }

::std::list::List::pop_front::3 {
  x(x(@sub(1 w1) w1) x(x(tup(w3 w4) w4) w9))
  ::std::option::Option::Some = fn(w3 w9)
}

::std::list::List::pop_front::4 { x(x(w4 w4) x(x(w2 w2) ::std::option::Option::None)) }

::std::list::List::concat { fn(tup(@add(w12 w20) tup(w8 w13)) fn(tup(w12 tup(w13 w23)) tup(w20 tup(w8 w23)))) }

::std::list::List::iter { fn(ref(tup(dup971(w2 w12) tup(w5 w6)) tup(w2 tup(w14 w6))) tup(w12 ref(w5 w14))) }

::std::list::List::Iter::next { fn(ref(tup(dup978(?(::std::list::List::Iter::next::4 ::std::list::List::Iter::next::3 x(x(w16 w17) x(x(w5 w15) w13))) w16) w5) tup(w17 w15)) w13) }

::std::list::List::Iter::next::3 {
  x(x(@sub(1 w1) w1) x(x(ref(tup(w4 w7) tup(w5 w8)) ref(w7 w8)) w15))
  ::std::option::Option::Some = fn(ref(w4 w5) w15)
}

::std::list::List::Iter::next::4 { x(x(w8 w8) x(x(ref(w2 w2) _) ::std::option::Option::None)) }

::std::list::List::Iter::drop { fn(ref(tup(_ ref(w9 w9)) _) _) }

::std::list::List::split {
  fn(w2 fn(w3 w10))
  ::std::list::List::split::2 = x(w2 x(w3 x(tup(0 tup(w9 w9)) w10)))
}

::std::list::List::split::2 {
  x(w14 x(dup1054(w1 w20) x(w12 w18)))
  ::std::list::List::split_once = fn(w14 fn(w1 tup(w3 enum(::std::list::List::split::6 enum(::std::list::List::split::7 x(w20 x(w9 w18)))))))
  ::std::list::List::concat = fn(w12 fn(tup(1 tup(tup(w3 w15) w15)) w9))
}

::std::list::List::split::6 {
  enum(w0 w4)
  ::std::list::List::split::2 = x(w0 w4)
}

::std::list::List::split::7 { x(_ x(w1 w1)) }

::std::list::List::split_once {
  fn(w2 fn(w3 w15))
  ::std::list::List::split_once::2 = x(w3 x(tup(0 tup(w14 w14)) x(w2 w15)))
}

::std::list::List::split_once::2 {
  x(w12 x(w11 x(w10 w13)))
  ::std::list::List::len = fn(ref(w10 w1) @le$(w7 ?(::std::list::List::split_once::4 ::std::list::List::split_once::3 x(w5 x(w11 x(w1 w13))))))
  ::std::list::List::len = fn(ref(w12 w5) w7)
}

::std::list::List::split_once::3 {
  x(w23 x(w22 x(w21 w42)))
  ::std::list::List::iter = fn(ref(w23 w1) w3)
  ::std::list::List::iter = fn(ref(w21 w6) w8)
  ::std::list::List::split_once::6 = x(w1 x(w22 x(w6 x(w3 x(w8 w42)))))
}

::std::list::List::split_once::4 { x(_ ::std::list::List::split_once::24) }

::std::list::List::split_once::6 {
  x(w10 x(w9 x(w8 x(w7 w6))))
  ::std::list::List::Iter::next = fn(ref(w7 w1) enum(::std::list::List::split_once::9 enum(::std::list::List::split_once::10 x(w10 x(w9 x(w8 x(w1 w6)))))))
}

::std::list::List::split_once::9 {
  enum(ref(dup1173(w1 w16) w1) x(w9 x(w8 x(w7 x(w6 x(w5 w15))))))
  ::std::list::List::Iter::next = fn(ref(w5 w11) enum(::std::list::List::split_once::13 enum(::std::list::List::split_once::14 x(w9 x(w8 x(w7 x(w6 x(w11 x(w16 w15)))))))))
}

::std::list::List::split_once::10 {
  x(_ x(w4 x(w3 x(_ w1))))
  ::std::list::List::split_once::15 = x(w4 x(w3 w1))
}

::std::list::List::split_once::13 { enum(ref(dup1187(w1 w13) w1) x(w10 x(w9 x(w8 x(w7 x(w6 x(@ne(w13 ?(::std::list::List::split_once::6 ::std::list::List::split_once::17 x(w10 x(w9 x(w8 x(w7 x(w6 w15))))))) w15))))))) }

::std::list::List::split_once::14 {
  x(_ x(w5 x(w4 x(_ x(w2 x(_ w7))))))
  ::std::list::List::split_once::15 = x(w5 x(w4 x(w2 w7)))
}

::std::list::List::split_once::15 {
  x(w3 x(tup(_ tup(_ w12)) x(tup(w6 ref(w8 _)) tup(w3 w20))))
  ::std::option::Option::Some = fn(tup(w6 tup(w8 w12)) w20)
}

::std::list::List::split_once::17 {
  x(w5 x(w4 x(w3 x(w2 x(w1 w31)))))
  ::std::list::List::Iter::drop = fn(ref(w2 _) _)
  ::std::list::List::Iter::drop = fn(ref(w1 _) _)
  ::std::list::List::pop_front = fn(ref(w3 w27) enum(::std::list::List::split_once::22 enum(::std::list::List::split_once::23 x(w5 x(w4 x(w27 w31))))))
}

::std::list::List::split_once::22 {
  enum(w0 x(w5 x(w4 w3)))
  ::std::list::List::concat = fn(w4 fn(tup(1 tup(tup(w0 w10) w10)) w9))
  ::std::list::List::split_once::2 = x(w5 x(w9 w3))
}

::std::list::List::split_once::23 { x(_ ::std::list::List::split_once::24) }

::std::list::List::split_once::24 {
  x(w14 x(w13 tup(w10 ::std::option::Option::None)))
  ::std::list::List::concat = fn(w14 fn(w13 w10))
}

::std::list::List::cmp {
  fn(w2 fn(w7 fn(w10 w35)))
  ::std::list::List::iter = fn(w7 w17)
  ::std::list::List::iter = fn(w10 w22)
  ::std::list::List::cmp::3 = x(w2 x(x(w17 w39) x(x(w22 w37) w35)))
  ::std::list::List::Iter::drop = fn(ref(w39 _) _)
  ::std::list::List::Iter::drop = fn(ref(w37 _) _)
}

::std::list::List::cmp::3 {
  x(w6 x(x(w5 w25) x(x(w3 w23) w21)))
  ::std::list::List::Iter::next = fn(ref(w5 w8) w10)
  ::std::list::List::Iter::next = fn(ref(w3 w12) w14)
  tup(w10 w14) = tup(w17 enum(::std::list::List::cmp::16 enum(::std::list::List::cmp::19 x(w6 x(x(w8 w25) x(x(w12 w23) x(w21 w17)))))))
}

::std::list::List::cmp::13 { x(_ x(x(w4 w4) x(x(w2 w2) ::std::map::Ord::Lt))) }

::std::list::List::cmp::15 { x(_ x(x(w4 w4) x(x(w2 w2) ::std::map::Ord::Gt))) }

::std::list::List::cmp::16 { enum(w0 x(w8 x(w7 x(w5 x(w10 enum(::std::list::List::cmp::17 enum(::std::list::List::cmp::18 x(w8 x(w7 x(w5 x(w10 w0))))))))))) }

::std::list::List::cmp::17 { enum(w0 x(dup1375(fn(w0 fn(w3 enum(::std::list::List::cmp::13 enum(::std::list::List::cmp::3 enum(::std::list::List::cmp::15 x(w21 x(w8 x(w6 w16)))))))) w21) x(w8 x(w6 x(w16 w3))))) }

::std::list::List::cmp::18 { x(_ x(x(w5 w5) x(x(w3 w3) x(::std::map::Ord::Lt _)))) }

::std::list::List::cmp::19 { x(_ x(x(w6 w6) x(x(w4 w4) x(w8 enum(::std::list::List::cmp::20 enum(::std::map::Ord::Eq w8)))))) }

::std::list::List::cmp::20 { enum(_ ::std::map::Ord::Gt) }

::std::list::String::cmp {
  w0
  ::std::list::List::cmp = fn(::std::char::Char::cmp w0)
}

::std::map::Ord::Lt { enum(r enum(_ enum(_ r))) }

::std::map::Ord::Eq { enum(_ enum(r enum(_ r))) }

::std::map::Ord::Gt { enum(_ enum(_ enum(r r))) }

::std::map::Map::new { fn(w2 tup(w2 ::std::map::Node::leaf)) }

::std::map::Map::insert {
  fn(ref(tup(dup1432(w2 w16) w5) tup(w2 w14)) w9)
  ::std::map::Node::insert = fn(ref(w5 w14) fn(w16 w9))
}

::std::map::Map::get_or_insert {
  fn(ref(tup(dup1440(w2 w17) w5) tup(w2 w15)) fn(w9 fn(w10 ref(w24 w27))))
  ::std::map::Node::insert = fn(ref(w5 w15) fn(w17 fn(w9 fn(w27 w20))))
  ::std::option::Option::unwrap_or = fn(w20 fn(w10 w24))
}

::std::map::Map::get {
  fn(ref(tup(dup1453(w2 w17) w5) tup(w2 w15)) w10)
  ::std::map::Node::get = fn(ref(w5 w15) fn(w17 w10))
}

::std::map::Node::leaf { tup(0 _) }

::std::map::Node::size { fn(ref(tup(dup1681(w2 w10) w4) tup(w2 w4)) w10) }

::std::map::Node::new {
  fn(w2 fn(w3 fn(w4 tup(w16 tup(w8 tup(w3 w12))))))
  ::std::map::Node::size = fn(ref(w2 w8) @add(w14 @add(1 w16)))
  ::std::map::Node::size = fn(ref(w4 w12) w14)
}

::std::map::Node::insert { fn(ref(tup(dup1694(?(::std::map::Node::insert::4 ::std::map::Node::insert::3 x(x(w22 w23) x(x(w5 w21) x(w9 x(w10 x(w11 w16)))))) w22) w5) tup(w23 w21)) fn(w9 fn(w10 fn(w11 w16)))) }

::std::map::Node::insert::3 {
  x(w26 x(x(w24 w50) x(dup1709(fn(ref(w21 w29) fn(ref(w6 w32) enum(::std::map::Node::insert::9 enum(::std::map::Node::insert::10 enum(::std::map::Node::insert::11 x(w26 x(x(w1 w50) x(w48 x(w29 x(w20 x(x(w4 w45) x(x(w32 w43) x(x(w8 w41) x(x(w12 w39) x(w37 _))))))))))))))) w48) x(w21 x(w20 w37)))))
  ref(w24 w1) = ref(tup(w4 tup(tup(w6 w8) w12)) tup(w45 tup(tup(w43 w41) w39)))
}

::std::map::Node::insert::4 { x(x(_ 1) x(x(_ tup(::std::map::Node::leaf tup(tup(w8 w7) ::std::map::Node::leaf))) x(_ x(w8 x(w7 ::std::option::Option::None))))) }

::std::map::Node::insert::9 {
  x(x(_ w28) x(x(w14 w31) x(w12 x(w11 x(w10 x(x(w9 w18) x(x(w7 w7) x(x(w5 w5) x(x(w3 w3) x(w23 _))))))))))
  ::std::map::Node::insert = fn(ref(w9 w18) fn(w12 fn(w11 fn(w10 w23))))
  ::std::map::size = fn(ref(w14 w26) w28)
  ::std::map::balance_right = fn(ref(w26 w31) _)
}

::std::map::Node::insert::10 {
  x(x(w16 w16) x(x(w14 w14) x(_ x(w11 x(w10 x(x(w9 w9) x(x(_ w11) x(x(w5 w10) x(x(w3 w3) x(w18 _))))))))))
  ::std::option::Option::Some = fn(w5 w18)
}

::std::map::Node::insert::11 {
  x(x(_ w28) x(x(w14 w31) x(w12 x(w11 x(w10 x(x(w9 w9) x(x(w7 w7) x(x(w5 w5) x(x(w3 w18) x(w23 _))))))))))
  ::std::map::Node::insert = fn(ref(w3 w18) fn(w12 fn(w11 fn(w10 w23))))
  ::std::map::size = fn(ref(w14 w26) w28)
  ::std::map::balance_left = fn(ref(w26 w31) _)
}

::std::map::Node::get { fn(ref(tup(dup1770(w2 ?(::std::map::Node::get::4 ::std::map::Node::get::3 x(x(w5 w22) x(w9 x(x(w11 w19) w17))))) w5) tup(w2 w22)) fn(w9 fn(ref(w11 w19) w17))) }

::std::map::Node::get::3 {
  x(x(w22 w1) x(dup1782(fn(ref(w19 w25) fn(ref(w6 w28) enum(::std::map::Node::get::9 enum(::std::map::Node::get::10 enum(::std::map::Node::get::11 x(w41 x(x(w25 w40) x(x(w4 w38) x(x(w8 w36) x(x(w12 w34) w32)))))))))) w41) x(x(w19 w40) w32)))
  ref(w22 w1) = ref(tup(w4 tup(tup(w6 w8) w12)) tup(w38 tup(tup(w28 w36) w34)))
}

::std::map::Node::get::4 { x(x(w5 w5) x(_ x(x(w2 w2) ::std::option::Option::None))) }

::std::map::Node::get::9 {
  x(w9 x(x(w8 w15) x(x(w6 w11) x(x(w4 w4) x(x(w2 w2) w17)))))
  ::std::map::Node::get = fn(ref(w6 w11) fn(w9 fn(ref(w8 w15) w17)))
}

::std::map::Node::get::10 {
  x(_ x(x(w8 w8) x(x(w6 w6) x(x(w4 w11) x(x(w2 w2) w13)))))
  ::std::option::Option::Some = fn(ref(w4 w11) w13)
}

::std::map::Node::get::11 {
  x(w9 x(x(w8 w15) x(x(w6 w6) x(x(w4 w4) x(x(w2 w11) w17)))))
  ::std::map::Node::get = fn(ref(w2 w11) fn(w9 fn(ref(w8 w15) w17)))
}

::std::map::balance_left {
  fn(ref(tup(w8 tup(w9 w10)) w21) _)
  ::std::map::is_balanced = fn(ref(w8 w15) fn(ref(w10 w18) ?(::std::map::balance_left::4 ::std::map::balance_left::3 x(w15 x(w9 x(w18 w21))))))
}

::std::map::balance_left::3 { x(w7 x(w6 x(w5 tup(w7 tup(w6 w5))))) }

::std::map::balance_left::4 {
  x(w10 x(w9 x(tup(_ tup(w1 tup(w2 w3))) w18)))
  ::std::map::is_single = fn(ref(w1 w12) fn(ref(w3 w15) ?(::std::map::balance_left::7 ::std::map::balance_left::6 x(w10 x(w9 x(w12 x(w2 x(w15 w18))))))))
}

::std::map::balance_left::6 {
  x(w12 x(w11 x(w10 x(w9 x(w8 tup(w3 tup(w9 w8)))))))
  ::std::map::Node::new = fn(w12 fn(w11 fn(w10 w3)))
}

::std::map::balance_left::7 {
  x(w21 x(w20 x(tup(_ tup(w1 tup(w2 w3))) x(w18 x(w17 tup(w9 tup(w2 w14)))))))
  ::std::map::Node::new = fn(w21 fn(w20 fn(w1 w9)))
  ::std::map::Node::new = fn(w3 fn(w18 fn(w17 w14)))
}

::std::map::balance_right {
  fn(ref(tup(w8 tup(w9 w10)) w21) _)
  ::std::map::is_balanced = fn(ref(w10 w15) fn(ref(w8 w18) ?(::std::map::balance_right::4 ::std::map::balance_right::3 x(w18 x(w9 x(w15 w21))))))
}

::std::map::balance_right::3 { x(w7 x(w6 x(w5 tup(w7 tup(w6 w5))))) }

::std::map::balance_right::4 {
  x(tup(_ tup(w1 tup(w2 w3))) x(w9 x(w8 w18)))
  ::std::map::is_single = fn(ref(w3 w12) fn(ref(w1 w15) ?(::std::map::balance_right::7 ::std::map::balance_right::6 x(w9 x(w8 x(w15 x(w2 x(w12 w18))))))))
}

::std::map::balance_right::6 {
  x(w12 x(w11 x(w10 x(w9 x(w8 tup(w10 tup(w9 w5)))))))
  ::std::map::Node::new = fn(w8 fn(w12 fn(w11 w5)))
}

::std::map::balance_right::7 {
  x(w21 x(w20 x(w19 x(w18 x(tup(_ tup(w1 tup(w2 w3))) tup(w9 tup(w2 w14)))))))
  ::std::map::Node::new = fn(w19 fn(w18 fn(w1 w9)))
  ::std::map::Node::new = fn(w3 fn(w21 fn(w20 w14)))
}

::std::map::is_balanced {
  fn(ref(tup(dup2285(w2 w16) w4) tup(w2 w4)) fn(ref(tup(dup2286(w8 w19) w10) tup(w8 w10)) w20))
  3 = @mul(w16 @add(2 @le$(w19 w20)))
}

::std::map::is_single {
  fn(ref(tup(dup2290(w2 @le(w18 w19)) w4) tup(w2 w4)) fn(ref(tup(dup2291(w8 w17) w10) tup(w8 w10)) w19))
  2 = @mul(w17 w18)
}

::std::map::size { fn(ref(tup(tup(dup2295(w2 @add(w19 @add(1 w21))) w4) tup(w7 tup(dup2296(w8 w19) w10))) tup(tup(w2 w4) tup(w7 tup(w8 w10)))) w21) }

::std::n64::N64::one { tup(1 0) }

::std::n64::N64::sub { fn(tup(dup(@sub(bl0 l) @lt(bl1 c)) @sub(bh @sub(c h))) fn(tup(dup(bl0 bl1) bh) tup(l h))) }

::std::n64::N64::mul_n32_n32 { fn(dup(@mul(b0 l) @n32_mul_high(b1 h)) fn(dup(b0 b1) tup(l h))) }

::std::n64::N64::div_rem_n32 {
  fn(tup(w2 dup2547(@div(w9 w10) @rem(w12 dup2548(@lt$(w31 ?(::std::n64::N64::div_rem_n32::4 ::std::n64::N64::div_rem_n32::3 x(x(w37 w38) x(w36 x(x(w10 w35) _))))) w37)))) fn(dup2550(w9 dup2550(w12 dup2550(w31 dup2550(w36 dup2550(w41 dup2550(w18 w22)))))) tup(tup(w21 w35) w24)))
  ::std::n64::N64::div_rem_n32::5 = x(x(w2 dup2546(@div(w18 w19) @rem(w22 w24))) x(w38 x(w41 x(0 @add(w19 w21)))))
}

::std::n64::N64::div_rem_n32::3 { x(x(dup2561(@div(w1 w2) @rem(w4 w6)) w6) x(dup2562(w1 w4) x(x(_ w2) _))) }

::std::n64::N64::div_rem_n32::4 { x(x(w5 w5) x(_ x(x(w2 w2) _))) }

::std::n64::N64::div_rem_n32::5 { x(w6 x(dup2570(?(::std::n64::N64::div_rem_n32::7 ::std::n64::N64::div_rem_n32::6 x(w6 x(w10 w3))) w10) w3)) }

::std::n64::N64::div_rem_n32::6 {
  x(x(w27 w33) x(dup2577(w2 w9) x(dup2579(w0 dup2579(w12 w30)) x(@add(w5 w7) w29))))
  4294967295 = @div(w0 @mul(w2 dup2583(w5 w11)))
  ::std::n64::N64::mul_n32_n32 = fn(w11 fn(w12 w13))
  ::std::n64::N64::sub = fn(tup(w27 w9) fn(w13 tup(w15 w16)))
  ::std::n64::N64::div_rem_n32::5 = x(x(w15 w33) x(w16 x(w30 x(w7 w29))))
}

::std::n64::N64::div_rem_n32::7 { x(x(w5 w5) x(_ x(_ x(w1 w1)))) }

::std::n64::N64::or { fn(tup(@n32_or(w5 w12) @n32_or(w6 w15)) fn(tup(w5 w6) tup(w12 w15))) }

::std::n64::N64::shl { fn(tup(w2 w3) fn(dup2611(@n32_and(32 ?(::std::n64::N64::shl::4 ::std::n64::N64::shl::3 x(w2 x(w3 x(w12 w11))))) w12) w11)) }

::std::n64::N64::shl::3 { x(@n32_shl(w5 w2) x(_ x(w5 tup(0 w2)))) }

::std::n64::N64::shl::4 { x(dup2619(@n32_shl(w1 w2) @n32_shr(w8 w9)) x(@n32_shl(w4 @n32_or(w9 w10)) x(dup2621(w1 dup2621(w4 @sub$(0 w8))) tup(w2 w10)))) }

::std::n64::N64::eq { fn(tup(@eq(w5 ?(::std::n64::N64::eq::4 ::std::n64::N64::eq::3 x(w3 x(w6 w14)))) w3) fn(tup(w5 w6) w14)) }

::std::n64::N64::eq::3 { x(@eq(w4 ?(0 1 w6)) x(w4 w6)) }

::std::n64::N64::eq::4 { x(_ x(_ 0)) }

::std::n64::N64::to_string {
  fn(dup2828(w6 w9) w8)
  ::std::n64::N64::eq = fn(w6 fn(0 ?(::std::n64::N64::to_string::4 ::std::n64::N64::to_string::3 x(w9 w8))))
}

::std::n64::N64::to_string::3 { x(_ tup(1 tup(tup(48 w3) w3))) }

::std::n64::N64::to_string::4 {
  x(w4 w7)
  ::std::n64::N64::to_string::5 = x(w4 x(tup(0 tup(w5 w5)) w7))
}

::std::n64::N64::to_string::5 {
  x(dup2838(w0 w7) w3)
  ::std::n64::N64::eq = fn(w0 fn(0 ?(::std::n64::N64::to_string::7 ::std::n64::N64::to_string::6 x(w7 w3))))
}

::std::n64::N64::to_string::6 { x(_ x(w1 w1)) }

::std::n64::N64::to_string::7 {
  x(w15 x(w14 w18))
  ::std::n64::N64::div_rem_n32 = fn(w15 fn(10 tup(w2 w3)))
  48 = @add(w3 w6)
  ::std::list::List::concat = fn(tup(1 tup(tup(w6 w16) w16)) fn(w14 w9))
  ::std::n64::N64::to_string::5 = x(w2 x(w9 w18))
}

::std::option::Option::Some { fn(f0 enum(enum(f0 r) enum(_ r))) }

::std::option::Option::None { enum(_ enum(r r)) }

::std::option::Option::unwrap_or { fn(enum(::std::option::Option::unwrap_or::5 enum(::std::option::Option::unwrap_or::6 x(w3 w9))) fn(w3 w9)) }

::std::option::Option::unwrap_or::5 { enum(w0 x(_ w0)) }

::std::option::Option::unwrap_or::6 { x(w1 w1) }

::std::option::Option::unwrap { fn(enum(::std::option::Option::unwrap::4 enum(_ w8)) w8) }

::std::option::Option::unwrap::4 { enum(w0 w0) }

