
::std::logical::Option::None { enum(_ enum(n0 n0)) }

::std::numeric::N64::sub { fn(tup(dup(@sub(n0 n1) @lt(n2 n3)) @sub(n4 @sub(n3 n5))) fn(tup(dup(n0 n2) n4) tup(n1 n5))) }

::std::numeric::N64::mul_n32_n32 { fn(dup(@mul(n0 n1) @n32_mul_high(n2 n3)) fn(dup(n0 n2) tup(n1 n3))) }

::std::ops::Ord::Lt { enum(n0 enum(_ enum(_ n0))) }

::std::ops::Ord::Eq { enum(_ enum(n0 enum(_ n0))) }

::std::ops::Ord::Gt { enum(_ enum(_ enum(n0 n0))) }

::std::IO::print_char { fn(ref(@io_print_char(n0 n1) n1) fn(n0 _)) }

::std::IO::read_byte { fn(ref(dup(n0 @io_read_byte(n1 dup(n2 @seq$(n0 n3)))) n3) fn(n1 n2)) }

::main { ::day_24::main }

::day_24::main {
  fn(ref(w1 w16) _)
  ::day_24::main::1 = x(x(w1 w26) x(::std::data::Map::empty w24))
  ::day_24::main::10 = x(x(w26 w30) x(w24 w28))
  ref(0 w8) = ref(w34 w11)
  ::day_24::main::20 = x(w28 x(x(w11 w34) x(0 _)))
  ::std::numeric::N64::to_string::to_string = fn(w8 tup(@add(8 w36) tup(w37 w38)))
  ::std::IO::println = fn(ref(w30 w16) fn(tup(w36 tup(tup(80 tup(97 tup(114 tup(116 tup(32 tup(49 tup(58 tup(32 w37)))))))) w38)) _))
}

::day_24::main::1 {
  x(x(w8 w12) w6)
  ::std::IO::read_line = fn(ref(w8 w1) enum(::day_24::main::4 enum(::day_24::main::5 x(x(w1 w12) w6))))
}

::day_24::main::4 {
  enum(w0 x(w5 w3))
  ::std::unicode::String::len = fn(ref(w0 w7) ?(::day_24::main::7 ::day_24::main::6 x(w5 x(w3 w7))))
}

::day_24::main::5 { x(x(w3 w3) x(w1 w1)) }

::day_24::main::6 {
  x(w28 x(x(w26 w33) w24))
  ::std::unicode::String::split_once = fn(w24 fn(tup(2 tup(tup(58 tup(32 w31)) w31)) tup(w3 w4)))
  ::std::logical::Option::unwrap = fn(w4 w9)
  ::std::data::List::get = fn(ref(w9 _) fn(0 ref(dup31(@eq(49 w15) w13) w13)))
  ::day_24::Wire::input = fn(w15 w22)
  ::std::data::Map::insert::1 = fn(ref(w26 w18) fn(w3 fn(w22 _)))
  ::day_24::main::1 = x(w28 x(w18 w33))
}

::day_24::main::7 { x(x(w4 w4) x(x(w2 w2) _)) }

::day_24::main::9 {
  x(x(w11 w4) fn(w0 w8))
  ::std::data::Map::get_or_insert::1 = fn(ref(w11 w4) fn(w0 fn(::day_24::Wire::new w8)))
}

::day_24::main::10 {
  x(x(w8 w12) w6)
  ::std::IO::read_line = fn(ref(w8 w1) enum(::day_24::main::13 enum(::day_24::main::14 x(x(w1 w12) w6))))
}

::day_24::main::13 {
  enum(w0 x(w5 x(w3 w90)))
  ::std::unicode::String::split = fn(w0 fn(tup(1 tup(tup(32 w73) w73)) w8))
  ::std::data::List::get = fn(ref(w8 w11) fn(0 ref(w14 _)))
  ::std::data::List::get = fn(ref(w11 w18) fn(2 ref(w21 _)))
  ::std::data::List::get = fn(ref(w18 w25) fn(4 ref(w28 _)))
  ::day_24::main::9 = x(x(w3 w76) fn(w14 w34))
  ::day_24::Wire::get = fn(w34 w37)
  ::day_24::main::9 = x(x(w76 w79) fn(w21 w42))
  ::day_24::Wire::get = fn(w42 w45)
  ::std::data::List::get = fn(ref(w25 _) fn(1 w54))
  ::std::data::List::get = fn(w54 fn(0 ref(dup54(dup72(@eq(65 ?(::day_24::main::17 ::day_24::main::16 x(w37 x(w45 x(w83 w82))))) w83) w58) w58)))
  ::day_24::main::9 = x(x(w79 w88) fn(w28 w66))
  ::day_24::Wire::set = fn(w66 fn(w82 _))
  ::day_24::main::10 = x(w5 x(w88 w90))
}

::day_24::main::14 { x(x(w3 w3) x(w1 w1)) }

::day_24::main::16 { x(@n32_and(w5 w2) x(w5 x(_ w2))) }

::day_24::main::17 { x(w5 x(w4 x(@eq(79 ?(::day_24::main::19 ::day_24::main::18 x(w5 x(w4 w6)))) w6))) }

::day_24::main::18 { x(@n32_or(w4 w2) x(w4 w2)) }

::day_24::main::19 { x(@n32_xor(w4 w2) x(w4 w2)) }

::day_24::main::20 {
  x(w15 x(w14 x(dup98(@div(10 w1) dup98(@rem(10 w4) w26)) w25)))
  48 = @add(w1 w2)
  48 = @add(w4 w5)
  ::std::data::Map::get::1 = fn(ref(w15 w18) fn(ref(tup(3 tup(tup(122 tup(w2 tup(w5 w16))) w16)) _) enum(::day_24::main::24 enum(::day_24::main::25 x(w18 x(w14 x(w26 w25)))))))
}

::day_24::main::24 {
  enum(w2 x(w8 x(x(w7 w39) x(@add(1 w19) w36))))
  ::day_24::Wire::get = fn(w2 ?(0 ::std::numeric::N64::one w24))
  ::std::numeric::N64::shl = fn(w14 fn(1 w15))
  ::std::numeric::N64::or = fn(w15 fn(w24 w7))
  ::day_24::main::20 = x(w8 x(x(dup102(w14 _) w39) x(w19 w36)))
}

::day_24::main::25 { x(_ x(x(w3 w3) _)) }

::std::data::Map::insert::1 { fn(ref(tup(dup121(?(::std::data::Map::insert::1::3 ::std::data::Map::insert::1::2 x(x(n0 n1) x(x(n2 n3) x(n4 x(n5 n6))))) n0) n2) tup(n1 n3)) fn(n4 fn(n5 n6))) }

::std::data::Map::insert::1::2 { x(n0 x(x(tup(n1 tup(tup(tup(dup604(n2 dup610(?(::std::data::List::Iter::next::3 ::std::data::List::Iter::next::2 x(x(n3 n4) x(x(ref(n5 n6) n7) enum(::std::data::List::ord::cmp::1::14 enum(::std::data::List::ord::cmp::1::17 x(x(tup(n8 n9) tup(_ ref(n10 n10))) x(x(tup(n4 n7) tup(_ ref(n11 n11))) x(enum(::std::data::Map::insert::1::8 enum(::std::data::Map::insert::1::9 enum(::std::data::Map::insert::1::10 x(n0 x(x(tup(n12 tup(tup(n13 n14) n15)) n16) x(tup(n17 tup(n18 n19)) x(n20 x(x(n1 n12) x(x(tup(n2 tup(n6 n21)) n13) x(x(n22 n14) x(x(n23 n15) x(n24 _)))))))))))) n25)))))))) n3)) tup(n5 n21)) n22) n23)) n16) x(tup(dup604(n17 dup610(?(::std::data::List::Iter::next::3 ::std::data::List::Iter::next::2 x(x(n26 n8) x(x(ref(n27 n18) n9) n25))) n26)) tup(n27 n19)) x(n20 n24)))) }

::std::data::Map::insert::1::3 { x(x(_ 1) x(x(_ tup(::std::data::Map::empty tup(tup(n0 n1) ::std::data::Map::empty))) x(n0 x(n1 ::std::logical::Option::None)))) }

::std::data::Map::insert::1::8 { x(x(_ n0) x(x(tup(tup(dup1366(dup1359(n1 n2) @add(n3 @add(1 n0))) n4) tup(n5 tup(dup1367(dup1358(n6 @mul$(3 @add(2 @le$(n2 ?(::std::data::Map::balance_right::3 ::std::data::Map::balance_right::2 x(tup(n1 n4) x(n5 x(tup(n6 n7) n8)))))))) n3) n7))) n8) x(n9 x(n10 x(x(tup(dup121(?(::std::data::Map::insert::1::3 ::std::data::Map::insert::1::2 x(x(n11 n12) x(x(n13 n14) x(n9 x(n10 n15))))) n11) n13) tup(n12 n14)) x(x(n16 n16) x(x(n17 n17) x(x(n18 n18) x(n15 _))))))))) }

::std::data::Map::insert::1::9 { x(x(n0 n0) x(x(n1 n1) x(n2 x(n3 x(x(n4 n4) x(x(_ n2) x(x(n5 n3) x(x(n6 n6) x(enum(enum(n5 n7) enum(_ n7)) _))))))))) }

::std::data::Map::insert::1::10 { x(x(_ n0) x(x(tup(tup(dup1366(dup1358(n1 @mul$(3 @add(2 @le$(n2 ?(::std::data::Map::balance_left::3 ::std::data::Map::balance_left::2 x(tup(n1 n3) x(n4 x(tup(n5 n6) n7)))))))) @add(n8 @add(1 n0))) n3) tup(n4 tup(dup1367(dup1359(n5 n2) n8) n6))) n7) x(n9 x(n10 x(x(n11 n11) x(x(n12 n12) x(x(n13 n13) x(x(tup(dup121(?(::std::data::Map::insert::1::3 ::std::data::Map::insert::1::2 x(x(n14 n15) x(x(n16 n17) x(n9 x(n10 n18))))) n14) n16) tup(n15 n17)) x(n18 _))))))))) }

::std::data::List::ord::cmp::1 { fn(ref(tup(dup604(n0 dup610(?(::std::data::List::Iter::next::3 ::std::data::List::Iter::next::2 x(x(n1 n2) x(x(ref(n3 n4) n5) n6))) n1)) tup(n3 n7)) tup(n0 tup(n4 n7))) fn(ref(tup(dup604(n8 dup610(?(::std::data::List::Iter::next::3 ::std::data::List::Iter::next::2 x(x(n9 n10) x(x(ref(n11 n12) n13) enum(::std::data::List::ord::cmp::1::14 enum(::std::data::List::ord::cmp::1::17 x(x(tup(n2 n5) tup(_ ref(n14 n14))) x(x(tup(n10 n13) tup(_ ref(n15 n15))) x(n16 n6)))))))) n9)) tup(n11 n17)) tup(n8 tup(n12 n17))) n16)) }

::std::data::List::ord::cmp::1::1 { x(x(tup(dup610(?(::std::data::List::Iter::next::3 ::std::data::List::Iter::next::2 x(x(n0 n1) x(x(n2 n3) n4))) n0) n2) n5) x(x(tup(dup610(?(::std::data::List::Iter::next::3 ::std::data::List::Iter::next::2 x(x(n6 n7) x(x(n8 n9) enum(::std::data::List::ord::cmp::1::14 enum(::std::data::List::ord::cmp::1::17 x(x(tup(n1 n3) n5) x(x(tup(n7 n9) n10) x(n11 n4)))))))) n6) n8) n10) n11)) }

::std::data::List::ord::cmp::1::11 { x(x(n0 n0) x(x(n1 n1) ::std::ops::Ord::Lt)) }

::std::data::List::ord::cmp::1::13 { x(x(n0 n0) x(x(n1 n1) ::std::ops::Ord::Gt)) }

::std::data::List::ord::cmp::1::14 { enum(n0 x(n1 x(n2 x(n3 enum(::std::data::List::ord::cmp::1::15 enum(::std::data::List::ord::cmp::1::16 x(n1 x(n2 x(n3 n0))))))))) }

::std::data::List::ord::cmp::1::15 { enum(ref(dup261(n0 dup261(@lt(n1 ?(::std::unicode::Char::ord::cmp::3 ::std::unicode::Char::ord::cmp::2 x(n2 x(n3 enum(::std::data::List::ord::cmp::1::11 enum(::std::data::List::ord::cmp::1::1 enum(::std::data::List::ord::cmp::1::13 x(n4 x(n5 n6))))))))) n2)) n0) x(n4 x(n5 x(n6 ref(dup262(n7 dup262(n1 n3)) n7))))) }

::std::data::List::ord::cmp::1::16 { x(x(n0 n0) x(x(n1 n1) x(::std::ops::Ord::Lt _))) }

::std::data::List::ord::cmp::1::17 { x(x(n0 n0) x(x(n1 n1) x(n2 enum(::std::data::List::ord::cmp::1::18 enum(::std::ops::Ord::Eq n2))))) }

::std::data::List::ord::cmp::1::18 { enum(_ ::std::ops::Ord::Gt) }

::std::unicode::Char::ord::cmp { fn(ref(dup261(n0 dup261(@lt(n1 ?(::std::unicode::Char::ord::cmp::3 ::std::unicode::Char::ord::cmp::2 x(n2 x(n3 n4)))) n2)) n0) fn(ref(dup262(n5 dup262(n1 n3)) n5) n4)) }

::std::unicode::Char::ord::cmp::2 { x(_ x(_ ::std::ops::Ord::Lt)) }

::std::unicode::Char::ord::cmp::3 { x(@lt$(n0 ?(::std::ops::Ord::Eq ::std::ops::Ord::Gt n1)) x(n0 n1)) }

::std::data::Map::get_or_insert::1 { fn(ref(tup(dup121(?(::std::data::Map::insert::1::3 ::std::data::Map::insert::1::2 x(x(n0 n1) x(x(n2 n3) x(n4 x(n5 enum(::std::logical::Option::unwrap_or::4 enum(::std::logical::Option::unwrap_or::5 x(n6 n7)))))))) n0) n2) tup(n1 n3)) fn(n4 fn(n6 ref(n7 n5)))) }

::std::data::Map::get::1 { fn(ref(tup(dup283(n0 ?(::std::data::Map::get::1::3 ::std::data::Map::get::1::2 x(x(n1 n2) x(x(n3 n4) n5)))) n1) tup(n0 n2)) fn(ref(n3 n4) n5)) }

::std::data::Map::get::1::2 { x(x(tup(n0 tup(tup(tup(dup604(n1 dup610(?(::std::data::List::Iter::next::3 ::std::data::List::Iter::next::2 x(x(n2 n3) x(x(ref(n4 n5) n6) enum(::std::data::List::ord::cmp::1::14 enum(::std::data::List::ord::cmp::1::17 x(x(tup(n7 n8) tup(_ ref(n9 n9))) x(x(tup(n3 n6) tup(_ ref(n10 n10))) x(enum(::std::data::Map::get::1::8 enum(::std::data::Map::get::1::9 enum(::std::data::Map::get::1::10 x(x(tup(n11 tup(n12 n13)) n14) x(x(n0 n15) x(x(n16 n17) x(x(n18 n19) n20))))))) n21)))))))) n2)) tup(n4 n22)) n16) n18)) tup(n15 tup(tup(tup(n1 tup(n5 n22)) n17) n19))) x(x(tup(dup604(n11 dup610(?(::std::data::List::Iter::next::3 ::std::data::List::Iter::next::2 x(x(n23 n7) x(x(ref(n24 n12) n8) n21))) n23)) tup(n24 n13)) n14) n20)) }

::std::data::Map::get::1::3 { x(x(n0 n0) x(x(n1 n1) ::std::logical::Option::None)) }

::std::data::Map::get::1::8 { x(x(n0 n1) x(x(tup(dup283(n2 ?(::std::data::Map::get::1::3 ::std::data::Map::get::1::2 x(x(n3 n4) x(x(n0 n1) n5)))) n3) tup(n2 n4)) x(x(n6 n6) x(x(n7 n7) n5)))) }

::std::data::Map::get::1::9 { x(x(n0 n0) x(x(n1 n1) x(x(n2 n3) x(x(n4 n4) enum(enum(ref(n2 n3) n5) enum(_ n5)))))) }

::std::data::Map::get::1::10 { x(x(n0 n1) x(x(n2 n2) x(x(n3 n3) x(x(tup(dup283(n4 ?(::std::data::Map::get::1::3 ::std::data::Map::get::1::2 x(x(n5 n6) x(x(n0 n1) n7)))) n5) tup(n4 n6)) n7)))) }

::std::numeric::N64::to_string::to_string { fn(dup330(tup(@eq(0 ?(::std::numeric::N64::eq::3 ::std::numeric::N64::eq::2 x(n0 x(0 ?(::std::numeric::N64::to_string::to_string::3 ::std::numeric::N64::to_string::to_string::2 x(n1 n2)))))) n0) n1) n2) }

::std::numeric::N64::to_string::to_string::2 { x(_ tup(1 tup(tup(48 n0) n0))) }

::std::numeric::N64::to_string::to_string::3 { x(dup339(tup(@eq(0 ?(::std::numeric::N64::eq::3 ::std::numeric::N64::eq::2 x(n0 x(0 ?(::std::numeric::N64::to_string::to_string::6 ::std::numeric::N64::to_string::to_string::5 x(n1 x(tup(0 tup(n2 n2)) n3))))))) n0) n1) n3) }

::std::numeric::N64::to_string::to_string::4 { x(dup339(tup(@eq(0 ?(::std::numeric::N64::eq::3 ::std::numeric::N64::eq::2 x(n0 x(0 ?(::std::numeric::N64::to_string::to_string::6 ::std::numeric::N64::to_string::to_string::5 x(n1 n2)))))) n0) n1) n2) }

::std::numeric::N64::to_string::to_string::5 { x(_ x(n0 n0)) }

::std::numeric::N64::to_string::to_string::6 { x(tup(n0 dup1764(@div(10 n1) @rem(10 dup1765(@lt$(10 ?(::std::numeric::N64::div_rem_n32::3 ::std::numeric::N64::div_rem_n32::2 x(x(n2 dup1785(?(::std::numeric::N64::div_rem_n32::6 ::std::numeric::N64::div_rem_n32::5 x(x(n0 dup1763(@div(10 n3) @rem(10 @add$(48 n4)))) x(n5 x(10 x(0 @add(n3 dup339(@eq(0 ?(::std::numeric::N64::eq::3 ::std::numeric::N64::eq::2 x(n6 x(0 ?(::std::numeric::N64::to_string::to_string::6 ::std::numeric::N64::to_string::to_string::5 x(tup(n7 n8) x(tup(n9 tup(tup(n4 n10) n11)) n12))))))) n7))))))) n5)) x(10 x(x(n1 dup339(n6 n8)) _))))) n2)))) x(tup(@add$(1 n9) tup(n10 n11)) n12)) }

::day_24::Wire::new { tup(n0 n0) }

::day_24::Wire::input { fn(n0 tup(_ n0)) }

::day_24::Wire::get { fn(ref(tup(n0 dup357(n1 n2)) tup(n0 n1)) n2) }

::day_24::Wire::set { fn(ref(tup(n0 n1) tup(_ n1)) fn(n0 _)) }

::std::data::List::get { fn(ref(tup(n0 tup(n1 n2)) tup(n0 tup(n3 n2))) fn(dup395(?(::std::data::List::get::3 ::std::data::List::get::2 x(x(ref(n1 n3) ref(tup(n4 n5) tup(n6 n5))) n7)) n7) ref(n4 n6))) }

::std::data::List::get::1 { x(n0 dup395(?(::std::data::List::get::3 ::std::data::List::get::2 x(n0 n1)) n1)) }

::std::data::List::get::2 { x(x(ref(tup(n0 n1) tup(n0 n2)) n3) @sub(1 dup395(?(::std::data::List::get::3 ::std::data::List::get::2 x(x(ref(n1 n2) n3) n4)) n4))) }

::std::data::List::get::3 { x(x(n0 n0) _) }

::std::data::List::pop_front { fn(ref(tup(dup456(?(::std::data::List::pop_front::3 ::std::data::List::pop_front::2 x(x(n0 n1) x(x(n2 n3) n4))) n0) tup(n2 n5)) tup(n1 tup(n3 n5))) n4) }

::std::data::List::pop_front::2 { x(x(@sub(1 n0) n0) x(x(tup(n1 n2) n2) enum(enum(n1 n3) enum(_ n3)))) }

::std::data::List::pop_front::3 { x(x(n0 n0) x(x(n1 n1) ::std::logical::Option::None)) }

::std::data::List::concat { fn(tup(@add(n0 n1) tup(n2 n3)) fn(tup(n0 tup(n3 n4)) tup(n1 tup(n2 n4)))) }

::std::data::List::iter { fn(ref(tup(dup604(n0 n1) tup(n2 n3)) tup(n0 tup(n4 n3))) tup(n1 ref(n2 n4))) }

::std::data::List::Iter::next { fn(ref(tup(dup610(?(::std::data::List::Iter::next::3 ::std::data::List::Iter::next::2 x(x(n0 n1) x(x(n2 n3) n4))) n0) n2) tup(n1 n3)) n4) }

::std::data::List::Iter::next::2 { x(x(@sub(1 n0) n0) x(x(ref(tup(n1 n2) tup(n3 n4)) ref(n2 n4)) enum(enum(ref(n1 n3) n5) enum(_ n5)))) }

::std::data::List::Iter::next::3 { x(x(n0 n0) x(x(ref(n1 n1) _) ::std::logical::Option::None)) }

::std::data::List::Iter::drop { fn(ref(tup(_ ref(n0 n0)) _) _) }

::std::data::Map::empty { tup(0 _) }

::std::data::Map::new { fn(tup(dup1086(n0 @add(n1 @add(1 n2))) n3) fn(n4 fn(tup(dup1086(n5 n1) n6) tup(n2 tup(tup(n0 n3) tup(n4 tup(n5 n6))))))) }

::std::data::Map::len { fn(ref(tup(dup1086(n0 n1) n2) tup(n0 n2)) n1) }

::std::data::Map::balance_left { fn(ref(tup(tup(dup1358(n0 @mul$(3 @add(2 @le$(n1 ?(::std::data::Map::balance_left::3 ::std::data::Map::balance_left::2 x(tup(n0 n2) x(n3 x(tup(n4 n5) n6)))))))) n2) tup(n3 tup(dup1359(n4 n1) n5))) n6) _) }

::std::data::Map::balance_left::2 { x(n0 x(n1 x(n2 tup(n0 tup(n1 n2))))) }

::std::data::Map::balance_left::3 { x(n0 x(n1 x(tup(_ tup(tup(dup1362(n2 @le(n3 ?(::std::data::Map::balance_left::6 ::std::data::Map::balance_left::5 x(n0 x(n1 x(tup(n2 n4) x(n5 x(tup(n6 n7) n8)))))))) n4) tup(n5 tup(dup1363(n6 @mul$(2 n3)) n7)))) n8))) }

::std::data::Map::balance_left::5 { x(tup(dup1086(n0 @add(n1 @add(1 n2))) n3) x(n4 x(tup(dup1086(n5 n1) n6) x(n7 x(n8 tup(tup(n2 tup(tup(n0 n3) tup(n4 tup(n5 n6)))) tup(n7 n8))))))) }

::std::data::Map::balance_left::6 { x(tup(dup1086(n0 @add(n1 @add(1 n2))) n3) x(n4 x(tup(_ tup(tup(dup1086(n5 n1) n6) tup(n7 tup(dup1086(n8 @add(n9 @add(1 n10))) n11)))) x(n12 x(tup(dup1086(n13 n9) n14) tup(tup(n2 tup(tup(n0 n3) tup(n4 tup(n5 n6)))) tup(n7 tup(n10 tup(tup(n8 n11) tup(n12 tup(n13 n14))))))))))) }

::std::data::Map::balance_right { fn(ref(tup(tup(dup1359(n0 n1) n2) tup(n3 tup(dup1358(n4 @mul$(3 @add(2 @le$(n1 ?(::std::data::Map::balance_right::3 ::std::data::Map::balance_right::2 x(tup(n0 n2) x(n3 x(tup(n4 n5) n6)))))))) n5))) n6) _) }

::std::data::Map::balance_right::2 { x(n0 x(n1 x(n2 tup(n0 tup(n1 n2))))) }

::std::data::Map::balance_right::3 { x(tup(_ tup(tup(dup1363(n0 @mul$(2 n1)) n2) tup(n3 tup(dup1362(n4 @le(n1 ?(::std::data::Map::balance_right::6 ::std::data::Map::balance_right::5 x(n5 x(n6 x(tup(n0 n2) x(n3 x(tup(n4 n7) n8)))))))) n7)))) x(n5 x(n6 n8))) }

::std::data::Map::balance_right::5 { x(n0 x(tup(dup1086(n1 n2) n3) x(n4 x(n5 x(tup(dup1086(n6 @add(n2 @add(1 n7))) n8) tup(n4 tup(n5 tup(n7 tup(tup(n6 n8) tup(n0 tup(n1 n3))))))))))) }

::std::data::Map::balance_right::6 { x(n0 x(tup(dup1086(n1 n2) n3) x(tup(dup1086(n4 @add(n5 @add(1 n6))) n7) x(n8 x(tup(_ tup(tup(dup1086(n9 n5) n10) tup(n11 tup(dup1086(n12 @add(n2 @add(1 n13))) n14)))) tup(tup(n6 tup(tup(n4 n7) tup(n8 tup(n9 n10)))) tup(n11 tup(n13 tup(tup(n12 n14) tup(n0 tup(n1 n3))))))))))) }

::std::data::Map::is_balanced { fn(ref(tup(dup1358(n0 @mul$(3 @add(2 @le$(n1 n2)))) n3) tup(n0 n3)) fn(ref(tup(dup1359(n4 n1) n5) tup(n4 n5)) n2)) }

::std::data::Map::is_single { fn(ref(tup(dup1362(n0 @le(n1 n2)) n3) tup(n0 n3)) fn(ref(tup(dup1363(n4 @mul$(2 n1)) n5) tup(n4 n5)) n2)) }

::std::data::Map::size { fn(ref(tup(tup(dup1366(n0 @add(n1 @add(1 n2))) n3) tup(n4 tup(dup1367(n5 n1) n6))) tup(tup(n0 n3) tup(n4 tup(n5 n6)))) n2) }

::std::logical::Option::unwrap_or { fn(enum(::std::logical::Option::unwrap_or::4 enum(::std::logical::Option::unwrap_or::5 x(n0 n1))) fn(n0 n1)) }

::std::logical::Option::unwrap_or::4 { enum(n0 x(_ n0)) }

::std::logical::Option::unwrap_or::5 { x(n0 n0) }

::std::logical::Option::unwrap { fn(enum(::std::logical::Option::unwrap::3 enum(_ n0)) n0) }

::std::logical::Option::unwrap::3 { enum(n0 n0) }

::std::numeric::N64::one { tup(1 0) }

::std::numeric::N64::div_rem_n32 { fn(tup(n0 dup1764(@div(n1 n2) @rem(n3 dup1765(@lt$(n4 ?(::std::numeric::N64::div_rem_n32::3 ::std::numeric::N64::div_rem_n32::2 x(x(n5 dup1785(?(::std::numeric::N64::div_rem_n32::6 ::std::numeric::N64::div_rem_n32::5 x(x(n0 dup1763(@div(n6 n7) @rem(n8 n9))) x(n10 x(n11 x(0 @add(n7 n12)))))) n10)) x(n13 x(x(n2 n14) _))))) n5)))) fn(dup1767(n1 dup1767(n3 dup1767(n4 dup1767(n13 dup1767(n11 dup1767(n6 n8)))))) tup(tup(n12 n14) n9))) }

::std::numeric::N64::div_rem_n32::2 { x(x(dup1777(@div(n0 n1) @rem(n2 n3)) n3) x(dup1778(n0 n2) x(x(_ n1) _))) }

::std::numeric::N64::div_rem_n32::3 { x(x(n0 n0) x(_ x(x(n1 n1) _))) }

::std::numeric::N64::div_rem_n32::4 { x(n0 x(dup1785(?(::std::numeric::N64::div_rem_n32::6 ::std::numeric::N64::div_rem_n32::5 x(n0 x(n1 n2))) n1) n2)) }

::std::numeric::N64::div_rem_n32::5 { x(x(dup(@sub(n0 n1) @lt(n2 n3)) n4) x(dup1792(n5 @sub(n6 @sub(n3 dup1785(?(::std::numeric::N64::div_rem_n32::6 ::std::numeric::N64::div_rem_n32::5 x(x(n1 n4) x(n7 x(n8 x(n9 n10))))) n7)))) x(dup1794(@div$(4294967295 @mul(n5 dup1798(n11 dup(@mul(n12 dup(n0 n2)) @n32_mul_high(n13 n6))))) dup1794(dup(n12 n13) n8)) x(@add(n11 n9) n10)))) }

::std::numeric::N64::div_rem_n32::6 { x(x(n0 n0) x(_ x(_ x(n1 n1)))) }

::std::numeric::N64::or { fn(tup(@n32_or(n0 n1) @n32_or(n2 n3)) fn(tup(n0 n2) tup(n1 n3))) }

::std::numeric::N64::shl { fn(tup(n0 n1) fn(dup1823(@n32_and(32 ?(::std::numeric::N64::shl::3 ::std::numeric::N64::shl::2 x(n0 x(n1 x(n2 n3))))) n2) n3)) }

::std::numeric::N64::shl::2 { x(@n32_shl(n0 n1) x(_ x(n0 tup(0 n1)))) }

::std::numeric::N64::shl::3 { x(dup1830(@n32_shl(n0 n1) @n32_shr(n2 n3)) x(@n32_shl(n4 @n32_or(n3 n5)) x(dup1832(n0 dup1832(n4 @sub$(0 n2))) tup(n1 n5)))) }

::std::numeric::N64::eq { fn(tup(@eq(n0 ?(::std::numeric::N64::eq::3 ::std::numeric::N64::eq::2 x(n1 x(n2 n3)))) n1) fn(tup(n0 n2) n3)) }

::std::numeric::N64::eq::2 { x(@eq(n0 ?(0 1 n1)) x(n0 n1)) }

::std::numeric::N64::eq::3 { x(_ x(_ 0)) }

::std::unicode::String::len { fn(ref(tup(dup2134(n0 n1) n2) tup(n0 n2)) n1) }

::std::unicode::String::split { fn(tup(dup2134(n0 @le$(n1 ?(::std::unicode::String::split_once::3 ::std::unicode::String::split_once::2 x(tup(n2 n3) x(tup(0 tup(n4 n4)) x(tup(n0 n5) tup(n6 enum(::std::unicode::String::split::5 enum(::std::unicode::String::split::6 x(n7 x(tup(1 tup(tup(n6 n8) n8)) n9))))))))))) n5) fn(dup2143(tup(dup2134(n2 n1) n3) n7) n9)) }

::std::unicode::String::split::1 { x(tup(dup2134(n0 @le$(n1 ?(::std::unicode::String::split_once::3 ::std::unicode::String::split_once::2 x(tup(n2 n3) x(tup(0 tup(n4 n4)) x(tup(n0 n5) tup(n6 enum(::std::unicode::String::split::5 enum(::std::unicode::String::split::6 x(n7 x(tup(n8 tup(n9 n10)) n11))))))))))) n5) x(dup2143(tup(dup2134(n2 n1) n3) n7) x(tup(@add(1 n8) tup(n9 tup(n6 n10))) n11))) }

::std::unicode::String::split::5 { enum(tup(dup2134(n0 @le$(n1 ?(::std::unicode::String::split_once::3 ::std::unicode::String::split_once::2 x(tup(n2 n3) x(tup(0 tup(n4 n4)) x(tup(n0 n5) tup(n6 enum(::std::unicode::String::split::5 enum(::std::unicode::String::split::6 x(n7 x(tup(n8 tup(n9 n10)) n11))))))))))) n5) x(dup2143(tup(dup2134(n2 n1) n3) n7) x(tup(@add(1 n8) tup(n9 tup(n6 n10))) n11))) }

::std::unicode::String::split::6 { x(_ x(n0 n0)) }

::std::unicode::String::split_once { fn(tup(dup2134(n0 @le$(n1 ?(::std::unicode::String::split_once::3 ::std::unicode::String::split_once::2 x(tup(n2 n3) x(tup(0 tup(n4 n4)) x(tup(n0 n5) n6)))))) n5) fn(tup(dup2134(n2 n1) n3) n6)) }

::std::unicode::String::split_once::1 { x(tup(dup2134(n0 n1) n2) x(n3 x(tup(dup2134(n4 @le$(n1 ?(::std::unicode::String::split_once::3 ::std::unicode::String::split_once::2 x(tup(n0 n2) x(n3 x(tup(n4 n5) n6)))))) n5) n6))) }

::std::unicode::String::split_once::2 { x(tup(dup604(n0 dup610(?(::std::data::List::Iter::next::3 ::std::data::List::Iter::next::2 x(x(n1 n2) x(x(ref(n3 n4) n5) enum(::std::unicode::String::split_once::8 enum(::std::unicode::String::split_once::9 x(tup(n0 tup(n4 n6)) x(n7 x(tup(n8 tup(n9 n10)) x(tup(n2 n5) x(tup(n11 ref(n12 n9)) n13)))))))))) n1)) tup(n3 n6)) x(n7 x(tup(dup604(n8 n11) tup(n12 n10)) n13))) }

::std::unicode::String::split_once::3 { x(_ ::std::unicode::String::split_once::23) }

::std::unicode::String::split_once::5 { x(n0 x(n1 x(n2 x(tup(dup610(?(::std::data::List::Iter::next::3 ::std::data::List::Iter::next::2 x(x(n3 n4) x(x(n5 n6) enum(::std::unicode::String::split_once::8 enum(::std::unicode::String::split_once::9 x(n0 x(n1 x(n2 x(tup(n4 n6) n7))))))))) n3) n5) n7)))) }

::std::unicode::String::split_once::8 { enum(ref(dup2257(n0 n1) n0) x(n2 x(n3 x(n4 x(n5 x(tup(dup610(?(::std::data::List::Iter::next::3 ::std::data::List::Iter::next::2 x(x(n6 n7) x(x(n8 n9) enum(::std::unicode::String::split_once::12 enum(::std::unicode::String::split_once::13 x(n2 x(n3 x(n4 x(n5 x(tup(n7 n9) x(n1 n10))))))))))) n6) n8) n10)))))) }

::std::unicode::String::split_once::9 { x(_ x(n0 x(tup(_ tup(_ n1)) x(_ x(tup(n2 ref(n3 _)) tup(n0 enum(enum(tup(n2 tup(n3 n1)) n4) enum(_ n4)))))))) }

::std::unicode::String::split_once::12 { enum(ref(dup2271(n0 n1) n0) x(n2 x(n3 x(n4 x(n5 x(n6 x(@ne(n1 ?(::std::unicode::String::split_once::5 ::std::unicode::String::split_once::16 x(n2 x(n3 x(n4 x(n5 x(n6 n7))))))) n7))))))) }

::std::unicode::String::split_once::13 { x(_ x(n0 x(tup(_ tup(_ n1)) x(_ x(tup(n2 ref(n3 _)) x(_ tup(n0 enum(enum(tup(n2 tup(n3 n1)) n4) enum(_ n4))))))))) }

::std::unicode::String::split_once::14 { x(n0 x(tup(_ tup(_ n1)) x(tup(n2 ref(n3 _)) tup(n0 enum(enum(tup(n2 tup(n3 n1)) n4) enum(_ n4)))))) }

::std::unicode::String::split_once::16 { x(n0 x(n1 x(tup(dup456(?(::std::data::List::pop_front::3 ::std::data::List::pop_front::2 x(x(n2 n3) x(x(n4 n5) enum(::std::unicode::String::split_once::21 enum(::std::unicode::String::split_once::22 x(n0 x(n1 x(tup(n3 tup(n5 n6)) n7)))))))) n2) tup(n4 n6)) x(tup(_ ref(n8 n8)) x(tup(_ ref(n9 n9)) n7))))) }

::std::unicode::String::split_once::21 { enum(n0 x(tup(dup2134(n1 n2) n3) x(tup(@add(1 n4) tup(n5 tup(n0 n6))) x(tup(dup2134(n7 @le$(n2 ?(::std::unicode::String::split_once::3 ::std::unicode::String::split_once::2 x(tup(n1 n3) x(tup(n4 tup(n5 n6)) x(tup(n7 n8) n9)))))) n8) n9)))) }

::std::unicode::String::split_once::22 { x(_ ::std::unicode::String::split_once::23) }

::std::unicode::String::split_once::23 { x(tup(@add(n0 n1) tup(n2 n3)) x(tup(n0 tup(n3 n4)) tup(tup(n1 tup(n2 n4)) ::std::logical::Option::None))) }

::std::IO::println { fn(ref(n0 n1) fn(tup(dup2438(?(::std::IO::print::3 ::std::IO::print::2 x(x(n0 @io_print_char(10 n1)) x(n2 n3))) n2) tup(n3 _)) _)) }

::std::IO::print { fn(ref(n0 n1) fn(tup(dup2438(?(::std::IO::print::3 ::std::IO::print::2 x(x(n0 n1) x(n2 n3))) n2) tup(n3 _)) _)) }

::std::IO::print::1 { x(n0 x(dup2438(?(::std::IO::print::3 ::std::IO::print::2 x(n0 x(n1 n2))) n1) n2)) }

::std::IO::print::2 { x(x(@io_print_char(n0 n1) n2) x(@sub(1 dup2438(?(::std::IO::print::3 ::std::IO::print::2 x(x(n1 n2) x(n3 n4))) n3)) tup(n0 n4))) }

::std::IO::print::3 { x(x(n0 n0) _) }

::std::IO::read_line { fn(ref(dup(n0 @io_read_byte(0 dup(dup2481(@ne(0 ?(::std::IO::read_line::3 ::std::IO::read_line::2 x(x(n1 n2) x(n3 n4)))) n3) @seq$(n0 n1)))) n2) n4) }

::std::IO::read_line::2 { x(n0 x(dup2487(@eq(10 ?(::std::IO::read_line::6 ::std::IO::read_line::5 x(n0 x(n1 n2)))) n1) enum(enum(n2 n3) enum(_ n3)))) }

::std::IO::read_line::3 { x(x(n0 n0) x(_ ::std::logical::Option::None)) }

::std::IO::read_line::5 { x(x(n0 n0) x(_ tup(0 tup(n1 n1)))) }

::std::IO::read_line::6 { x(x(dup(n0 @io_read_byte(10 dup(dup2504(@ne(10 ?(::std::IO::read_line::10 ::std::IO::read_line::9 x(x(n1 n2) x(n3 x(x(tup(1 tup(tup(n4 n5) n5)) n6) _))))) n3) @seq$(n0 n1)))) n2) x(n4 n6)) }

::std::IO::read_line::7 { x(x(dup(n0 @io_read_byte(10 dup(dup2504(@ne(10 ?(::std::IO::read_line::10 ::std::IO::read_line::9 x(x(n1 n2) x(n3 n4)))) n3) @seq$(n0 n1)))) n2) n4) }

::std::IO::read_line::9 { x(x(dup(n0 @io_read_byte(10 dup(dup2504(@ne(10 ?(::std::IO::read_line::10 ::std::IO::read_line::9 x(x(n1 n2) x(n3 x(x(tup(n4 tup(n5 n6)) n7) n8))))) n3) @seq$(n0 n1)))) n2) x(n9 x(x(tup(@add(1 n4) tup(n5 tup(n9 n6))) n7) n8))) }

::std::IO::read_line::10 { x(x(n0 n0) x(_ x(x(n1 n1) _))) }

