
::main { ::day_07::main }

::day_07::main {
  fn(ref(w3 w20) _)
  ::std::n64::N64::from_n32 = fn(0 w7)
  ::std::n64::N64::from_n32 = fn(0 w9)
  ::day_07::main::2 = x(x(w3 w32) x(x(w7 w30) x(w9 w28)))
  ::std::n64::N64::to_string = fn(w30 w16)
  ::std::list::List::concat = fn(tup(8 tup(tup(80 tup(97 tup(114 tup(116 tup(32 tup(49 tup(58 tup(32 w33)))))))) w33)) fn(w16 w17))
  ::std::io::IO::println = fn(ref(w32 w12) fn(w17 _))
  ::std::n64::N64::to_string = fn(w28 w24)
  ::std::list::List::concat = fn(tup(8 tup(tup(80 tup(97 tup(114 tup(116 tup(32 tup(50 tup(58 tup(32 w34)))))))) w34)) fn(w24 w25))
  ::std::io::IO::println = fn(ref(w12 w20) fn(w25 _))
}

::day_07::main::2 {
  x(x(w10 w16) w8)
  ::std::io::IO::read_line = fn(ref(w10 w1) enum(::day_07::main::5 enum(::day_07::main::6 x(x(w1 w16) w8))))
}

::day_07::main::5 {
  enum(w0 x(w7 x(x(w5 w56) x(w3 w54))))
  ::std::list::List::split_once = fn(w0 fn(tup(2 tup(tup(58 tup(32 w36)) w36)) tup(w11 w12)))
  ::std::n64::N64::parse = fn(w11 w15)
  ::std::option::Option::unwrap = fn(w15 w16)
  ::std::option::Option::unwrap = fn(w12 w19)
  ::std::list::List::split = fn(w19 fn(tup(1 tup(tup(32 w37) w37)) w21))
  ::std::list::List::pop_front = fn(ref(w21 w24) w26)
  ::std::option::Option::unwrap = fn(w26 w27)
  ::std::n32::N32::parse = fn(w27 w28)
  ::std::option::Option::unwrap = fn(w28 w29)
  ::std::n64::N64::from_n32 = fn(w29 w30)
  ::day_07::main::7 = x(w24 x(x(tup(1 tup(tup(w30 w38) w38)) w43) x(tup(0 tup(w39 w39)) w41)))
  ::day_07::main::21 = x(x(w5 w52) x(x(w3 w50) x(w16 x(w43 x(w41 _)))))
  ::day_07::main::2 = x(w7 x(x(w52 w56) x(w50 w54)))
}

::day_07::main::6 { x(x(w5 w5) x(x(w3 w3) x(w1 w1))) }

::day_07::main::7 {
  x(w9 w8)
  ::std::list::List::pop_front = fn(ref(w9 w1) enum(::day_07::main::10 enum(::day_07::main::11 x(w1 w8))))
}

::day_07::main::10 {
  enum(w0 x(w6 x(x(dup52(w17 dup52(w21 w34)) w89) x(dup55(w26 dup55(w30 w35)) w87))))
  ::std::list::List::len = fn(ref(w0 w8) w10)
  ::std::n32::N32::parse = fn(w8 w13)
  ::std::option::Option::unwrap = fn(w13 w14)
  ::std::n64::N64::from_n32 = fn(w14 dup60(w54 dup60(w60 dup60(w69 dup60(w75 w84)))))
  ::std::n64::N64::add = fn(w50 fn(w54 w55))
  ::std::list::List::map = fn(w17 fn(fn(w50 w55) w19))
  ::std::n64::N64::mul = fn(w56 fn(w60 w61))
  ::std::list::List::map = fn(w21 fn(fn(w56 w61) w23))
  ::day_07::main::14 = x(w10 x(1 w63))
  ::std::n64::N64::add = fn(w65 fn(w69 w70))
  ::std::list::List::map = fn(w26 fn(fn(w65 w70) w28))
  ::std::n64::N64::mul = fn(w71 fn(w75 w76))
  ::std::list::List::map = fn(w30 fn(fn(w71 w76) w32))
  ::std::list::List::concat = fn(w34 fn(w35 w36))
  ::std::n64::N64::from_n32 = fn(w63 w82)
  ::std::n64::N64::mul = fn(w77 fn(w82 w83))
  ::std::n64::N64::add = fn(w83 fn(w84 w85))
  ::std::list::List::map = fn(w36 fn(fn(w77 w85) w38))
  ::std::list::List::concat = fn(w19 fn(w23 w42))
  ::std::list::List::concat = fn(w28 fn(w32 w46))
  ::std::list::List::concat = fn(w46 fn(w38 w48))
  ::day_07::main::7 = x(w6 x(x(w42 w89) x(w48 w87)))
}

::day_07::main::11 { x(_ x(x(w3 w3) x(w1 w1))) }

::day_07::main::14 { x(dup86(@lt$(0 ?(::day_07::main::16 ::day_07::main::15 x(w7 w3))) w7) w3) }

::day_07::main::15 {
  x(@sub(1 w3) x(@mul(10 w1) w8))
  ::day_07::main::14 = x(w3 x(w1 w8))
}

::day_07::main::16 { x(_ x(w1 w1)) }

::day_07::main::21 {
  x(w12 x(w10 x(w8 x(w7 w6))))
  ::std::list::List::pop_front = fn(ref(w7 w1) enum(::day_07::main::24 enum(::day_07::main::25 x(w12 x(w10 x(w8 x(w1 w6)))))))
}

::day_07::main::24 {
  enum(w0 x(w9 x(w7 x(dup109(w12 w17) w4))))
  ::std::n64::N64::eq = fn(w0 fn(w12 ?(::day_07::main::21 ::day_07::main::27 x(w9 x(w7 x(w17 w4))))))
}

::day_07::main::25 {
  x(x(w7 w7) x(w5 x(w3 x(_ w1))))
  ::day_07::main::29 = x(w5 x(w3 w1))
}

::day_07::main::27 {
  x(x(w15 w2) x(x(w13 w6) x(dup125(w1 w5) _)))
  ::std::n64::N64::add = fn(w15 fn(w1 w2))
  ::std::n64::N64::add = fn(w13 fn(w5 w6))
}

::day_07::main::29 {
  x(w9 x(w7 x(w6 w10)))
  ::std::list::List::pop_front = fn(ref(w6 w1) enum(::day_07::main::32 enum(::day_07::main::33 x(w9 x(w7 x(w1 w10))))))
}

::day_07::main::32 {
  enum(w0 x(w6 x(dup144(w9 w13) w3)))
  ::std::n64::N64::eq = fn(w0 fn(w9 ?(::day_07::main::29 ::day_07::main::35 x(w6 x(w13 w3)))))
}

::day_07::main::33 { x(x(w4 w4) _) }

::day_07::main::35 {
  x(x(w8 w2) x(w6 _))
  ::std::n64::N64::add = fn(w8 fn(w6 w2))
}

::std::io::IO::println {
  fn(ref(w3 w14) fn(w5 _))
  ::std::io::IO::print = fn(ref(w3 w9) fn(w5 _))
  ::std::io::IO::print_char = fn(ref(w9 w14) fn(10 _))
}

::std::io::IO::print {
  fn(ref(w3 w15) fn(tup(w9 tup(w10 _)) _))
  ::std::io::IO::print::2 = x(x(w3 w15) x(w9 w10))
}

::std::io::IO::print::2 { x(w4 x(dup620(?(::std::io::IO::print::4 ::std::io::IO::print::3 x(w4 x(w6 w1))) w6) w1)) }

::std::io::IO::print::3 {
  x(x(w17 w21) x(@sub(1 w1) tup(w4 w5)))
  ::std::io::IO::print_char = fn(ref(w17 w10) fn(w4 _))
  ::std::io::IO::print::2 = x(x(w10 w21) x(w1 w5))
}

::std::io::IO::print::4 { x(x(w3 w3) _) }

::std::io::IO::print_char { fn(ref(@io_print_char(char io) io) fn(char _)) }

::std::io::IO::read_line {
  fn(ref(w3 w18) w15)
  ::std::io::IO::read_byte = fn(ref(w3 w8) fn(0 dup665(@ne(0 ?(::std::io::IO::read_line::4 ::std::io::IO::read_line::3 x(x(w8 w18) x(w16 w15)))) w16)))
}

::std::io::IO::read_line::3 {
  x(w5 x(dup672(@eq(10 ?(::std::io::IO::read_line::7 ::std::io::IO::read_line::6 x(w5 x(w9 w8)))) w9) w1))
  ::std::option::Option::Some = fn(w8 w1)
}

::std::io::IO::read_line::4 { x(x(w3 w3) x(_ ::std::option::Option::None)) }

::std::io::IO::read_line::6 { x(x(w4 w4) x(_ tup(0 tup(w5 w5)))) }

::std::io::IO::read_line::7 {
  x(w8 x(w6 w12))
  ::std::io::IO::read_line::8 = x(w8 x(x(tup(1 tup(tup(w6 w9) w9)) w12) _))
}

::std::io::IO::read_line::8 {
  x(x(w10 w18) w8)
  ::std::io::IO::read_byte = fn(ref(w10 w1) fn(10 dup689(@ne(10 ?(::std::io::IO::read_line::11 ::std::io::IO::read_line::10 x(x(w1 w18) x(w16 w8)))) w16)))
}

::std::io::IO::read_line::10 {
  x(w9 x(w7 x(x(w6 w19) w17)))
  ::std::list::List::concat = fn(w6 fn(tup(1 tup(tup(w7 w10) w10)) w3))
  ::std::io::IO::read_line::8 = x(w9 x(x(w3 w19) w17))
}

::std::io::IO::read_line::11 { x(x(w5 w5) x(_ x(x(w2 w2) _))) }

::std::io::IO::read_byte { fn(ref(dup(io0 @io_read_byte(default dup(byte @seq$(io0 io1)))) io1) fn(default byte)) }

::std::list::List::len { fn(ref(tup(dup726(w13 w9) w10) tup(w9 w10)) w13) }

::std::list::List::map {
  fn(tup(dup793(w8 w23) tup(w3 _)) fn(w5 tup(w8 tup(w12 w20))))
  ::std::list::List::map::2 = x(w23 x(w3 x(w5 x(w12 w20))))
}

::std::list::List::map::2 { x(dup804(?(::std::list::List::map::4 ::std::list::List::map::3 x(w10 w4)) w10) w4) }

::std::list::List::map::3 {
  x(@sub(1 w18) x(tup(w1 w2) x(dup813(fn(w1 w9) w26) x(tup(w9 w11) w25))))
  ::std::list::List::map::2 = x(w18 x(w2 x(w26 x(w11 w25))))
}

::std::list::List::map::4 { x(_ x(_ x(_ x(w1 w1)))) }

::std::list::List::pop_front { fn(ref(tup(dup823(?(::std::list::List::pop_front::4 ::std::list::List::pop_front::3 x(x(w17 w18) x(x(w5 w16) w14))) w17) tup(w5 w6)) tup(w18 tup(w16 w6))) w14) }

::std::list::List::pop_front::3 {
  x(x(@sub(1 w1) w1) x(x(tup(w3 w4) w4) w9))
  ::std::option::Option::Some = fn(w3 w9)
}

::std::list::List::pop_front::4 { x(x(w4 w4) x(x(w2 w2) ::std::option::Option::None)) }

::std::list::List::concat { fn(tup(@add(w12 w20) tup(w8 w13)) fn(tup(w12 tup(w13 w23)) tup(w20 tup(w8 w23)))) }

::std::list::List::iter { fn(ref(tup(dup983(w2 w12) tup(w5 w6)) tup(w2 tup(w14 w6))) tup(w12 ref(w5 w14))) }

::std::list::List::Iter::next { fn(ref(tup(dup990(?(::std::list::List::Iter::next::4 ::std::list::List::Iter::next::3 x(x(w16 w17) x(x(w5 w15) w13))) w16) w5) tup(w17 w15)) w13) }

::std::list::List::Iter::next::3 {
  x(x(@sub(1 w1) w1) x(x(ref(tup(w4 w7) tup(w5 w8)) ref(w7 w8)) w15))
  ::std::option::Option::Some = fn(ref(w4 w5) w15)
}

::std::list::List::Iter::next::4 { x(x(w8 w8) x(x(ref(w2 w2) _) ::std::option::Option::None)) }

::std::list::List::Iter::drop { fn(ref(tup(_ ref(w9 w9)) _) _) }

::std::list::List::split {
  fn(w2 fn(w3 w10))
  ::std::list::List::split::2 = x(w2 x(w3 x(tup(0 tup(w9 w9)) w10)))
}

::std::list::List::split::2 {
  x(w14 x(dup1066(w1 w20) x(w12 w18)))
  ::std::list::List::split_once = fn(w14 fn(w1 tup(w3 enum(::std::list::List::split::6 enum(::std::list::List::split::7 x(w20 x(w9 w18)))))))
  ::std::list::List::concat = fn(w12 fn(tup(1 tup(tup(w3 w15) w15)) w9))
}

::std::list::List::split::6 {
  enum(w0 w4)
  ::std::list::List::split::2 = x(w0 w4)
}

::std::list::List::split::7 { x(_ x(w1 w1)) }

::std::list::List::split_once {
  fn(w2 fn(w3 w15))
  ::std::list::List::split_once::2 = x(w3 x(tup(0 tup(w14 w14)) x(w2 w15)))
}

::std::list::List::split_once::2 {
  x(w12 x(w11 x(w10 w13)))
  ::std::list::List::len = fn(ref(w10 w1) @le$(w7 ?(::std::list::List::split_once::4 ::std::list::List::split_once::3 x(w5 x(w11 x(w1 w13))))))
  ::std::list::List::len = fn(ref(w12 w5) w7)
}

::std::list::List::split_once::3 {
  x(w23 x(w22 x(w21 w42)))
  ::std::list::List::iter = fn(ref(w23 w1) w3)
  ::std::list::List::iter = fn(ref(w21 w6) w8)
  ::std::list::List::split_once::6 = x(w1 x(w22 x(w6 x(w3 x(w8 w42)))))
}

::std::list::List::split_once::4 { x(_ ::std::list::List::split_once::24) }

::std::list::List::split_once::6 {
  x(w10 x(w9 x(w8 x(w7 w6))))
  ::std::list::List::Iter::next = fn(ref(w7 w1) enum(::std::list::List::split_once::9 enum(::std::list::List::split_once::10 x(w10 x(w9 x(w8 x(w1 w6)))))))
}

::std::list::List::split_once::9 {
  enum(ref(dup1182(w1 w16) w1) x(w9 x(w8 x(w7 x(w6 x(w5 w15))))))
  ::std::list::List::Iter::next = fn(ref(w5 w11) enum(::std::list::List::split_once::13 enum(::std::list::List::split_once::14 x(w9 x(w8 x(w7 x(w6 x(w11 x(w16 w15)))))))))
}

::std::list::List::split_once::10 {
  x(_ x(w4 x(w3 x(_ w1))))
  ::std::list::List::split_once::15 = x(w4 x(w3 w1))
}

::std::list::List::split_once::13 { enum(ref(dup1196(w1 w13) w1) x(w10 x(w9 x(w8 x(w7 x(w6 x(@ne(w13 ?(::std::list::List::split_once::6 ::std::list::List::split_once::17 x(w10 x(w9 x(w8 x(w7 x(w6 w15))))))) w15))))))) }

::std::list::List::split_once::14 {
  x(_ x(w5 x(w4 x(_ x(w2 x(_ w7))))))
  ::std::list::List::split_once::15 = x(w5 x(w4 x(w2 w7)))
}

::std::list::List::split_once::15 {
  x(w3 x(tup(_ tup(_ w12)) x(tup(w6 ref(w8 _)) tup(w3 w20))))
  ::std::option::Option::Some = fn(tup(w6 tup(w8 w12)) w20)
}

::std::list::List::split_once::17 {
  x(w5 x(w4 x(w3 x(w2 x(w1 w31)))))
  ::std::list::List::Iter::drop = fn(ref(w2 _) _)
  ::std::list::List::Iter::drop = fn(ref(w1 _) _)
  ::std::list::List::pop_front = fn(ref(w3 w27) enum(::std::list::List::split_once::22 enum(::std::list::List::split_once::23 x(w5 x(w4 x(w27 w31))))))
}

::std::list::List::split_once::22 {
  enum(w0 x(w5 x(w4 w3)))
  ::std::list::List::concat = fn(w4 fn(tup(1 tup(tup(w0 w10) w10)) w9))
  ::std::list::List::split_once::2 = x(w5 x(w9 w3))
}

::std::list::List::split_once::23 { x(_ ::std::list::List::split_once::24) }

::std::list::List::split_once::24 {
  x(w14 x(w13 tup(w10 ::std::option::Option::None)))
  ::std::list::List::concat = fn(w14 fn(w13 w10))
}

::std::n32::N32::parse { fn(tup(dup2320(?(::std::n32::N32::parse::4 ::std::n32::N32::parse::3 x(w13 x(w7 w11))) w13) tup(w7 _)) w11) }

::std::n32::N32::parse::3 {
  x(w5 x(w4 w6))
  ::std::n32::N32::parse::5 = x(w5 x(w4 x(0 w6)))
}

::std::n32::N32::parse::4 {
  x(_ x(_ w4))
  ::std::n32::N32::parse::11 = x(w4 ::std::option::Option::None)
}

::std::n32::N32::parse::5 { x(dup2331(?(::std::n32::N32::parse::7 ::std::n32::N32::parse::6 x(w8 w3)) w8) w3) }

::std::n32::N32::parse::6 {
  x(w18 x(tup(dup2340(dup2335(w20 @le(57 w23)) w26) w2) x(w16 w25)))
  48 = @le(w20 @n32_and(w23 ?(::std::n32::N32::parse::10 ::std::n32::N32::parse::9 x(w18 x(w2 x(w16 x(w26 w25)))))))
}

::std::n32::N32::parse::7 {
  x(_ x(_ x(w1 w8)))
  ::std::option::Option::Some = fn(w1 w6)
  ::std::n32::N32::parse::11 = x(w8 w6)
}

::std::n32::N32::parse::9 {
  x(@sub(1 w19) x(w3 x(@mul(10 @add(w15 w17)) x(@sub(48 w15) w20))))
  ::std::n32::N32::parse::5 = x(w19 x(w3 x(w17 w20)))
}

::std::n32::N32::parse::10 { x(_ x(_ x(_ x(_ ::std::option::Option::None)))) }

::std::n32::N32::parse::11 { x(w8 w8) }

::std::n64::N64::from_n32 { fn(w2 tup(w2 0)) }

::std::n64::N64::add { fn(tup(dup(@add(bl0 l) @n32_add_high(bl1 c)) @add(bh @add(c h))) fn(tup(dup(bl0 bl1) bh) tup(l h))) }

::std::n64::N64::sub { fn(tup(dup(@sub(bl0 l) @lt(bl1 c)) @sub(bh @sub(c h))) fn(tup(dup(bl0 bl1) bh) tup(l h))) }

::std::n64::N64::mul { fn(tup(dup(@mul(bl0 l) dup(@n32_mul_high(bl1 ll) @mul(bh @add(hl @add(ll h))))) ah) fn(tup(dup(bl0 dup(bl1 @mul(ah hl))) bh) tup(l h))) }

::std::n64::N64::mul_n32_n32 { fn(dup(@mul(b0 l) @n32_mul_high(b1 h)) fn(dup(b0 b1) tup(l h))) }

::std::n64::N64::div_rem_n32 {
  fn(tup(w2 dup2540(@div(w9 w10) @rem(w12 dup2541(@lt$(w31 ?(::std::n64::N64::div_rem_n32::4 ::std::n64::N64::div_rem_n32::3 x(x(w37 w38) x(w36 x(x(w10 w35) _))))) w37)))) fn(dup2543(w9 dup2543(w12 dup2543(w31 dup2543(w36 dup2543(w41 dup2543(w18 w22)))))) tup(tup(w21 w35) w24)))
  ::std::n64::N64::div_rem_n32::5 = x(x(w2 dup2539(@div(w18 w19) @rem(w22 w24))) x(w38 x(w41 x(0 @add(w19 w21)))))
}

::std::n64::N64::div_rem_n32::3 { x(x(dup2554(@div(w1 w2) @rem(w4 w6)) w6) x(dup2555(w1 w4) x(x(_ w2) _))) }

::std::n64::N64::div_rem_n32::4 { x(x(w5 w5) x(_ x(x(w2 w2) _))) }

::std::n64::N64::div_rem_n32::5 { x(w6 x(dup2562(?(::std::n64::N64::div_rem_n32::7 ::std::n64::N64::div_rem_n32::6 x(w6 x(w10 w3))) w10) w3)) }

::std::n64::N64::div_rem_n32::6 {
  x(x(w27 w33) x(dup2569(w2 w9) x(dup2571(w0 dup2571(w12 w30)) x(@add(w5 w7) w29))))
  4294967295 = @div(w0 @mul(w2 dup2575(w5 w11)))
  ::std::n64::N64::mul_n32_n32 = fn(w11 fn(w12 w13))
  ::std::n64::N64::sub = fn(tup(w27 w9) fn(w13 tup(w15 w16)))
  ::std::n64::N64::div_rem_n32::5 = x(x(w15 w33) x(w16 x(w30 x(w7 w29))))
}

::std::n64::N64::div_rem_n32::7 { x(x(w5 w5) x(_ x(_ x(w1 w1)))) }

::std::n64::N64::eq { fn(tup(@eq(w5 ?(::std::n64::N64::eq::4 ::std::n64::N64::eq::3 x(w3 x(w6 w14)))) w3) fn(tup(w5 w6) w14)) }

::std::n64::N64::eq::3 { x(@eq(w4 ?(0 1 w6)) x(w4 w6)) }

::std::n64::N64::eq::4 { x(_ x(_ 0)) }

::std::n64::N64::parse { fn(tup(dup2781(?(::std::n64::N64::parse::4 ::std::n64::N64::parse::3 x(w13 x(w7 w11))) w13) tup(w7 _)) w11) }

::std::n64::N64::parse::3 {
  x(w6 x(w5 w7))
  ::std::n64::N64::from_n32 = fn(0 w0)
  ::std::n64::N64::parse::5 = x(w6 x(w5 x(w0 w7)))
}

::std::n64::N64::parse::4 {
  x(_ x(_ w4))
  ::std::n64::N64::parse::11 = x(w4 ::std::option::Option::None)
}

::std::n64::N64::parse::5 { x(dup2792(?(::std::n64::N64::parse::7 ::std::n64::N64::parse::6 x(w8 w3)) w8) w3) }

::std::n64::N64::parse::6 {
  x(w22 x(tup(dup2801(dup2796(w24 @le(57 w27)) w30) w2) x(w20 w29)))
  48 = @le(w24 @n32_and(w27 ?(::std::n64::N64::parse::10 ::std::n64::N64::parse::9 x(w22 x(w2 x(w20 x(w30 w29)))))))
}

::std::n64::N64::parse::7 {
  x(_ x(_ x(w1 w9)))
  ::std::option::Option::Some = fn(w1 w7)
  ::std::n64::N64::parse::11 = x(w9 w7)
}

::std::n64::N64::parse::9 {
  x(@sub(1 w23) x(w3 x(w2 x(@sub(48 w18) w24))))
  ::std::n64::N64::from_n32 = fn(10 w13)
  ::std::n64::N64::mul = fn(w2 fn(w13 w14))
  ::std::n64::N64::from_n32 = fn(w18 w19)
  ::std::n64::N64::add = fn(w14 fn(w19 w20))
  ::std::n64::N64::parse::5 = x(w23 x(w3 x(w20 w24)))
}

::std::n64::N64::parse::10 { x(_ x(_ x(_ x(_ ::std::option::Option::None)))) }

::std::n64::N64::parse::11 { x(w8 w8) }

::std::n64::N64::to_string {
  fn(dup2818(w6 w9) w8)
  ::std::n64::N64::eq = fn(w6 fn(0 ?(::std::n64::N64::to_string::4 ::std::n64::N64::to_string::3 x(w9 w8))))
}

::std::n64::N64::to_string::3 { x(_ tup(1 tup(tup(48 w3) w3))) }

::std::n64::N64::to_string::4 {
  x(w4 w7)
  ::std::n64::N64::to_string::5 = x(w4 x(tup(0 tup(w5 w5)) w7))
}

::std::n64::N64::to_string::5 {
  x(dup2828(w0 w7) w3)
  ::std::n64::N64::eq = fn(w0 fn(0 ?(::std::n64::N64::to_string::7 ::std::n64::N64::to_string::6 x(w7 w3))))
}

::std::n64::N64::to_string::6 { x(_ x(w1 w1)) }

::std::n64::N64::to_string::7 {
  x(w15 x(w14 w18))
  ::std::n64::N64::div_rem_n32 = fn(w15 fn(10 tup(w2 w3)))
  48 = @add(w3 w6)
  ::std::list::List::concat = fn(tup(1 tup(tup(w6 w16) w16)) fn(w14 w9))
  ::std::n64::N64::to_string::5 = x(w2 x(w9 w18))
}

::std::option::Option::Some { fn(f0 enum(enum(f0 r) enum(_ r))) }

::std::option::Option::None { enum(_ enum(r r)) }

::std::option::Option::unwrap { fn(enum(::std::option::Option::unwrap::4 enum(_ w8)) w8) }

::std::option::Option::unwrap::4 { enum(w0 w0) }

