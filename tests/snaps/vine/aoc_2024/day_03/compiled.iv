
::std::logical::Option::None { enum(_ enum(r r)) }

::std::IO::print_char { fn(ref(@io_print_char(char io) io) fn(char _)) }

::std::IO::read_byte { fn(ref(dup(io0 @io_read_byte(default dup(byte @seq$(io0 io1)))) io1) fn(default byte)) }

::main { ::day_03::main }

::day_03::main {
  fn(ref(w1 w30) _)
  ::std::IO::full_input = fn(ref(w1 w6) w8)
  dup5(w10 w20) = w8
  ::day_03::get_muls = fn(w10 w11)
  ::std::numeric::N32::to_string::to_string = fn(w11 w18)
  w18 = tup(@add(8 w40) tup(w38 w41))
  ::std::IO::println = fn(ref(w6 w14) fn(tup(w40 tup(tup(80 tup(97 tup(114 tup(116 tup(32 tup(49 tup(58 tup(32 w38)))))))) w41)) _))
  ::std::unicode::String::split = fn(w20 fn(tup(4 tup(tup(100 tup(111 tup(40 tup(41 w44)))) w44)) w22))
  ::std::unicode::String::split_once = fn(w45 fn(tup(7 tup(tup(100 tup(111 tup(110 tup(39 tup(116 tup(40 tup(41 w56))))))) w56)) w50))
  tup(w51 _) = w50
  ::std::data::List::map = fn(w22 fn(fn(w45 w51) w24))
  ::std::data::List::join = fn(w24 fn(tup(0 tup(w59 w59)) w26))
  ::day_03::get_muls = fn(w26 w27)
  ::std::numeric::N32::to_string::to_string = fn(w27 w34)
  w34 = tup(@add(8 w63) tup(w61 w64))
  ::std::IO::println = fn(ref(w14 w30) fn(tup(w63 tup(tup(80 tup(97 tup(114 tup(116 tup(32 tup(50 tup(58 tup(32 w61)))))))) w64)) _))
}

::std::numeric::N32::to_string::to_string {
  fn(dup14(w5 w7) w6)
  w5 = ?(::std::numeric::N32::to_string::to_string::3 ::std::numeric::N32::to_string::to_string::2 x(w7 w6))
}

::std::numeric::N32::to_string::to_string::2 {
  x(w6 w4)
  ::std::numeric::N32::to_string::to_string::4 = x(w6 x(tup(0 tup(w7 w7)) w9))
  w4 = w9
}

::std::numeric::N32::to_string::to_string::3 {
  x(_ w0)
  w0 = tup(w3 tup(tup(48 w4) w5))
  1 = w3
  w4 = w5
}

::std::numeric::N32::to_string::to_string::4 {
  x(dup23(w0 w6) w2)
  w0 = ?(::std::numeric::N32::to_string::to_string::6 ::std::numeric::N32::to_string::to_string::5 x(w6 w2))
}

::std::numeric::N32::to_string::to_string::5 {
  x(dup26(w0 w7) x(w11 w15))
  w0 = @rem(10 w1)
  48 = @add(w1 w2)
  ::std::data::List::concat = fn(tup(1 tup(tup(w2 w13) w13)) fn(w11 w5))
  w7 = @div(10 w8)
  ::std::numeric::N32::to_string::to_string::4 = x(w8 x(w5 w15))
}

::std::numeric::N32::to_string::to_string::6 { x(_ x(w1 w1)) }

::day_03::get_muls {
  fn(w0 w18)
  ::std::unicode::String::split = fn(w0 fn(tup(4 tup(tup(109 tup(117 tup(108 tup(40 w16)))) w16)) w5))
  ::std::data::List::pop_front = fn(ref(w5 w8) _)
  ::day_03::get_muls::1 = x(w8 x(0 w18))
}

::day_03::get_muls::1 {
  x(w7 w6)
  ::std::data::List::pop_front = fn(ref(w7 w1) w3)
  w3 = enum(::day_03::get_muls::4 enum(::day_03::get_muls::5 x(w1 w6)))
}

::day_03::get_muls::4 {
  enum(w0 x(w4 x(w3 w21)))
  ::std::unicode::String::split_once = fn(w0 fn(tup(1 tup(tup(41 w15) w15)) w8))
  w8 = tup(w10 w11)
  w11 = enum(::day_03::get_muls::9 enum(::day_03::get_muls::10 x(x(w3 w19) x(_ w10))))
  ::day_03::get_muls::1 = x(w4 x(w19 w21))
}

::day_03::get_muls::5 { x(_ x(w1 w1)) }

::day_03::get_muls::9 {
  enum(_ x(w5 x(w18 w2)))
  ::std::unicode::String::split_once = fn(w2 fn(tup(1 tup(tup(44 w16) w16)) w9))
  w9 = tup(w11 w12)
  w12 = enum(::day_03::get_muls::14 enum(::day_03::get_muls::15 x(w5 x(w18 w11))))
}

::day_03::get_muls::10 { x(x(w3 w3) _) }

::day_03::get_muls::14 {
  enum(w0 x(w6 x(w11 w3)))
  ::std::numeric::N32::parse = fn(w3 w9)
  w9 = enum(::day_03::get_muls::19 enum(::day_03::get_muls::20 x(w6 x(w0 w11))))
}

::day_03::get_muls::15 { x(x(w3 w3) _) }

::day_03::get_muls::19 {
  enum(w0 x(w5 x(w3 w10)))
  ::std::numeric::N32::parse = fn(w3 w8)
  w8 = enum(::day_03::get_muls::24 enum(::day_03::get_muls::25 x(w5 x(w0 w10))))
}

::day_03::get_muls::20 { x(x(w3 w3) _) }

::day_03::get_muls::24 {
  enum(w0 x(x(w5 w10) x(w3 _)))
  w3 = @mul(w0 w8)
  w5 = @add(w8 w10)
}

::day_03::get_muls::25 { x(x(w3 w3) _) }

::std::data::List::map {
  r
  _ = _
  r = fn(tup(dup155(w6 w22) tup(w1 _)) fn(w3 w16))
  ::std::data::List::map::1 = x(w22 x(w1 x(w3 x(w10 w19))))
  w16 = tup(w6 tup(w10 w19))
}

::std::data::List::map::1 {
  x(dup165(w0 w10) w4)
  w0 = ?(::std::data::List::map::3 ::std::data::List::map::2 x(w10 w4))
}

::std::data::List::map::2 {
  r
  _ = _
  r = x(w23 x(w22 x(dup174(w7 w26) x(w20 w25))))
  tup(w1 w2) = w22
  w7 = fn(w1 w9)
  w20 = tup(w9 w11)
  w23 = @sub(1 w18)
  ::std::data::List::map::1 = x(w18 x(w2 x(w26 x(w11 w25))))
}

::std::data::List::map::3 { x(_ x(_ x(_ x(w1 w1)))) }

::std::data::List::pop_front {
  fn(ref(tup(dup184(w12 w16) tup(w3 w4)) tup(w17 tup(w15 w4))) w13)
  w12 = ?(::std::data::List::pop_front::3 ::std::data::List::pop_front::2 x(x(w16 w17) x(x(w3 w15) w13)))
}

::std::data::List::pop_front::2 {
  x(x(w14 w1) x(x(w12 w7) w9))
  w14 = @sub(1 w1)
  tup(w3 w4) = w12
  w7 = w4
  w9 = enum(enum(w3 w15) enum(_ w15))
}

::std::data::List::pop_front::3 { x(x(w4 w4) x(x(w2 w2) ::std::logical::Option::None)) }

::std::data::List::concat {
  fn(w0 fn(w1 w22))
  tup(w5 tup(w6 w15)) = w0
  tup(w10 tup(w11 w21)) = w1
  w15 = w11
  w5 = @add(w10 w18)
  w22 = tup(w18 tup(w6 w21))
}

::std::data::List::join {
  fn(w0 fn(w1 w14))
  ::std::data::List::into_iter = fn(w0 w5)
  ::std::data::List::IntoIter::next = fn(ref(w5 w10) w12)
  w12 = enum(::std::data::List::join::4 enum(::std::data::List::join::5 x(w1 x(w10 w14))))
}

::std::data::List::join::4 {
  enum(w0 x(w4 x(w3 w7)))
  ::std::data::List::join::6 = x(w4 x(w3 x(w0 w7)))
}

::std::data::List::join::5 {
  x(_ x(_ w3))
  w3 = tup(w4 tup(w5 w6))
  0 = w4
  w5 = w6
}

::std::data::List::join::6 {
  x(w8 x(w7 w6))
  ::std::data::List::IntoIter::next = fn(ref(w7 w1) w3)
  w3 = enum(::std::data::List::join::9 enum(::std::data::List::join::10 x(w8 x(w1 w6))))
}

::std::data::List::join::9 {
  enum(w0 x(dup261(w6 w14) x(w4 x(w3 w12))))
  ::std::data::List::concat = fn(w6 fn(w0 w8))
  ::std::data::List::concat = fn(w3 fn(w8 w10))
  ::std::data::List::join::6 = x(w14 x(w4 x(w10 w12)))
}

::std::data::List::join::10 { x(_ x(_ x(w1 w1))) }

::std::data::List::iter {
  fn(ref(tup(dup332(w0 w10) tup(w3 w4)) tup(w0 tup(w12 w4))) w14)
  w14 = tup(w10 ref(w3 w12))
}

::std::data::List::Iter::next {
  fn(ref(tup(dup338(w11 w15) w3) tup(w16 w14)) w12)
  w11 = ?(::std::data::List::Iter::next::3 ::std::data::List::Iter::next::2 x(x(w15 w16) x(x(w3 w14) w12)))
}

::std::data::List::Iter::next::2 {
  x(x(w20 w1) x(x(w18 w13) w15))
  w20 = @sub(1 w1)
  ref(tup(w4 w7) tup(w5 w8)) = w18
  w13 = ref(w7 w8)
  w15 = enum(enum(ref(w4 w5) w21) enum(_ w21))
}

::std::data::List::Iter::next::3 {
  x(x(w8 w8) x(x(w6 _) ::std::logical::Option::None))
  ref(w2 w2) = w6
}

::std::data::List::Iter::drop {
  fn(ref(w1 _) _)
  tup(_ ref(w7 w7)) = w1
}

::std::data::List::into_iter {
  fn(tup(w0 tup(w1 _)) w7)
  w7 = tup(w0 w1)
}

::std::data::List::IntoIter::next {
  fn(ref(tup(dup364(w11 w15) w3) tup(w16 w14)) w12)
  w11 = ?(::std::data::List::IntoIter::next::3 ::std::data::List::IntoIter::next::2 x(x(w15 w16) x(x(w3 w14) w12)))
}

::std::data::List::IntoIter::next::2 {
  x(x(w14 w1) x(x(w12 w7) w9))
  w14 = @sub(1 w1)
  tup(w3 w4) = w12
  w7 = w4
  w9 = enum(enum(w3 w15) enum(_ w15))
}

::std::data::List::IntoIter::next::3 { x(x(w4 w4) x(x(w2 w2) ::std::logical::Option::None)) }

::std::numeric::N32::parse {
  fn(w0 w12)
  tup(dup1267(w11 w14) tup(w5 _)) = w0
  w11 = ?(::std::numeric::N32::parse::3 ::std::numeric::N32::parse::2 x(w14 x(w5 w12)))
}

::std::numeric::N32::parse::2 {
  x(w5 x(w4 w6))
  ::std::numeric::N32::parse::4 = x(w5 x(w4 x(0 w6)))
}

::std::numeric::N32::parse::3 {
  x(_ x(_ w4))
  ::std::numeric::N32::parse::10 = x(w4 ::std::logical::Option::None)
}

::std::numeric::N32::parse::4 {
  x(dup1277(w0 w8) w3)
  w0 = ?(::std::numeric::N32::parse::6 ::std::numeric::N32::parse::5 x(w8 w3))
}

::std::numeric::N32::parse::5 {
  x(w18 x(w17 x(w16 w25)))
  tup(dup1286(w19 w26) w2) = w17
  w19 = dup1281(w20 w21)
  48 = @le(w20 w22)
  w21 = @le(57 w23)
  w22 = @n32_and(w23 w24)
  w24 = ?(::std::numeric::N32::parse::9 ::std::numeric::N32::parse::8 x(w18 x(w2 x(w16 x(w26 w25)))))
}

::std::numeric::N32::parse::6 {
  x(_ x(_ x(w1 w9)))
  ::std::numeric::N32::parse::10 = x(w9 enum(enum(w1 w7) enum(_ w7)))
}

::std::numeric::N32::parse::8 {
  x(w4 x(w3 x(w2 x(w1 w20))))
  w2 = @mul(10 w13)
  w1 = @sub(48 w15)
  w13 = @add(w15 w17)
  w4 = @sub(1 w19)
  ::std::numeric::N32::parse::4 = x(w19 x(w3 x(w17 w20)))
}

::std::numeric::N32::parse::9 { x(_ x(_ x(_ x(_ ::std::logical::Option::None)))) }

::std::numeric::N32::parse::10 { x(w10 w10) }

::std::unicode::String::len { fn(ref(tup(dup1875(w0 w13) w2) tup(w0 w2)) w13) }

::std::unicode::String::split {
  fn(w0 fn(w1 w9))
  ::std::unicode::String::split::1 = x(w0 x(w1 x(tup(0 tup(w8 w8)) w9)))
}

::std::unicode::String::split::1 {
  x(w14 x(dup1884(w1 w20) x(w12 w18)))
  ::std::unicode::String::split_once = fn(w14 fn(w1 w2))
  tup(w3 w4) = w2
  ::std::data::List::concat = fn(w12 fn(tup(1 tup(tup(w3 w15) w15)) w9))
  w4 = enum(::std::unicode::String::split::5 enum(::std::unicode::String::split::6 x(w20 x(w9 w18))))
}

::std::unicode::String::split::5 {
  enum(w0 w4)
  ::std::unicode::String::split::1 = x(w0 w4)
}

::std::unicode::String::split::6 { x(_ x(w1 w1)) }

::std::unicode::String::split_once {
  fn(w0 fn(w1 w16))
  ::std::unicode::String::split_once::1 = x(w1 x(tup(0 tup(w15 w15)) x(w0 w16)))
}

::std::unicode::String::split_once::1 {
  x(w12 x(w11 x(w10 w13)))
  ::std::unicode::String::len = fn(ref(w10 w1) w3)
  ::std::unicode::String::len = fn(ref(w12 w5) w7)
  w3 = @le$(w7 w8)
  w8 = ?(::std::unicode::String::split_once::3 ::std::unicode::String::split_once::2 x(w5 x(w11 x(w1 w13))))
}

::std::unicode::String::split_once::2 {
  x(w27 x(w26 x(w25 w50)))
  ::std::data::List::iter = fn(ref(w27 w2) w5)
  ::std::data::List::iter = fn(ref(w25 w9) w12)
  ::std::unicode::String::split_once::5 = x(w2 x(w26 x(w9 x(w5 x(w12 w50)))))
}

::std::unicode::String::split_once::3 {
  x(_ w2)
  ::std::unicode::String::split_once::23 = w2
}

::std::unicode::String::split_once::5 {
  x(w10 x(w9 x(w8 x(w7 w6))))
  ::std::data::List::Iter::next = fn(ref(w7 w1) w3)
  w3 = enum(::std::unicode::String::split_once::8 enum(::std::unicode::String::split_once::9 x(w10 x(w9 x(w8 x(w1 w6))))))
}

::std::unicode::String::split_once::8 {
  enum(w0 x(w9 x(w8 x(w7 x(w6 x(w5 w15))))))
  w0 = ref(dup1998(w1 w16) w1)
  ::std::data::List::Iter::next = fn(ref(w5 w11) w13)
  w13 = enum(::std::unicode::String::split_once::12 enum(::std::unicode::String::split_once::13 x(w9 x(w8 x(w7 x(w6 x(w11 x(w16 w15))))))))
}

::std::unicode::String::split_once::9 {
  x(_ x(w4 x(w3 x(_ w1))))
  ::std::unicode::String::split_once::14 = x(w4 x(w3 w1))
}

::std::unicode::String::split_once::12 {
  enum(w0 x(w10 x(w9 x(w8 x(w7 x(w6 x(w5 w15)))))))
  w0 = ref(dup2012(w1 w13) w1)
  w5 = @ne(w13 w14)
  w14 = ?(::std::unicode::String::split_once::17 ::std::unicode::String::split_once::16 x(w10 x(w9 x(w8 x(w7 x(w6 w15))))))
}

::std::unicode::String::split_once::13 {
  x(_ x(w5 x(w4 x(_ x(w2 x(_ w7))))))
  ::std::unicode::String::split_once::14 = x(w5 x(w4 x(w2 w7)))
}

::std::unicode::String::split_once::14 {
  x(w3 x(w2 x(w1 w25)))
  tup(w6 ref(w8 _)) = w1
  tup(_ tup(_ w12)) = w2
  w25 = tup(w3 enum(enum(tup(w6 tup(w8 w12)) w26) enum(_ w26)))
}

::std::unicode::String::split_once::16 {
  x(w5 x(w4 x(w3 x(w2 x(w1 w37)))))
  ::std::data::List::Iter::drop = fn(ref(w2 _) _)
  ::std::data::List::Iter::drop = fn(ref(w1 _) _)
  ::std::data::List::pop_front = fn(ref(w3 w32) w35)
  w35 = enum(::std::unicode::String::split_once::21 enum(::std::unicode::String::split_once::22 x(w5 x(w4 x(w32 w37)))))
}

::std::unicode::String::split_once::17 {
  w5
  ::std::unicode::String::split_once::5 = w5
}

::std::unicode::String::split_once::21 {
  enum(w0 x(w5 x(w4 w3)))
  ::std::data::List::concat = fn(w4 fn(tup(1 tup(tup(w0 w12) w12)) w11))
  ::std::unicode::String::split_once::1 = x(w5 x(w11 w3))
}

::std::unicode::String::split_once::22 {
  x(_ w2)
  ::std::unicode::String::split_once::23 = w2
}

::std::unicode::String::split_once::23 {
  x(w14 x(w13 w11))
  ::std::data::List::concat = fn(w14 fn(w13 w10))
  w11 = tup(w10 ::std::logical::Option::None)
}

::std::IO::println {
  fn(ref(w1 w12) fn(w3 _))
  ::std::IO::print = fn(ref(w1 w7) fn(w3 _))
  ::std::IO::print_char = fn(ref(w7 w12) fn(10 _))
}

::std::IO::print {
  fn(ref(w1 w16) fn(w3 _))
  tup(w7 tup(w8 _)) = w3
  ::std::IO::print::1 = x(x(w1 w16) x(w7 w8))
}

::std::IO::print::1 {
  x(w4 x(dup2248(w0 w6) w1))
  w0 = ?(::std::IO::print::3 ::std::IO::print::2 x(w4 x(w6 w1)))
}

::std::IO::print::2 {
  x(x(w17 w21) x(w15 w14))
  w15 = @sub(1 w1)
  tup(w4 w5) = w14
  ::std::IO::print_char = fn(ref(w17 w10) fn(w4 _))
  ::std::IO::print::1 = x(x(w10 w21) x(w1 w5))
}

::std::IO::print::3 { x(x(w3 w3) _) }

::std::IO::full_input {
  fn(ref(w1 w13) w10)
  ::std::IO::full_input::1 = x(x(w1 w13) x(tup(0 tup(w9 w9)) w10))
}

::std::IO::full_input::1 {
  x(x(w9 w16) x(w7 w12))
  ::std::IO::read_byte = fn(ref(w9 w1) fn(0 w3))
  dup2338(w10 w13) = w3
  w10 = @ne(0 w11)
  w11 = ?(::std::IO::full_input::4 ::std::IO::full_input::3 x(x(w1 w16) x(w7 x(w13 w12))))
}

::std::IO::full_input::3 {
  x(w8 x(w6 x(w5 w16)))
  ::std::data::List::concat = fn(w6 fn(tup(1 tup(tup(w5 w9) w9)) w3))
  ::std::IO::full_input::1 = x(w8 x(w3 w16))
}

::std::IO::full_input::4 {
  x(x(w7 w7) x(w5 x(_ w2)))
  w2 = w5
}

