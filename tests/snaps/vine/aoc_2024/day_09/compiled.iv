
::main { ::day_09::main }

::day_09::main {
  fn(ref(w3 w23) _)
  ::std::IO::read_line = fn(ref(w3 w8) w10)
  ::std::logical::Option::unwrap = fn(w10 dup5(w17 w26))
  ::day_09::part1 = fn(w17 w18)
  ::std::numeric::N64::to_string = fn(w18 w19)
  ::std::data::List::concat = fn(tup(8 tup(tup(80 tup(97 tup(114 tup(116 tup(32 tup(49 tup(58 tup(32 w31)))))))) w31)) fn(w19 w20))
  ::std::IO::println = fn(ref(w8 w14) fn(w20 _))
  ::day_09::part2 = fn(w26 w27)
  ::std::numeric::N64::to_string = fn(w27 w28)
  ::std::data::List::concat = fn(tup(8 tup(tup(80 tup(97 tup(114 tup(116 tup(32 tup(50 tup(58 tup(32 w32)))))))) w32)) fn(w28 w29))
  ::std::IO::println = fn(ref(w14 w23) fn(w29 _))
}

::day_09::part1 {
  fn(w2 w29)
  ::day_09::part1::2 = x(w2 x(x(tup(0 tup(w16 w16)) w24) x(x(tup(0 tup(w17 w17)) w22) x(x(0 w20) 0))))
  ::day_09::part1::8 = x(w24 x(w22 x(x(0 w29) x(0 w20))))
}

::day_09::part1::2 {
  x(w14 w13)
  ::std::data::List::pop_front = fn(ref(w14 w2) enum(::day_09::part1::5 enum(::day_09::part1::6 x(w2 w13))))
}

::day_09::part1::5 {
  enum(@sub(48 dup48(w26 dup48(w34 w37))) x(w9 x(x(w8 w48) x(x(w6 w46) x(x(@add(w37 w39) w44) dup45(w25 dup45(w33 @add(1 w41))))))))
  ::std::data::List::pop_front = fn(ref(w9 w15) w18)
  ::std::logical::Option::unwrap_or = fn(w18 fn(48 @sub(48 w20)))
  ::std::data::List::push_back = fn(ref(w8 w23) fn(tup(w25 tup(w26 w20)) _))
  ::std::data::List::push_front = fn(ref(w6 w31) fn(tup(w33 w34) _))
  ::day_09::part1::2 = x(w15 x(x(w23 w48) x(x(w31 w46) x(x(w39 w44) w41))))
}

::day_09::part1::6 { x(_ x(x(w6 w6) x(x(w4 w4) x(x(w2 w2) _)))) }

::day_09::part1::7 {
  x(x(w29 w21) x(x(dup57(@add(w1 dup60(@sub(1 @mul(w12 @sub(w17 @div(2 w19)))) dup60(w12 w23))) dup57(@sub(1 @mul(w16 w17)) w16)) w23) fn(w0 fn(w1 _))))
  ::std::numeric::N64::mul_n32_n32 = fn(w0 fn(w19 w20))
  ::std::numeric::N64::add = fn(w29 fn(w20 w21))
}

::day_09::part1::8 { x(w6 x(w5 x(w4 x(w2 dup68(?(::day_09::part1::10 ::day_09::part1::9 x(w6 x(w5 x(w4 x(w2 w7))))) w7))))) }

::day_09::part1::9 {
  x(w32 x(w31 x(x(w30 w48) x(w28 dup80(w10 @sub(w17 dup81(w21 @sub(w24 w26))))))))
  ::std::data::List::pop_front = fn(ref(w32 w1) w3)
  ::std::logical::Option::unwrap = fn(w3 tup(w5 tup(w6 w7)))
  ::std::numeric::N32::min = fn(w6 fn(w10 dup86(w15 w17)))
  ::day_09::part1::7 = x(x(w30 w37) x(x(w28 w35) fn(w5 fn(w15 _))))
  ::std::numeric::N32::min = fn(w7 fn(w21 dup87(w24 w38)))
  ::day_09::part1::11 = x(x(w31 w44) x(x(w37 w42) x(x(w35 w40) w38)))
  ::day_09::part1::8 = x(w1 x(w44 x(x(w42 w48) x(w40 w26))))
}

::day_09::part1::10 { x(_ x(_ x(x(w3 w3) _))) }

::day_09::part1::11 { x(w7 x(w5 x(w3 dup96(?(::day_09::part1::13 ::day_09::part1::12 x(w7 x(w5 x(w3 w8)))) w8)))) }

::day_09::part1::12 {
  x(x(w32 w48) x(x(w30 w46) x(x(w28 w44) dup107(w12 @sub(w23 w25)))))
  ::std::data::List::get = fn(ref(w32 w1) fn(0 ref(tup(dup109(w4 w20) dup111(w11 @sub(w15 dup110(w6 ?(::day_09::part1::16 ::day_09::part1::15 x(x(w1 w36) _)))))) tup(w4 w6))))
  ::std::numeric::N32::min = fn(w11 fn(w12 dup112(w15 dup112(w21 w23))))
  ::day_09::part1::7 = x(x(w30 w41) x(x(w28 w39) fn(w20 fn(w21 _))))
  ::day_09::part1::11 = x(x(w36 w48) x(x(w41 w46) x(x(w39 w44) w25)))
}

::day_09::part1::13 { x(x(w6 w6) x(x(w4 w4) x(x(w2 w2) _))) }

::day_09::part1::15 { x(x(w2 w2) _) }

::day_09::part1::16 {
  x(x(w6 w1) _)
  ::std::data::List::pop_front = fn(ref(w6 w1) _)
}

::day_09::part2 {
  fn(w2 w23)
  ::day_09::part2::2 = x(w2 x(x(tup(0 tup(w13 w13)) w20) x(x(tup(0 tup(w14 w14)) w18) 0)))
  ::day_09::part2::7 = x(w20 x(w18 x(0 w23)))
}

::day_09::part2::2 {
  x(w13 w12)
  ::std::data::List::pop_front = fn(ref(w13 w2) enum(::day_09::part2::5 enum(::day_09::part2::6 x(w2 w12))))
}

::day_09::part2::5 {
  enum(@sub(48 dup156(w25 w30)) x(w8 x(x(w7 w51) x(x(w5 w49) x(dup151(w26 @add(w30 dup158(w36 @add(w41 w42)))) dup153(w24 @add(1 w45)))))))
  ::std::data::List::pop_front = fn(ref(w8 w14) w17)
  ::std::logical::Option::unwrap_or = fn(w17 fn(48 @sub(48 dup157(w37 w41))))
  ::std::data::List::push_front = fn(ref(w5 w22) fn(tup(w24 tup(w25 w26)) _))
  ::std::data::List::push_back = fn(ref(w7 w34) fn(tup(w36 w37) _))
  ::day_09::part2::2 = x(w14 x(x(w34 w51) x(x(w22 w49) x(w42 w45))))
}

::day_09::part2::6 { x(_ x(x(w5 w5) x(x(w3 w3) _))) }

::day_09::part2::7 {
  x(w8 x(w7 w6))
  ::std::data::List::pop_front = fn(ref(w7 w1) enum(::day_09::part2::10 enum(::day_09::part2::11 x(w8 x(w1 w6)))))
}

::day_09::part2::10 {
  enum(tup(w2 tup(dup175(w47 w24) dup176(w17 w46))) x(w11 x(w10 x(w9 w49))))
  ::std::data::List::iter = fn(ref(w11 w13) w15)
  ::day_09::part2::12 = x(w47 x(w46 x(x(w15 w45) x(w17 dup179(@add(w24 dup181(@sub(1 @mul(w31 @sub(w36 @div(2 w38)))) w31)) dup179(@sub(1 @mul(w35 w36)) w35))))))
  ::std::data::List::Iter::drop = fn(ref(w45 _) _)
  ::std::numeric::N64::mul_n32_n32 = fn(w2 fn(w38 w39))
  ::std::numeric::N64::add = fn(w9 fn(w39 w40))
  ::day_09::part2::7 = x(w13 x(w10 x(w40 w49)))
}

::day_09::part2::11 { x(_ x(_ x(w1 w1))) }

::day_09::part2::12 {
  x(w10 x(w9 x(x(w8 w14) w6)))
  ::std::data::List::Iter::next = fn(ref(w8 w1) enum(::day_09::part2::15 enum(::day_09::part2::16 x(w10 x(w9 x(x(w1 w14) w6))))))
}

::day_09::part2::15 { enum(ref(tup(dup202(@lt$(w23 ?(::day_09::part2::19 ::day_09::part2::18 x(w19 x(w33 x(w17 x(w15 x(x(w27 w28) x(w9 w26)))))))) w27) w9) tup(w28 w26)) x(w19 x(dup196(w23 w33) x(w17 w15)))) }

::day_09::part2::16 { x(_ x(_ x(x(w3 w3) x(w1 w1)))) }

::day_09::part2::18 { x(_ x(_ x(x(w7 w7) x(x(w5 w5) x(x(w3 w3) x(w1 w1)))))) }

::day_09::part2::19 { x(dup218(@le(w13 ?(::day_09::part2::22 ::day_09::part2::21 x(w24 x(w8 x(w7 x(w5 x(w3 x(w15 w16)))))))) w24) x(w8 x(w7 x(w5 x(w3 x(dup227(w13 w15) w16)))))) }

::day_09::part2::21 { x(dup228(w2 w5) x(_ x(x(w15 w15) x(x(_ w0) x(x(dup232(w0 @add(w5 w7)) w7) x(@sub(w2 w4) w4)))))) }

::day_09::part2::22 {
  x(w9 x(w8 x(w7 x(w5 x(x(w3 w3) x(w1 w1))))))
  ::day_09::part2::12 = x(w9 x(w8 x(w7 w5)))
}

::std::data::List::get {
  fn(ref(tup(w3 tup(w5 w7)) tup(w3 tup(w6 w7))) fn(w11 ref(w16 w17)))
  ::std::data::List::get::2 = x(x(ref(w5 w6) ref(tup(w16 w18) tup(w17 w18))) w11)
}

::std::data::List::get::2 { x(w3 dup277(?(::std::data::List::get::4 ::std::data::List::get::3 x(w3 w4)) w4)) }

::std::data::List::get::3 {
  x(x(ref(tup(w1 w3) tup(w1 w4)) w17) @sub(1 w11))
  ::std::data::List::get::2 = x(x(ref(w3 w4) w17) w11)
}

::std::data::List::get::4 { x(x(w2 w2) _) }

::std::data::List::pop_front { fn(ref(tup(dup340(?(::std::data::List::pop_front::4 ::std::data::List::pop_front::3 x(x(w17 w18) x(x(w5 w16) w14))) w17) tup(w5 w6)) tup(w18 tup(w16 w6))) w14) }

::std::data::List::pop_front::3 {
  x(x(@sub(1 w1) w1) x(x(tup(w3 w4) w4) w9))
  ::std::logical::Option::Some = fn(w3 w9)
}

::std::data::List::pop_front::4 { x(x(w4 w4) x(x(w2 w2) ::std::logical::Option::None)) }

::std::data::List::concat { fn(tup(@add(w12 w20) tup(w8 w13)) fn(tup(w12 tup(w13 w23)) tup(w20 tup(w8 w23)))) }

::std::data::List::push_back {
  fn(ref(w3 w11) fn(w5 _))
  ::std::data::List::concat = fn(w3 fn(tup(1 tup(tup(w5 w12) w12)) w11))
}

::std::data::List::push_front {
  fn(ref(w3 w11) fn(w5 _))
  ::std::data::List::concat = fn(tup(1 tup(tup(w5 w13) w13)) fn(w3 w11))
}

::std::data::List::iter { fn(ref(tup(dup500(w2 w12) tup(w5 w6)) tup(w2 tup(w14 w6))) tup(w12 ref(w5 w14))) }

::std::data::List::Iter::next { fn(ref(tup(dup507(?(::std::data::List::Iter::next::4 ::std::data::List::Iter::next::3 x(x(w16 w17) x(x(w5 w15) w13))) w16) w5) tup(w17 w15)) w13) }

::std::data::List::Iter::next::3 {
  x(x(@sub(1 w1) w1) x(x(ref(tup(w4 w7) tup(w5 w8)) ref(w7 w8)) w15))
  ::std::logical::Option::Some = fn(ref(w4 w5) w15)
}

::std::data::List::Iter::next::4 { x(x(w8 w8) x(x(ref(w2 w2) _) ::std::logical::Option::None)) }

::std::data::List::Iter::drop { fn(ref(tup(_ ref(w9 w9)) _) _) }

::std::logical::Option::Some { fn(f0 enum(enum(f0 r) enum(_ r))) }

::std::logical::Option::None { enum(_ enum(r r)) }

::std::logical::Option::unwrap_or { fn(enum(::std::logical::Option::unwrap_or::5 enum(::std::logical::Option::unwrap_or::6 x(w3 w9))) fn(w3 w9)) }

::std::logical::Option::unwrap_or::5 { enum(w0 x(_ w0)) }

::std::logical::Option::unwrap_or::6 { x(w1 w1) }

::std::logical::Option::unwrap { fn(enum(::std::logical::Option::unwrap::4 enum(_ w8)) w8) }

::std::logical::Option::unwrap::4 { enum(w0 w0) }

::std::numeric::N32::min { fn(dup2230(@lt(w8 ?(::std::numeric::N32::min::4 ::std::numeric::N32::min::3 x(w12 x(w11 w10)))) w12) fn(dup2231(w8 w11) w10)) }

::std::numeric::N32::min::3 { x(w3 x(_ w3)) }

::std::numeric::N32::min::4 { x(_ x(w2 w2)) }

::std::numeric::N64::add { fn(tup(dup(@add(bl0 l) @n32_add_high(bl1 c)) @add(bh @add(c h))) fn(tup(dup(bl0 bl1) bh) tup(l h))) }

::std::numeric::N64::sub { fn(tup(dup(@sub(bl0 l) @lt(bl1 c)) @sub(bh @sub(c h))) fn(tup(dup(bl0 bl1) bh) tup(l h))) }

::std::numeric::N64::mul_n32_n32 { fn(dup(@mul(b0 l) @n32_mul_high(b1 h)) fn(dup(b0 b1) tup(l h))) }

::std::numeric::N64::div_rem_n32 {
  fn(tup(w2 dup2391(@div(w9 w10) @rem(w12 dup2392(@lt$(w31 ?(::std::numeric::N64::div_rem_n32::4 ::std::numeric::N64::div_rem_n32::3 x(x(w37 w38) x(w36 x(x(w10 w35) _))))) w37)))) fn(dup2394(w9 dup2394(w12 dup2394(w31 dup2394(w36 dup2394(w41 dup2394(w18 w22)))))) tup(tup(w21 w35) w24)))
  ::std::numeric::N64::div_rem_n32::5 = x(x(w2 dup2390(@div(w18 w19) @rem(w22 w24))) x(w38 x(w41 x(0 @add(w19 w21)))))
}

::std::numeric::N64::div_rem_n32::3 { x(x(dup2405(@div(w1 w2) @rem(w4 w6)) w6) x(dup2406(w1 w4) x(x(_ w2) _))) }

::std::numeric::N64::div_rem_n32::4 { x(x(w5 w5) x(_ x(x(w2 w2) _))) }

::std::numeric::N64::div_rem_n32::5 { x(w6 x(dup2413(?(::std::numeric::N64::div_rem_n32::7 ::std::numeric::N64::div_rem_n32::6 x(w6 x(w10 w3))) w10) w3)) }

::std::numeric::N64::div_rem_n32::6 {
  x(x(w27 w33) x(dup2420(w2 w9) x(dup2422(w0 dup2422(w12 w30)) x(@add(w5 w7) w29))))
  4294967295 = @div(w0 @mul(w2 dup2426(w5 w11)))
  ::std::numeric::N64::mul_n32_n32 = fn(w11 fn(w12 w13))
  ::std::numeric::N64::sub = fn(tup(w27 w9) fn(w13 tup(w15 w16)))
  ::std::numeric::N64::div_rem_n32::5 = x(x(w15 w33) x(w16 x(w30 x(w7 w29))))
}

::std::numeric::N64::div_rem_n32::7 { x(x(w5 w5) x(_ x(_ x(w1 w1)))) }

::std::numeric::N64::eq { fn(tup(@eq(w5 ?(::std::numeric::N64::eq::4 ::std::numeric::N64::eq::3 x(w3 x(w6 w14)))) w3) fn(tup(w5 w6) w14)) }

::std::numeric::N64::eq::3 { x(@eq(w4 ?(0 1 w6)) x(w4 w6)) }

::std::numeric::N64::eq::4 { x(_ x(_ 0)) }

::std::numeric::N64::to_string {
  fn(dup2669(w6 w9) w8)
  ::std::numeric::N64::eq = fn(w6 fn(0 ?(::std::numeric::N64::to_string::4 ::std::numeric::N64::to_string::3 x(w9 w8))))
}

::std::numeric::N64::to_string::3 { x(_ tup(1 tup(tup(48 w3) w3))) }

::std::numeric::N64::to_string::4 {
  x(w4 w7)
  ::std::numeric::N64::to_string::5 = x(w4 x(tup(0 tup(w5 w5)) w7))
}

::std::numeric::N64::to_string::5 {
  x(dup2679(w0 w7) w3)
  ::std::numeric::N64::eq = fn(w0 fn(0 ?(::std::numeric::N64::to_string::7 ::std::numeric::N64::to_string::6 x(w7 w3))))
}

::std::numeric::N64::to_string::6 { x(_ x(w1 w1)) }

::std::numeric::N64::to_string::7 {
  x(w17 x(w16 w20))
  ::std::numeric::N64::div_rem_n32 = fn(w17 fn(10 tup(w2 w3)))
  48 = @add(w3 w6)
  ::std::data::List::concat = fn(tup(1 tup(tup(w6 w18) w18)) fn(w16 w11))
  ::std::numeric::N64::to_string::5 = x(w2 x(w11 w20))
}

::std::IO::println {
  fn(ref(w3 w14) fn(w5 _))
  ::std::IO::print = fn(ref(w3 w9) fn(w5 _))
  ::std::IO::print_char = fn(ref(w9 w14) fn(10 _))
}

::std::IO::print {
  fn(ref(w3 w17) fn(tup(w9 tup(w10 _)) _))
  ::std::IO::print::2 = x(x(w3 w17) x(w9 w10))
}

::std::IO::print::2 { x(w4 x(dup3121(?(::std::IO::print::4 ::std::IO::print::3 x(w4 x(w6 w1))) w6) w1)) }

::std::IO::print::3 {
  x(x(w17 w21) x(@sub(1 w1) tup(w4 w5)))
  ::std::IO::print_char = fn(ref(w17 w10) fn(w4 _))
  ::std::IO::print::2 = x(x(w10 w21) x(w1 w5))
}

::std::IO::print::4 { x(x(w3 w3) _) }

::std::IO::print_char { fn(ref(@io_print_char(char io) io) fn(char _)) }

::std::IO::read_line {
  fn(ref(w3 w18) w15)
  ::std::IO::read_byte = fn(ref(w3 w8) fn(0 dup3166(@ne(0 ?(::std::IO::read_line::4 ::std::IO::read_line::3 x(x(w8 w18) x(w16 w15)))) w16)))
}

::std::IO::read_line::3 {
  x(w5 x(dup3173(@eq(10 ?(::std::IO::read_line::7 ::std::IO::read_line::6 x(w5 x(w9 w8)))) w9) w1))
  ::std::logical::Option::Some = fn(w8 w1)
}

::std::IO::read_line::4 { x(x(w3 w3) x(_ ::std::logical::Option::None)) }

::std::IO::read_line::6 { x(x(w4 w4) x(_ tup(0 tup(w5 w5)))) }

::std::IO::read_line::7 {
  x(w10 x(w8 w14))
  ::std::IO::read_line::8 = x(w10 x(x(tup(1 tup(tup(w8 w11) w11)) w14) _))
}

::std::IO::read_line::8 {
  x(x(w10 w18) w8)
  ::std::IO::read_byte = fn(ref(w10 w1) fn(10 dup3190(@ne(10 ?(::std::IO::read_line::11 ::std::IO::read_line::10 x(x(w1 w18) x(w16 w8)))) w16)))
}

::std::IO::read_line::10 {
  x(w9 x(w7 x(x(w6 w19) w17)))
  ::std::data::List::concat = fn(w6 fn(tup(1 tup(tup(w7 w10) w10)) w3))
  ::std::IO::read_line::8 = x(w9 x(x(w3 w19) w17))
}

::std::IO::read_line::11 { x(x(w5 w5) x(_ x(x(w2 w2) _))) }

::std::IO::read_byte { fn(ref(dup(io0 @io_read_byte(default dup(byte @seq$(io0 io1)))) io1) fn(default byte)) }

