
::main { ::array_to_list::main }

::array_to_list::main {
  fn(n1 _)
  ::std::array::Array::new = fn(1000000 fn(0 n0))
  ::std::array::Array::to_list = fn(n0 n3)
  ::std::io::IO::println = fn(n1 fn(n5 _))
  ::std::list::List::len = fn(ref(n3 _) n4)
  ::std::n32::N32::to_string = fn(n4 n5)
}

::std::array::Array { fn(n0 fn(n1 tup(n0 n1))) }

::std::array::Array::new {
  fn(dup10(n3 n4) fn(n0 n2))
  ::std::array::Array = fn(n3 fn(n1 n2))
  ::std::array::Node::new = fn(n4 fn(n0 n1))
}

::std::array::Array::to_list {
  fn(n1 n2)
  ::std::array::Array::to_list::1 = x(n1 x(tup(0 tup(n0 n0)) n2))
}

::std::array::Array::to_list::1 {
  x(n0 n2)
  ::std::array::Array::pop_front = fn(ref(n0 n1) enum(::std::array::Array::to_list::2 enum(::std::array::Array::to_list::3 x(n1 n2))))
}

::std::array::Array::to_list::2 {
  enum(n0 x(n2 x(n1 n4)))
  ::std::list::List::push_back = fn(ref(n1 n3) fn(n0 _))
  ::std::array::Array::to_list::1 = x(n2 x(n3 n4))
}

::std::array::Array::to_list::3 { x(_ x(n0 n0)) }

::std::array::Array::pop_front { fn(ref(tup(dup77(?(::std::array::Array::pop_front::11 ::std::array::Array::pop_front::1 x(n2 x(n3 x(ref(n0 n1) n4)))) n2) n0) tup(n3 n1)) n4) }

::std::array::Array::pop_front::1 { x(dup77(@eq(1 ?(::std::array::Array::pop_front::3 ::std::array::Array::pop_front::2 x(n0 n1))) n0) n1) }

::std::array::Array::pop_front::2 {
  x(_ x(0 x(ref(n0 _) n2)))
  ::std::array::Node::to_leaf = fn(n0 n1)
  ::std::option::Option::Some = fn(n1 n3)
  ::std::array::Array::pop_front::12 = x(n2 n3)
}

::std::array::Array::pop_front::3 {
  x(dup77(n2 @sub(1 n0)) x(n0 x(n1 n3)))
  ::std::array::Array::pop_front::4 = x(n1 x(n2 n3))
}

::std::array::Array::pop_front::4 {
  x(ref(n0 n6) x(@add(1 @div(2 dup79(@eq(1 ?(::std::array::Array::pop_front::7 ::std::array::Array::pop_front::5 x(ref(n3 n4) x(n10 x(n5 x(n6 x(n7 x(n8 n9)))))))) n10))) n9))
  ref(n0 n5) = ref(tup(n2 n1) tup(n8 n4))
  tup(n1 n2) = tup(n7 n3)
}

::std::array::Array::pop_front::5 {
  x(ref(n0 _) x(_ x(_ x(n2 x(n2 x(_ n3))))))
  ::std::array::Node::to_leaf = fn(n0 n1)
  ::std::option::Option::Some = fn(n1 n3)
}

::std::array::Array::pop_front::7 {
  x(n2 x(n3 x(n0 x(n0 x(n1 x(n1 n4))))))
  ::std::array::Array::pop_front::4 = x(n2 x(n3 n4))
}

::std::array::Array::pop_front::11 {
  x(n0 x(n0 x(_ n1)))
  ::std::array::Array::pop_front::12 = x(n1 ::std::option::Option::None)
}

::std::array::Array::pop_front::12 { x(n0 n0) }

::std::array::Node { fn(n0 fn(n1 tup(n0 n1))) }

::std::array::Node::to_leaf { fn(x x) }

::std::array::Node::leaf { fn(x x) }

::std::array::Node::new { fn(dup97(@eq(1 ?(::std::array::Node::new::2 ::std::array::Node::new::1 x(n2 x(n0 n1)))) n2) fn(n0 n1)) }

::std::array::Node::new::1 {
  x(_ x(n0 n1))
  ::std::array::Node::leaf = fn(n0 n1)
}

::std::array::Node::new::2 {
  x(dup97(@add(1 @div(2 n0)) @div(2 n2)) x(dup98(n5 n6) n4))
  ::std::array::Node::new = fn(n0 fn(n5 n1))
  ::std::array::Node = fn(n1 fn(n3 n4))
  ::std::array::Node::new = fn(n2 fn(n6 n3))
}

::std::io::IO::println {
  fn(ref(n0 n3) fn(n1 _))
  ::std::io::IO::print = fn(ref(n0 n2) fn(n1 _))
  ::std::io::IO::print_char = fn(ref(n2 n3) fn(10 _))
}

::std::io::IO::print {
  fn(ref(n0 n1) fn(tup(n2 tup(n3 _)) _))
  ::std::io::IO::print::1 = x(n0 x(n1 x(n2 n3)))
}

::std::io::IO::print::1 { x(n0 x(n1 x(dup135(?(::std::io::IO::print::3 ::std::io::IO::print::2 x(n0 x(n1 x(n3 n2)))) n3) n2))) }

::std::io::IO::print::2 {
  x(n1 x(n3 x(@sub(1 n4) tup(n0 n5))))
  ::std::io::IO::print_char = fn(ref(n1 n2) fn(n0 _))
  ::std::io::IO::print::1 = x(n2 x(n3 x(n4 n5)))
}

::std::io::IO::print::3 { x(n0 x(n0 _)) }

::std::io::IO::print_char { fn(ref(@io_print_char(char io) io) fn(char _)) }

::std::list::List { fn(n0 fn(n1 fn(n2 tup(n0 tup(n1 n2))))) }

::std::list::List::len { fn(ref(tup(dup171(n2 n3) n0) tup(n3 n0)) n2) }

::std::list::List::concat {
  fn(tup(@add(n1 n2) tup(n3 n0)) fn(tup(n1 tup(n0 n4)) n5))
  ::std::list::List = fn(n2 fn(n3 fn(n4 n5)))
}

::std::list::List::push_back {
  fn(ref(n2 n3) fn(n0 _))
  ::std::list::List::concat = fn(n2 fn(tup(1 tup(tup(n0 n1) n1)) n3))
}

::std::n32::N32::to_string { fn(dup708(?(::std::n32::N32::to_string::5 ::std::n32::N32::to_string::1 x(n1 n0)) n1) n0) }

::std::n32::N32::to_string::1 {
  x(n1 n2)
  ::std::n32::N32::to_string::2 = x(n1 x(tup(0 tup(n0 n0)) n2))
}

::std::n32::N32::to_string::2 { x(dup708(?(::std::n32::N32::to_string::4 ::std::n32::N32::to_string::3 x(n2 n0)) n2) n0) }

::std::n32::N32::to_string::3 {
  x(dup708(@rem(10 n0) @div(10 n4)) x(n3 n6))
  48 = @add(n0 n1)
  ::std::list::List::concat = fn(tup(1 tup(tup(n1 n2) n2)) fn(n3 n5))
  ::std::n32::N32::to_string::2 = x(n4 x(n5 n6))
}

::std::n32::N32::to_string::4 { x(_ x(n0 n0)) }

::std::n32::N32::to_string::5 { x(_ tup(1 tup(tup(48 n0) n0))) }

::std::option::Option::Some { fn(n0 enum(enum(n0 n1) enum(_ n1))) }

::std::option::Option::None { enum(_ enum(n0 n0)) }

