
::main { ::array_to_list::main }

::array_to_list::main {
  fn(w3 _)
  ::std::array::Array::new = fn(1000000 fn(0 w7))
  ::std::array::Array::to_list = fn(w7 w10)
  ::std::list::List::len = fn(ref(w10 _) w18)
  ::std::n32::N32::to_string = fn(w18 w19)
  ::std::io::IO::println = fn(w3 fn(w19 _))
}

::std::array::Array::new {
  fn(dup13(w6 w7) fn(w3 tup(w6 w9)))
  ::std::array::Node::new = fn(w7 fn(w3 w9))
}

::std::array::Array::to_list {
  fn(w2 tup(w9 tup(w14 w12)))
  ::std::array::Array::len = fn(ref(w2 w7) w9)
  ::std::array::Array::fold_back = fn(w7 fn(w12 fn(fn(w17 fn(w18 tup(w18 w17))) w14)))
}

::std::array::Array::fold_back { fn(tup(dup96(?(::std::array::Array::fold_back::4 ::std::array::Array::fold_back::3 x(w15 x(w3 x(w5 x(w6 w11))))) w15) w3) fn(w5 fn(w6 w11))) }

::std::array::Array::fold_back::3 {
  x(dup104(w1 w2) x(w30 x(w29 x(w28 w14))))
  ::std::array::Node::zip_with = fn(w2 fn(w22 fn(w30 fn(w28 w7))))
  ::std::array::Array::pop_front = fn(ref(tup(w1 w7) w11) w13)
  ::std::option::Option::unwrap = fn(w13 w14)
  ::std::array::Array::push_back = fn(ref(w11 tup(_ w22)) fn(w29 _))
}

::std::array::Array::fold_back::4 { x(_ x(_ x(w3 x(_ w3)))) }

::std::array::Array::len { fn(ref(tup(dup117(w12 w9) w10) tup(w9 w10)) w12) }

::std::array::Array::push_back { fn(ref(tup(dup144(?(::std::array::Array::push_back::4 ::std::array::Array::push_back::3 x(w20 x(ref(w5 w6) x(w10 _)))) dup144(w20 @add(1 w15))) w5) tup(w15 w6)) fn(w10 _)) }

::std::array::Array::push_back::3 {
  x(w14 x(w13 x(w12 _)))
  ::std::array::Array::push_back::5 = x(x(w13 ref(w4 tup(w4 w8))) w14)
  ::std::array::Node::leaf = fn(w12 w8)
}

::std::array::Array::push_back::4 {
  x(_ x(ref(_ w5) x(w8 _)))
  ::std::array::Node::leaf = fn(w8 w5)
}

::std::array::Array::push_back::5 { x(w4 dup165(@lt$(1 ?(::std::array::Array::push_back::7 ::std::array::Array::push_back::6 x(w4 w5))) w5)) }

::std::array::Array::push_back::6 {
  x(x(w10 w13) dup169(w1 @rem(2 w3)))
  ::std::array::Node::half = fn(w10 fn(w1 fn(w3 tup(w5 w6))))
  ::std::array::Array::push_back::5 = x(x(w5 w13) w6)
}

::std::array::Array::push_back::7 { x(x(w2 w2) _) }

::std::array::Array::pop_front { fn(ref(tup(dup257(?(::std::array::Array::pop_front::4 ::std::array::Array::pop_front::3 x(x(w16 w17) x(ref(w5 w6) w14))) w16) w5) tup(w17 w6)) w14) }

::std::array::Array::pop_front::3 { x(x(dup263(@eq(1 ?(::std::array::Array::pop_front::6 ::std::array::Array::pop_front::5 x(x(w8 w9) w3))) w8) w9) w3) }

::std::array::Array::pop_front::4 {
  x(x(w3 w3) x(_ w5))
  ::std::array::Array::pop_front::11 = x(w5 ::std::option::Option::None)
}

::std::array::Array::pop_front::5 {
  x(x(_ 0) x(ref(w2 _) w11))
  ::std::array::Node::to_leaf = fn(w2 w4)
  ::std::option::Option::Some = fn(w4 w5)
  ::std::array::Array::pop_front::11 = x(w11 w5)
}

::std::array::Array::pop_front::6 {
  x(x(dup274(w0 @sub(1 w3)) w3) x(w6 w9))
  ::std::array::Array::pop_front::7 = x(w6 x(w0 w9))
}

::std::array::Array::pop_front::7 {
  x(ref(w2 w38) x(@add(1 @div(2 dup281(@eq(1 ?(::std::array::Array::pop_front::10 ::std::array::Array::pop_front::9 x(ref(w18 w21) x(w39 x(x(w5 w38) x(x(w17 w36) w34)))))) w39))) w34))
  ref(w2 w5) = ref(tup(w8 w10) tup(w36 w21))
  tup(w10 w8) = tup(w17 w18)
}

::std::array::Array::pop_front::9 {
  x(ref(w1 _) x(_ x(x(_ w12) x(x(w12 _) w9))))
  ::std::array::Node::to_leaf = fn(w1 w3)
  ::std::option::Option::Some = fn(w3 w9)
}

::std::array::Array::pop_front::10 {
  x(w6 x(w5 x(x(w4 w4) x(x(w2 w2) w36))))
  ::std::array::Array::pop_front::7 = x(w6 x(w5 w36))
}

::std::array::Array::pop_front::11 { x(w11 w11) }

::std::array::Node::to_leaf { fn(x x) }

::std::array::Node::leaf { fn(x x) }

::std::array::Node::new { fn(dup316(@eq(1 ?(::std::array::Node::new::4 ::std::array::Node::new::3 x(w11 x(w3 w9)))) w11) fn(w3 w9)) }

::std::array::Node::new::3 {
  x(_ x(w3 w1))
  ::std::array::Node::leaf = fn(w3 w1)
}

::std::array::Node::new::4 {
  x(dup324(@add(1 @div(2 w2)) @div(2 w6)) x(dup325(w3 w7) tup(w4 w8)))
  ::std::array::Node::new = fn(w2 fn(w3 w4))
  ::std::array::Node::new = fn(w6 fn(w7 w8))
}

::std::array::Node::half { fn(ref(tup(w3 w5) tup(w20 w18)) fn(w9 fn(?(::std::array::Node::half::4 ::std::array::Node::half::3 x(x(w3 w20) x(x(w5 w18) x(w9 w15)))) w15))) }

::std::array::Node::half::3 { x(x(w11 w11) x(x(w9 w1) x(@div(2 w4) tup(ref(w9 w1) w4)))) }

::std::array::Node::half::4 { x(x(w12 w1) x(x(w10 w10) x(@add(1 @div(2 w5)) tup(ref(w12 w1) w5)))) }

::std::array::Node::zip_with { fn(dup389(@eq(1 ?(::std::array::Node::zip_with::4 ::std::array::Node::zip_with::3 x(w15 x(w3 x(w4 x(w5 w11)))))) w15) fn(w3 fn(w4 fn(w5 w11)))) }

::std::array::Node::zip_with::3 {
  x(_ x(w10 x(w9 x(fn(w2 fn(w4 w5)) w6))))
  ::std::array::Node::to_leaf = fn(w10 w2)
  ::std::array::Node::to_leaf = fn(w9 w4)
  ::std::array::Node::leaf = fn(w5 w6)
}

::std::array::Node::zip_with::4 {
  x(dup401(@add(1 @div(2 w10)) @div(2 w16)) x(tup(w1 w2) x(tup(w5 w6) x(dup404(w13 w19) tup(w14 w20)))))
  ::std::array::Node::zip_with = fn(w10 fn(w1 fn(w5 fn(w13 w14))))
  ::std::array::Node::zip_with = fn(w16 fn(w2 fn(w6 fn(w19 w20))))
}

::std::io::IO::println {
  fn(ref(w3 w14) fn(w5 _))
  ::std::io::IO::print = fn(ref(w3 w9) fn(w5 _))
  ::std::io::IO::print_char = fn(ref(w9 w14) fn(10 _))
}

::std::io::IO::print {
  fn(ref(w3 w15) fn(tup(w9 tup(w10 _)) _))
  ::std::io::IO::print::2 = x(x(w3 w15) x(w9 w10))
}

::std::io::IO::print::2 { x(w4 x(dup468(?(::std::io::IO::print::4 ::std::io::IO::print::3 x(w4 x(w6 w1))) w6) w1)) }

::std::io::IO::print::3 {
  x(x(w17 w21) x(@sub(1 w1) tup(w4 w5)))
  ::std::io::IO::print_char = fn(ref(w17 w10) fn(w4 _))
  ::std::io::IO::print::2 = x(x(w10 w21) x(w1 w5))
}

::std::io::IO::print::4 { x(x(w3 w3) _) }

::std::io::IO::print_char { fn(ref(@io_print_char(char io) io) fn(char _)) }

::std::list::List::len { fn(ref(tup(dup574(w13 w9) w10) tup(w9 w10)) w13) }

::std::list::List::concat { fn(tup(@add(w12 w20) tup(w8 w13)) fn(tup(w12 tup(w13 w23)) tup(w20 tup(w8 w23)))) }

::std::n32::N32::to_string { fn(dup2148(?(::std::n32::N32::to_string::4 ::std::n32::N32::to_string::3 x(w8 w7)) w8) w7) }

::std::n32::N32::to_string::3 {
  x(w4 w7)
  ::std::n32::N32::to_string::5 = x(w4 x(tup(0 tup(w5 w5)) w7))
}

::std::n32::N32::to_string::4 { x(_ tup(1 tup(tup(48 w3) w3))) }

::std::n32::N32::to_string::5 { x(dup2158(?(::std::n32::N32::to_string::7 ::std::n32::N32::to_string::6 x(w6 w2)) w6) w2) }

::std::n32::N32::to_string::6 {
  x(dup2161(@rem(10 w1) @div(10 w8)) x(w11 w15))
  48 = @add(w1 w2)
  ::std::list::List::concat = fn(tup(1 tup(tup(w2 w13) w13)) fn(w11 w5))
  ::std::n32::N32::to_string::5 = x(w8 x(w5 w15))
}

::std::n32::N32::to_string::7 { x(_ x(w1 w1)) }

::std::option::Option::Some { fn(f0 enum(enum(f0 r) enum(_ r))) }

::std::option::Option::None { enum(_ enum(r r)) }

::std::option::Option::unwrap { fn(enum(::std::option::Option::unwrap::4 enum(_ w8)) w8) }

::std::option::Option::unwrap::4 { enum(w0 w0) }

