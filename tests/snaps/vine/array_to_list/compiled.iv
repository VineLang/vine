
::std::data::Array::Node::to_leaf { fn(x x) }

::std::data::Array::Node::leaf { fn(x x) }

::std::logical::Option::None { enum(_ enum(r r)) }

::std::IO::print_char { fn(ref(@io_print_char(char io) io) fn(char _)) }

::main { ::array_to_list::main }

::array_to_list::main {
  fn(w1 _)
  ::std::data::Array::new = fn(1000000 fn(0 w5))
  ::std::data::Array::to_list = fn(w5 w8)
  ::std::data::List::len = fn(ref(w8 _) w16)
  ::std::numeric::N32::to_string::to_string = fn(w16 w17)
  ::std::IO::println = fn(w1 fn(w17 _))
}

::std::numeric::N32::to_string::to_string {
  fn(dup7(w5 w7) w6)
  w5 = ?(::std::numeric::N32::to_string::to_string::3 ::std::numeric::N32::to_string::to_string::2 x(w7 w6))
}

::std::numeric::N32::to_string::to_string::2 {
  x(w6 w4)
  ::std::numeric::N32::to_string::to_string::4 = x(w6 x(tup(0 tup(w7 w7)) w9))
  w4 = w9
}

::std::numeric::N32::to_string::to_string::3 {
  x(_ w0)
  w0 = tup(w3 tup(tup(48 w4) w5))
  1 = w3
  w4 = w5
}

::std::numeric::N32::to_string::to_string::4 {
  x(dup16(w0 w6) w2)
  w0 = ?(::std::numeric::N32::to_string::to_string::6 ::std::numeric::N32::to_string::to_string::5 x(w6 w2))
}

::std::numeric::N32::to_string::to_string::5 {
  x(dup19(w0 w7) x(w11 w15))
  w0 = @rem(10 w1)
  48 = @add(w1 w2)
  ::std::data::List::concat = fn(tup(1 tup(tup(w2 w13) w13)) fn(w11 w5))
  w7 = @div(10 w8)
  ::std::numeric::N32::to_string::to_string::4 = x(w8 x(w5 w15))
}

::std::numeric::N32::to_string::to_string::6 { x(_ x(w1 w1)) }

::std::data::List::len {
  fn(ref(w1 w6) w11)
  w1 = tup(w10 w8)
  w6 = tup(w7 w8)
  w10 = dup25(w11 w7)
}

::std::data::List::concat {
  fn(w0 fn(w1 w22))
  tup(w5 tup(w6 w15)) = w0
  tup(w10 tup(w11 w21)) = w1
  w15 = w11
  w5 = @add(w10 w18)
  w22 = tup(w18 tup(w6 w21))
}

::std::data::Array::new {
  fn(dup338(w4 w5) fn(w1 w8))
  ::std::data::Array::Node::new = fn(w5 fn(w1 w7))
  w8 = tup(w4 w7)
}

::std::data::Array::to_list {
  fn(w0 w14)
  ::std::data::Array::len = fn(ref(w0 w5) w7)
  ::std::data::Array::fold_back = fn(w5 fn(w10 fn(fn(w16 fn(w17 tup(w17 w16))) w12)))
  w14 = tup(w7 tup(w12 w10))
}

::std::data::Array::fold_back {
  fn(tup(dup415(w9 w14) w1) fn(w3 fn(w4 w10)))
  w9 = ?(::std::data::Array::fold_back::3 ::std::data::Array::fold_back::2 x(w14 x(w1 x(w3 x(w4 w10)))))
}

::std::data::Array::fold_back::2 {
  x(dup422(w1 w2) x(w30 x(w29 x(w28 w15))))
  ::std::data::Array::Node::zip_with = fn(w2 fn(w4 fn(w30 fn(w28 w7))))
  ::std::data::Array::pop_front = fn(ref(tup(w1 w7) w11) w13)
  ::std::logical::Option::unwrap = fn(w13 w14)
  w15 = w14
  ::std::data::Array::push_back = fn(ref(w11 w17) fn(w29 _))
  tup(_ w22) = w17
  w4 = w22
}

::std::data::Array::fold_back::3 { x(_ x(_ x(w3 x(_ w3)))) }

::std::data::Array::len {
  fn(ref(w1 w6) w10)
  w1 = tup(w9 w8)
  w6 = tup(w7 w8)
  w9 = dup435(w10 w7)
}

::std::data::Array::push_back {
  fn(ref(tup(dup460(w15 dup460(w19 w12)) w3) tup(w13 w4)) fn(w8 _))
  w15 = ?(::std::data::Array::push_back::3 ::std::data::Array::push_back::2 x(w19 x(ref(w3 w4) x(w8 _))))
  w12 = @add(1 w13)
}

::std::data::Array::push_back::2 {
  x(w14 x(w13 x(w12 _)))
  ::std::data::Array::push_back::4 = x(x(w13 w17) w14)
  ref(w4 w10) = w17
  ::std::data::Array::Node::leaf = fn(w12 w8)
  w10 = tup(w4 w8)
}

::std::data::Array::push_back::3 {
  x(_ x(w9 x(w8 _)))
  ref(_ w6) = w9
  ::std::data::Array::Node::leaf = fn(w8 w5)
  w6 = w5
}

::std::data::Array::push_back::4 {
  x(w4 dup480(w0 w5))
  w0 = @lt$(1 w1)
  w1 = ?(::std::data::Array::push_back::6 ::std::data::Array::push_back::5 x(w4 w5))
}

::std::data::Array::push_back::5 {
  x(x(w10 w13) dup484(w1 w2))
  w2 = @rem(2 w3)
  ::std::data::Array::Node::half = fn(w10 fn(w1 fn(w3 w4)))
  tup(w5 w6) = w4
  ::std::data::Array::push_back::4 = x(x(w5 w13) w6)
}

::std::data::Array::push_back::6 { x(x(w2 w2) _) }

::std::data::Array::pop_front {
  fn(ref(tup(dup570(w12 w15) w3) tup(w16 w4)) w13)
  w12 = ?(::std::data::Array::pop_front::3 ::std::data::Array::pop_front::2 x(x(w15 w16) x(ref(w3 w4) w13)))
}

::std::data::Array::pop_front::2 {
  x(x(dup575(w0 w8) w9) w3)
  w0 = @eq(1 w1)
  w1 = ?(::std::data::Array::pop_front::5 ::std::data::Array::pop_front::4 x(x(w8 w9) w3))
}

::std::data::Array::pop_front::3 {
  x(x(w3 w3) x(_ w5))
  ::std::data::Array::pop_front::10 = x(w5 ::std::logical::Option::None)
}

::std::data::Array::pop_front::4 {
  x(x(_ w0) x(w7 w12))
  w0 = 0
  w7 = ref(w2 _)
  ::std::data::Array::Node::to_leaf = fn(w2 w4)
  ::std::data::Array::pop_front::10 = x(w12 enum(enum(w4 w10) enum(_ w10)))
}

::std::data::Array::pop_front::5 {
  x(x(dup586(w0 w2) w3) x(w6 w9))
  w2 = @sub(1 w3)
  ::std::data::Array::pop_front::6 = x(w6 x(w0 w9))
}

::std::data::Array::pop_front::6 {
  x(w31 x(w30 w34))
  ref(w2 w38) = w31
  ref(tup(w8 w10) tup(w36 w21)) = ref(w2 w5)
  tup(w17 w18) = tup(w10 w8)
  w30 = @add(1 w25)
  w25 = @div(2 w26)
  dup593(w32 w39) = w26
  w32 = @eq(1 w33)
  w33 = ?(::std::data::Array::pop_front::9 ::std::data::Array::pop_front::8 x(ref(w18 w21) x(w39 x(x(w5 w38) x(x(w17 w36) w34)))))
}

::std::data::Array::pop_front::8 {
  x(w16 x(_ x(x(_ w7) x(x(w12 _) w9))))
  w16 = ref(w1 _)
  ::std::data::Array::Node::to_leaf = fn(w1 w3)
  w7 = w12
  w9 = enum(enum(w3 w17) enum(_ w17))
}

::std::data::Array::pop_front::9 {
  x(w6 x(w5 x(x(w4 w4) x(x(w2 w2) w36))))
  ::std::data::Array::pop_front::6 = x(w6 x(w5 w36))
}

::std::data::Array::pop_front::10 { x(w11 w11) }

::std::data::Array::Node::new {
  fn(dup626(w6 w10) fn(w1 w8))
  w6 = @eq(1 w7)
  w7 = ?(::std::data::Array::Node::new::3 ::std::data::Array::Node::new::2 x(w10 x(w1 w8)))
}

::std::data::Array::Node::new::2 {
  x(_ x(w3 w1))
  ::std::data::Array::Node::leaf = fn(w3 w1)
}

::std::data::Array::Node::new::3 {
  x(dup633(w0 w5) x(dup634(w3 w7) w9))
  w0 = @add(1 w1)
  w1 = @div(2 w2)
  ::std::data::Array::Node::new = fn(w2 fn(w3 w4))
  w5 = @div(2 w6)
  ::std::data::Array::Node::new = fn(w6 fn(w7 w8))
  w9 = tup(w4 w8)
}

::std::data::Array::Node::half {
  fn(ref(tup(w1 w3) tup(w19 w17)) fn(w7 fn(w8 w14)))
  w8 = ?(::std::data::Array::Node::half::3 ::std::data::Array::Node::half::2 x(x(w1 w19) x(x(w3 w17) x(w7 w14))))
}

::std::data::Array::Node::half::2 {
  x(x(w11 w11) x(x(w9 w1) x(w7 w5)))
  w7 = @div(2 w4)
  w5 = tup(ref(w9 w1) w4)
}

::std::data::Array::Node::half::3 {
  x(x(w12 w1) x(x(w10 w10) x(w8 w6)))
  w8 = @add(1 w4)
  w4 = @div(2 w5)
  w6 = tup(ref(w12 w1) w5)
}

::std::data::Array::Node::zip_with {
  fn(dup695(w8 w14) fn(w1 fn(w2 fn(w3 w10))))
  w8 = @eq(1 w9)
  w9 = ?(::std::data::Array::Node::zip_with::3 ::std::data::Array::Node::zip_with::2 x(w14 x(w1 x(w2 x(w3 w10)))))
}

::std::data::Array::Node::zip_with::2 {
  x(_ x(w10 x(w9 x(w8 w6))))
  ::std::data::Array::Node::to_leaf = fn(w10 w2)
  ::std::data::Array::Node::to_leaf = fn(w9 w4)
  w8 = fn(w2 fn(w4 w5))
  ::std::data::Array::Node::leaf = fn(w5 w6)
}

::std::data::Array::Node::zip_with::3 {
  x(dup706(w8 w15) x(w25 x(w24 x(dup709(w13 w19) w21))))
  tup(w1 w2) = w25
  tup(w5 w6) = w24
  w8 = @add(1 w9)
  w9 = @div(2 w10)
  ::std::data::Array::Node::zip_with = fn(w10 fn(w1 fn(w5 fn(w13 w14))))
  w15 = @div(2 w16)
  ::std::data::Array::Node::zip_with = fn(w16 fn(w2 fn(w6 fn(w19 w20))))
  w21 = tup(w14 w20)
}

::std::logical::Option::unwrap {
  fn(w0 w7)
  w0 = enum(::std::logical::Option::unwrap::3 enum(_ w7))
}

::std::logical::Option::unwrap::3 { enum(w0 w0) }

::std::IO::println {
  fn(ref(w1 w12) fn(w3 _))
  ::std::IO::print = fn(ref(w1 w7) fn(w3 _))
  ::std::IO::print_char = fn(ref(w7 w12) fn(10 _))
}

::std::IO::print {
  fn(ref(w1 w16) fn(w3 _))
  tup(w7 tup(w8 _)) = w3
  ::std::IO::print::1 = x(x(w1 w16) x(w7 w8))
}

::std::IO::print::1 {
  x(w4 x(dup2181(w0 w6) w1))
  w0 = ?(::std::IO::print::3 ::std::IO::print::2 x(w4 x(w6 w1)))
}

::std::IO::print::2 {
  x(x(w17 w21) x(w15 w14))
  w15 = @sub(1 w1)
  tup(w4 w5) = w14
  ::std::IO::print_char = fn(ref(w17 w10) fn(w4 _))
  ::std::IO::print::1 = x(x(w10 w21) x(w1 w5))
}

::std::IO::print::3 { x(x(w3 w3) _) }

