
::main { ::fib_repl::main }

::fib_repl::main { fn(::fib_repl::main::1 _) }

::fib_repl::main::1 {
  n0
  ::std::io::prompt = fn(ref(n0 n2) fn(tup(2 fn(n1 tup(62 tup(32 n1)))) enum(::fib_repl::main::2 enum(_ n2))))
}

::fib_repl::main::2 {
  enum(n0 n1)
  ::std::u32::parse = fn(n0 enum(::fib_repl::main::3 enum(::fib_repl::main::4 n2)))
  ::std::io::println = fn(ref(n1 ::fib_repl::main::1) fn(n2 _))
}

::fib_repl::main::3 {
  enum(n0 n2)
  ::fib_repl::fib = fn(n0 n1)
  ::std::u32::to_string = fn(n1 n2)
}

::fib_repl::main::4 { tup(14 fn(n0 tup(105 tup(110 tup(118 tup(97 tup(108 tup(105 tup(100 tup(32 tup(110 tup(117 tup(109 tup(98 tup(101 tup(114 n0)))))))))))))))) }

::fib_repl::fib {
  fn(n0 n1)
  ::fib_repl::fib::1 = x(n0 x(0 x(n1 1)))
}

::fib_repl::fib::1 { x(dup13(?(::fib_repl::fib::3 ::fib_repl::fib::2 x(n3 n0)) n3) n0) }

::fib_repl::fib::2 {
  x(@sub(1 n3) x(@add(n2 n0) x(n5 dup15(n1 n2))))
  tup(n1 n0) = tup(n4 n6)
  ::fib_repl::fib::1 = x(n3 x(n4 x(n5 n6)))
}

::fib_repl::fib::3 { x(_ x(n0 x(n0 _))) }

::std::io::println {
  fn(ref(n0 n3) fn(n1 _))
  ::std::io::print = fn(ref(n0 n2) fn(n1 _))
  ::std::io::print_char = fn(ref(n2 n3) fn(10 _))
}

::std::io::print {
  fn(ref(n0 n1) fn(tup(n2 fn(_ n3)) _))
  ::std::io::print::1 = x(n0 x(n1 x(n2 n3)))
}

::std::io::print::1 { x(n0 x(n1 x(dup26(?(::std::io::print::3 ::std::io::print::2 x(n0 x(n1 x(n3 n2)))) n3) n2))) }

::std::io::print::2 {
  x(n1 x(n3 x(@sub(1 n4) tup(n0 n5))))
  ::std::io::print_char = fn(ref(n1 n2) fn(n0 _))
  ::std::io::print::1 = x(n2 x(n3 x(n4 n5)))
}

::std::io::print::3 { x(n0 x(n0 _)) }

::std::io::print_char { fn(ref(@io_print_char(char io) io) fn(char _)) }

::std::io::flush { fn(ref(@io_flush(0 io) io) _) }

::std::io::prompt {
  fn(ref(n0 n4) fn(n1 n5))
  ::std::io::print = fn(ref(n0 n2) fn(n1 _))
  ::std::io::flush = fn(ref(n2 n3) _)
  ::std::io::read_line = fn(ref(n3 n4) n5)
}

::std::io::read_line {
  fn(ref(n0 n2) n3)
  ::std::io::read_byte = fn(ref(n0 n1) fn(0 dup45(?(::std::io::read_line::9 ::std::io::read_line::1 x(n1 x(n2 x(n4 n3)))) n4)))
}

::std::io::read_line::1 {
  x(n1 x(n2 x(dup45(@eq(10 ?(::std::io::read_line::3 ::std::io::read_line::2 x(n1 x(n2 x(n4 n3))))) n4) n0)))
  ::std::option::Option::Some = fn(n3 n0)
}

::std::io::read_line::2 { x(n1 x(n1 x(_ tup(0 fn(n0 n0))))) }

::std::io::read_line::3 {
  x(n1 x(n2 x(n0 n4)))
  ::std::str::single = fn(n0 n3)
  ::std::io::read_line::4 = x(n1 x(n2 x(n3 n4)))
}

::std::io::read_line::4 {
  x(n0 x(n2 n3))
  ::std::io::read_byte = fn(ref(n0 n1) fn(10 dup45(@ne(10 ?(::std::io::read_line::6 ::std::io::read_line::5 x(n1 x(n2 x(n5 n3))))) n5)))
}

::std::io::read_line::5 {
  x(n3 x(n4 x(n1 x(n2 n6))))
  ::std::str::single = fn(n1 n0)
  ::std::str::concat = fn(n2 fn(n0 n5))
  ::std::io::read_line::4 = x(n3 x(n4 x(n5 n6)))
}

::std::io::read_line::6 { x(n0 x(n0 x(_ x(n1 n1)))) }

::std::io::read_line::9 { x(n0 x(n0 x(_ ::std::option::Option::None))) }

::std::io::read_byte { fn(ref(dup(io0 @io_read_byte(default dup(byte @seq$(io0 io1)))) io1) fn(default byte)) }

::std::option::Option::Some { fn(n0 enum(enum(n0 n1) enum(_ n1))) }

::std::option::Option::None { enum(_ enum(n0 n0)) }

::std::str::concat { fn(tup(@add(n0 n1) fn(n3 n4)) fn(tup(n0 fn(n2 n3)) tup(n1 fn(n2 n4)))) }

::std::str::single { fn(n0 tup(1 fn(n1 tup(n0 n1)))) }

::std::u32::to_string { fn(dup160(?(::std::u32::to_string::5 ::std::u32::to_string::1 x(n1 n0)) n1) n0) }

::std::u32::to_string::1 {
  x(n1 n2)
  ::std::u32::to_string::2 = x(n1 x(tup(0 fn(n0 n0)) n2))
}

::std::u32::to_string::2 { x(dup160(?(::std::u32::to_string::4 ::std::u32::to_string::3 x(n2 n0)) n2) n0) }

::std::u32::to_string::3 {
  x(dup160(@rem(10 n1) @div(10 n5)) x(tup(@add(1 n0) fn(n3 n4)) n6))
  48 = @add(n1 n2)
  ::std::u32::to_string::2 = x(n5 x(tup(n0 fn(n3 tup(n2 n4))) n6))
}

::std::u32::to_string::4 { x(_ x(n0 n0)) }

::std::u32::to_string::5 { x(_ tup(1 fn(n0 tup(48 n0)))) }

::std::u32::parse { fn(tup(dup170(@eq(0 ?(::std::u32::parse::2 ::std::u32::parse::1 x(n2 x(n0 n1)))) n2) n0) n1) }

::std::u32::parse::1 {
  x(_ x(_ n0))
  ::std::u32::parse::12 = x(n0 ::std::option::Option::None)
}

::std::u32::parse::2 {
  x(n0 x(fn(_ n1) n2))
  ::std::u32::parse::3 = x(n0 x(n1 x(0 n2)))
}

::std::u32::parse::3 { x(dup170(?(::std::u32::parse::9 ::std::u32::parse::4 x(n3 n0)) n3) n0) }

::std::u32::parse::4 {
  x(n2 x(tup(dup174(dup(n0 @le(57 n1)) n6) n3) x(n4 n5)))
  48 = @le(n0 @u32_and(n1 @ne(1 ?(::std::u32::parse::8 ::std::u32::parse::5 x(n2 x(n3 x(n4 x(n6 n5))))))))
}

::std::u32::parse::5 { x(_ x(_ x(_ x(_ ::std::option::Option::None)))) }

::std::u32::parse::8 {
  x(@sub(1 n1) x(n2 x(@mul(10 @add(n0 n3)) x(@sub(48 n0) n4))))
  ::std::u32::parse::3 = x(n1 x(n2 x(n3 n4)))
}

::std::u32::parse::9 { x(_ x(_ ::std::u32::parse::11)) }

::std::u32::parse::11 {
  x(n0 n1)
  ::std::option::Option::Some = fn(n0 n2)
  ::std::u32::parse::12 = x(n1 n2)
}

::std::u32::parse::12 { x(n0 n0) }

