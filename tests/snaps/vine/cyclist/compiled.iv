
::main { ::cyclist::main }

::cyclist::main {
  fn(n1 _)
  ::cyclist::main::1 = x(tup(1 tup(tup(0 n0) n0)) n2)
  ::cyclist::main::4 = x(n1 n2)
}

::cyclist::main::1 {
  x(n0 n2)
  ::std::list::List::len = fn(ref(n0 n1) @lt(32 ?(::cyclist::main::3 ::cyclist::main::2 x(n1 n2))))
}

::cyclist::main::2 {
  x(dup2(n4 n5) n7)
  ::std::list::List::map = fn(ref(n4 _) fn(fn(n0 n1) n3))
  ::std::list::List::len = fn(ref(n5 n2) @add(n0 n1))
  ::std::str::concat = fn(n2 fn(n3 n6))
  ::cyclist::main::1 = x(n6 n7)
}

::cyclist::main::3 { x(n0 n0) }

::cyclist::main::4 {
  x(n1 n0)
  ::std::list::List::pop_front = fn(ref(n0 n2) enum(::cyclist::main::5 enum(_ x(n1 n2))))
}

::cyclist::main::5 {
  enum(dup4(n10 n11) x(n5 n6))
  ::cyclist::cycle = fn(ref(n6 dup2(n8 n9)) fn(n10 _))
  ::std::io::println = fn(ref(n5 n7) fn(n4 _))
  ::std::u32::to_string = fn(n11 n1)
  ::std::str::concat = fn(n1 fn(tup(2 tup(tup(59 tup(9 n0)) n0)) n2))
  ::cyclist::show = fn(n8 n3)
  ::std::str::concat = fn(n2 fn(n3 n4))
  ::cyclist::main::4 = x(n7 n9)
}

::cyclist::show {
  n0
  ::std::list::List::to_string = fn(::std::u32::to_string n0)
}

::cyclist::cycle {
  fn(ref(n0 n2) fn(n3 n4))
  ::std::list::List::len = fn(ref(n0 n1) dup15(?(::cyclist::cycle::5 ::cyclist::cycle::1 x(n1 x(n2 x(n3 x(n5 n4))))) n5))
}

::cyclist::cycle::1 {
  x(n1 x(n2 x(@rem(n0 n3) x(n0 _))))
  ::cyclist::cycle::2 = x(n1 x(n2 n3))
}

::cyclist::cycle::2 { x(n0 x(n1 dup14(?(::cyclist::cycle::4 ::cyclist::cycle::3 x(n0 x(n1 n2))) n2))) }

::cyclist::cycle::3 {
  x(n3 x(n5 @sub(1 n6)))
  ::std::list::List::pop_front = fn(ref(n3 n1) n0)
  ::std::option::Option::unwrap = fn(ref(n0 _) n2)
  ::std::list::List::push_back = fn(ref(n1 n4) fn(n2 _))
  ::cyclist::cycle::2 = x(n4 x(n5 n6))
}

::cyclist::cycle::4 { x(n0 x(n0 _)) }

::cyclist::cycle::5 { x(n0 x(n0 _)) }

::std::io::println {
  fn(ref(n0 n3) fn(n1 _))
  ::std::io::print = fn(ref(n0 n2) fn(n1 _))
  ::std::io::print_char = fn(ref(n2 n3) fn(10 _))
}

::std::io::print {
  fn(ref(n0 n1) fn(tup(n2 tup(n3 _)) _))
  ::std::io::print::1 = x(n0 x(n1 x(n2 n3)))
}

::std::io::print::1 { x(n0 x(n1 x(dup29(?(::std::io::print::3 ::std::io::print::2 x(n0 x(n1 x(n3 n2)))) n3) n2))) }

::std::io::print::2 {
  x(n1 x(n3 x(@sub(1 n4) tup(n0 n5))))
  ::std::io::print_char = fn(ref(n1 n2) fn(n0 _))
  ::std::io::print::1 = x(n2 x(n3 x(n4 n5)))
}

::std::io::print::3 { x(n0 x(n0 _)) }

::std::io::print_char { fn(ref(@io_print_char(char io) io) fn(char _)) }

::std::list::List::len { fn(ref(tup(dup56(n2 n3) n0) tup(n3 n0)) n2) }

::std::list::List::map {
  fn(ref(tup(dup59(n4 n5) tup(n0 _)) _) fn(n1 tup(n4 tup(n2 n3))))
  ::std::list::List::map::1 = x(n5 x(n0 x(n1 x(n2 n3))))
}

::std::list::List::map::1 { x(dup59(?(::std::list::List::map::3 ::std::list::List::map::2 x(n4 n0)) n4) n0) }

::std::list::List::map::2 {
  x(@sub(1 n2) x(tup(n0 n3) x(dup61(fn(n0 n1) n6) x(tup(n1 n4) n5))))
  ::std::list::List::map::1 = x(n2 x(n3 x(n6 x(n4 n5))))
}

::std::list::List::map::3 { x(_ x(_ x(_ x(n0 n0)))) }

::std::list::List::pop_front { fn(ref(tup(dup71(?(::std::list::List::pop_front::2 ::std::list::List::pop_front::1 x(n1 x(n2 x(n3 x(n4 n5))))) n1) tup(n3 n0)) tup(n2 tup(n4 n0))) n5) }

::std::list::List::pop_front::1 {
  x(@sub(1 n1) x(n1 x(tup(n0 n2) x(n2 n3))))
  ::std::option::Option::Some = fn(n0 n3)
}

::std::list::List::pop_front::2 { x(n0 x(n0 x(n1 x(n1 ::std::option::Option::None)))) }

::std::list::List::push_back {
  fn(ref(n2 n3) fn(n0 _))
  ::std::str::concat = fn(n2 fn(tup(1 tup(tup(n0 n1) n1)) n3))
}

::std::list::List::join {
  fn(ref(n0 _) fn(n2 n4))
  ::std::list::List::into_iter = fn(ref(n0 _) n1)
  ::std::list::List::into_iter::next = fn(ref(n1 n3) enum(::std::list::List::join::1 enum(::std::list::List::join::5 x(n2 x(n3 n4)))))
}

::std::list::List::join::1 {
  enum(n2 x(n0 x(n1 n3)))
  ::std::list::List::join::2 = x(n0 x(n1 x(n2 n3)))
}

::std::list::List::join::2 {
  x(n1 x(n0 n3))
  ::std::list::List::into_iter::next = fn(ref(n0 n2) enum(::std::list::List::join::3 enum(::std::list::List::join::4 x(n1 x(n2 n3)))))
}

::std::list::List::join::3 {
  enum(n0 x(dup87(n6 n7) x(n3 x(n2 n5))))
  ::std::str::concat = fn(n6 fn(n0 n1))
  ::std::str::concat = fn(n2 fn(n1 n4))
  ::std::list::List::join::2 = x(n7 x(n3 x(n4 n5)))
}

::std::list::List::join::4 { x(_ x(_ x(n0 n0))) }

::std::list::List::join::5 { x(_ x(_ tup(0 tup(n0 n0)))) }

::std::list::List::to_string {
  fn(n2 fn(n1 n8))
  ::std::list::List::map = fn(ref(n1 _) fn(n2 n3))
  ::std::list::List::join = fn(ref(n3 _) fn(tup(2 tup(tup(44 tup(32 n4)) n4)) n5))
  ::std::str::concat = fn(tup(1 tup(tup(91 n0) n0)) fn(n5 n7))
  ::std::str::concat = fn(n7 fn(tup(1 tup(tup(93 n6) n6)) n8))
}

::std::list::List::into_iter { fn(ref(tup(n0 tup(n1 _)) _) tup(n0 n1)) }

::std::list::List::into_iter::next { fn(ref(tup(dup118(?(::std::list::List::into_iter::next::2 ::std::list::List::into_iter::next::1 x(n0 x(n1 x(n2 x(n3 n4))))) n0) n2) tup(n1 n3)) n4) }

::std::list::List::into_iter::next::1 {
  x(@sub(1 n1) x(n1 x(tup(n0 n2) x(n2 n3))))
  ::std::option::Option::Some = fn(n0 n3)
}

::std::list::List::into_iter::next::2 { x(n0 x(n0 x(n1 x(n1 ::std::option::Option::None)))) }

::std::option::Option::Some { fn(n0 enum(enum(n0 n1) enum(_ n1))) }

::std::option::Option::None { enum(_ enum(n0 n0)) }

::std::option::Option::unwrap { fn(ref(enum(::std::option::Option::unwrap::1 enum(_ n0)) _) n0) }

::std::option::Option::unwrap::1 { enum(n0 n0) }

::std::str::concat { fn(tup(@add(n1 n2) tup(n3 n0)) fn(tup(n1 tup(n0 n4)) tup(n2 tup(n3 n4)))) }

::std::u32::to_string { fn(dup257(?(::std::u32::to_string::5 ::std::u32::to_string::1 x(n1 n0)) n1) n0) }

::std::u32::to_string::1 {
  x(n1 n2)
  ::std::u32::to_string::2 = x(n1 x(tup(0 tup(n0 n0)) n2))
}

::std::u32::to_string::2 { x(dup257(?(::std::u32::to_string::4 ::std::u32::to_string::3 x(n2 n0)) n2) n0) }

::std::u32::to_string::3 {
  x(dup257(@rem(10 n1) @div(10 n5)) x(tup(@add(1 n0) tup(n3 n4)) n6))
  48 = @add(n1 n2)
  ::std::u32::to_string::2 = x(n5 x(tup(n0 tup(tup(n2 n3) n4)) n6))
}

::std::u32::to_string::4 { x(_ x(n0 n0)) }

::std::u32::to_string::5 { x(_ tup(1 tup(tup(48 n0) n0))) }

