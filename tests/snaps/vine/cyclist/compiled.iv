
::std::logical::Option::None { enum(_ enum(n0 n0)) }

::std::IO::print_char { fn(ref(@io_print_char(n0 n1) n1) fn(n0 _)) }

::main { ::cyclist::main }

::cyclist::main {
  fn(ref(w1 w13) _)
  ::cyclist::main::1 = x(tup(1 tup(tup(0 w8) w8)) w10)
  ::cyclist::main::5 = x(x(w1 w13) w10)
}

::cyclist::main::1 {
  x(w6 w8)
  ::std::data::List::len = fn(ref(w6 w1) @lt(32 ?(::cyclist::main::3 ::cyclist::main::2 x(w1 w8))))
}

::cyclist::main::2 {
  x(dup11(w0 w10) w17)
  ::std::data::List::len = fn(ref(w10 w11) @add(w7 w15))
  ::std::data::List::map = fn(w0 fn(fn(w7 w15) w2))
  ::std::data::List::concat = fn(w11 fn(w2 w4))
  ::cyclist::main::1 = x(w4 w17)
}

::cyclist::main::3 { x(w1 w1) }

::cyclist::main::5 {
  x(w7 w5)
  ::std::data::List::pop_front = fn(ref(w5 w1) enum(::cyclist::main::8 enum(::cyclist::main::9 x(w7 w1))))
}

::cyclist::main::8 {
  enum(dup28(w8 w14) x(x(w4 w28) w2))
  ::cyclist::cycle = fn(ref(w2 dup27(w16 w26)) fn(w8 _))
  ::std::numeric::N32::to_string::to_string = fn(w14 tup(@add(2 w22) tup(w20 tup(59 tup(9 w23)))))
  ::std::data::List::to_string::to_string::1 = fn(w16 tup(@add(w22 w19) tup(w23 w21)))
  ::std::IO::println = fn(ref(w4 w11) fn(tup(w19 tup(w20 w21)) _))
  ::cyclist::main::5 = x(x(w11 w28) w26)
}

::cyclist::main::9 { x(x(w2 w2) _) }

::std::numeric::N32::to_string::to_string { fn(dup31(?(::std::numeric::N32::to_string::to_string::3 ::std::numeric::N32::to_string::to_string::2 x(n0 n1)) n0) n1) }

::std::numeric::N32::to_string::to_string::2 { x(dup40(?(::std::numeric::N32::to_string::to_string::6 ::std::numeric::N32::to_string::to_string::5 x(n0 x(tup(0 tup(n1 n1)) n2))) n0) n2) }

::std::numeric::N32::to_string::to_string::3 { x(_ tup(1 tup(tup(48 n0) n0))) }

::std::numeric::N32::to_string::to_string::4 { x(dup40(?(::std::numeric::N32::to_string::to_string::6 ::std::numeric::N32::to_string::to_string::5 x(n0 n1)) n0) n1) }

::std::numeric::N32::to_string::to_string::5 { x(dup43(@rem(10 @add$(48 n0)) @div(10 dup40(?(::std::numeric::N32::to_string::to_string::6 ::std::numeric::N32::to_string::to_string::5 x(n1 x(tup(n2 tup(tup(n0 n3) n4)) n5))) n1))) x(tup(@add$(1 n2) tup(n3 n4)) n5)) }

::std::numeric::N32::to_string::to_string::6 { x(_ x(n0 n0)) }

::std::data::List::to_string::to_string::1 { fn(tup(dup144(dup353(?(::std::data::List::IntoIter::next::3 ::std::data::List::IntoIter::next::2 x(x(n0 n1) x(x(n2 n3) enum(::std::data::List::join::4 enum(::std::data::List::join::5 x(tup(2 tup(tup(44 tup(32 n4)) n4)) x(tup(n1 n3) tup(@add(2 n5) tup(n6 tup(93 n7)))))))))) n0) dup154(?(::std::data::List::map::3 ::std::data::List::map::2 x(n8 x(n9 x(::std::numeric::N32::to_string::to_string x(n2 _))))) n8)) tup(n9 _)) tup(n5 tup(tup(91 n6) n7))) }

::std::unicode::String::to_string::to_string { fn(n0 n0) }

::cyclist::cycle { fn(ref(tup(dup81(dup59(?(::cyclist::cycle::3 ::cyclist::cycle::2 x(x(tup(n0 n1) n2) x(n3 x(n4 n5)))) n4) n0) n1) n2) fn(n3 n5)) }

::cyclist::cycle::2 { x(n0 x(@rem(n1 dup72(?(::cyclist::cycle::6 ::cyclist::cycle::5 x(n0 n2)) n2)) x(n1 _))) }

::cyclist::cycle::3 { x(x(n0 n0) _) }

::cyclist::cycle::4 { x(n0 dup72(?(::cyclist::cycle::6 ::cyclist::cycle::5 x(n0 n1)) n1)) }

::cyclist::cycle::5 { x(x(tup(dup173(?(::std::data::List::pop_front::3 ::std::data::List::pop_front::2 x(x(n0 @add(1 n1)) x(x(n2 n3) enum(::std::logical::Option::unwrap::3 enum(_ n4))))) n0) tup(n2 tup(n4 n5))) n6) @sub(1 dup72(?(::cyclist::cycle::6 ::cyclist::cycle::5 x(x(tup(n1 tup(n3 n5)) n6) n7)) n7))) }

::cyclist::cycle::6 { x(x(n0 n0) _) }

::std::data::List::len { fn(ref(tup(dup81(n0 n1) n2) tup(n1 n2)) n0) }

::std::data::List::map { fn(tup(dup144(n0 dup154(?(::std::data::List::map::3 ::std::data::List::map::2 x(n1 x(n2 x(n3 x(n4 n5))))) n1)) tup(n2 _)) fn(n3 tup(n0 tup(n4 n5)))) }

::std::data::List::map::1 { x(dup154(?(::std::data::List::map::3 ::std::data::List::map::2 x(n0 n1)) n0) n1) }

::std::data::List::map::2 { x(@sub(1 dup154(?(::std::data::List::map::3 ::std::data::List::map::2 x(n0 x(n1 x(n2 x(n3 n4))))) n0)) x(tup(n5 n1) x(dup163(fn(n5 n6) n2) x(tup(n6 n3) n4)))) }

::std::data::List::map::3 { x(_ x(_ x(_ x(n0 n0)))) }

::std::data::List::pop_front { fn(ref(tup(dup173(?(::std::data::List::pop_front::3 ::std::data::List::pop_front::2 x(x(n0 n1) x(x(n2 n3) n4))) n0) tup(n2 n5)) tup(n1 tup(n3 n5))) n4) }

::std::data::List::pop_front::2 { x(x(@sub(1 n0) n0) x(x(tup(n1 n2) n2) enum(enum(n1 n3) enum(_ n3)))) }

::std::data::List::pop_front::3 { x(x(n0 n0) x(x(n1 n1) ::std::logical::Option::None)) }

::std::data::List::concat { fn(tup(@add(n0 n1) tup(n2 n3)) fn(tup(n0 tup(n3 n4)) tup(n1 tup(n2 n4)))) }

::std::data::List::push_back { fn(ref(tup(@add(1 n0) tup(n1 tup(n2 n3))) tup(n0 tup(n1 n3))) fn(n2 _)) }

::std::data::List::join { fn(tup(dup353(?(::std::data::List::IntoIter::next::3 ::std::data::List::IntoIter::next::2 x(x(n0 n1) x(x(n2 n3) enum(::std::data::List::join::4 enum(::std::data::List::join::5 x(n4 x(tup(n1 n3) n5))))))) n0) tup(n2 _)) fn(n4 n5)) }

::std::data::List::join::4 { enum(n0 x(n1 x(tup(dup353(?(::std::data::List::IntoIter::next::3 ::std::data::List::IntoIter::next::2 x(x(n2 n3) x(x(n4 n5) enum(::std::data::List::join::9 enum(::std::data::List::join::10 x(n1 x(tup(n3 n5) x(n0 n6)))))))) n2) n4) n6))) }

::std::data::List::join::5 { x(_ x(_ tup(0 tup(n0 n0)))) }

::std::data::List::join::6 { x(n0 x(tup(dup353(?(::std::data::List::IntoIter::next::3 ::std::data::List::IntoIter::next::2 x(x(n1 n2) x(x(n3 n4) enum(::std::data::List::join::9 enum(::std::data::List::join::10 x(n0 x(tup(n2 n4) n5))))))) n1) n3) n5)) }

::std::data::List::join::9 { enum(tup(n0 tup(n1 n2)) x(dup250(tup(@add(n0 n3) tup(n4 n1)) n5) x(tup(dup353(?(::std::data::List::IntoIter::next::3 ::std::data::List::IntoIter::next::2 x(x(n6 n7) x(x(n8 n9) enum(::std::data::List::join::9 enum(::std::data::List::join::10 x(n5 x(tup(n7 n9) x(tup(n10 tup(n11 n2)) n12)))))))) n6) n8) x(tup(@add(n3 n10) tup(n11 n4)) n12)))) }

::std::data::List::join::10 { x(_ x(_ x(n0 n0))) }

::std::data::List::into_iter { fn(tup(n0 tup(n1 _)) tup(n0 n1)) }

::std::data::List::IntoIter::next { fn(ref(tup(dup353(?(::std::data::List::IntoIter::next::3 ::std::data::List::IntoIter::next::2 x(x(n0 n1) x(x(n2 n3) n4))) n0) n2) tup(n1 n3)) n4) }

::std::data::List::IntoIter::next::2 { x(x(@sub(1 n0) n0) x(x(tup(n1 n2) n2) enum(enum(n1 n3) enum(_ n3)))) }

::std::data::List::IntoIter::next::3 { x(x(n0 n0) x(x(n1 n1) ::std::logical::Option::None)) }

::std::logical::Option::unwrap { fn(enum(::std::logical::Option::unwrap::3 enum(_ n0)) n0) }

::std::logical::Option::unwrap::3 { enum(n0 n0) }

::std::IO::println { fn(ref(n0 n1) fn(tup(dup2234(?(::std::IO::print::3 ::std::IO::print::2 x(x(n0 @io_print_char(10 n1)) x(n2 n3))) n2) tup(n3 _)) _)) }

::std::IO::print { fn(ref(n0 n1) fn(tup(dup2234(?(::std::IO::print::3 ::std::IO::print::2 x(x(n0 n1) x(n2 n3))) n2) tup(n3 _)) _)) }

::std::IO::print::1 { x(n0 x(dup2234(?(::std::IO::print::3 ::std::IO::print::2 x(n0 x(n1 n2))) n1) n2)) }

::std::IO::print::2 { x(x(@io_print_char(n0 n1) n2) x(@sub(1 dup2234(?(::std::IO::print::3 ::std::IO::print::2 x(x(n1 n2) x(n3 n4))) n3)) tup(n0 n4))) }

::std::IO::print::3 { x(x(n0 n0) _) }

