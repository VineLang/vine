
::std::logical::Option::None { enum(_ enum(r r)) }

::std::numeric::N32::rotate_right { fn(@n32_rotr(x y) fn(x y)) }

::std::numeric::N64::add { fn(tup(dup(@add(bl0 l) @n32_add_high(bl1 c)) @add(bh @add(c h))) fn(tup(dup(bl0 bl1) bh) tup(l h))) }

::std::numeric::N64::mul { fn(tup(dup(@mul(bl0 l) dup(@n32_mul_high(bl1 ll) @mul(bh @add(hl @add(ll h))))) ah) fn(tup(dup(bl0 dup(bl1 @mul(ah hl))) bh) tup(l h))) }

::std::ops::Ord::Lt { enum(r enum(_ enum(_ r))) }

::std::ops::Ord::Eq { enum(_ enum(r enum(_ r))) }

::std::ops::Ord::Gt { enum(_ enum(_ enum(r r))) }

::std::unicode::Char::as_n32 { fn(x x) }

::std::IO::print_char { fn(ref(@io_print_char(char io) io) fn(char _)) }

::main { ::map_test::main }

::map_test::seed { tup(26 tup(tup(100 tup(117 tup(98 tup(105 tup(111 tup(117 tup(115 tup(108 tup(121 tup(32 tup(99 tup(104 tup(97 tup(114 tup(103 tup(101 tup(100 tup(32 tup(117 tup(109 tup(98 tup(114 tup(101 tup(108 tup(108 tup(97 w4)))))))))))))))))))))))))) w4)) }

::map_test::main {
  fn(ref(w1 w18) _)
  ::std::rng::Pcg32::seeded = fn(::map_test::seed w6)
  ::map_test::main::1 = x(x(::std::data::Map::empty w26) x(w6 4600))
  ::map_test::main::4 = x(x(w1 w31) x(x(w26 w29) fn(4600 _)))
  ::std::rng::Pcg32::seeded = fn(::map_test::seed w11)
  ::map_test::main::19 = x(x(w31 w37) x(x(w29 w35) x(w11 4600)))
  ::std::rng::Pcg32::seeded = fn(::map_test::seed w14)
  ::map_test::main::30 = x(x(w37 w42) x(w35 x(w14 4600)))
  ::std::IO::println = fn(ref(w42 w18) fn(tup(4 tup(tup(100 tup(111 tup(110 tup(101 w45)))) w45)) _))
}

::map_test::main::1 { x(w5 x(w3 dup24(@lt$(0 ?(::map_test::main::3 ::map_test::main::2 x(w5 x(w3 w6)))) w6))) }

::map_test::main::2 {
  x(x(w18 w22) x(w16 @sub(1 w1)))
  ::std::rng::Pcg32::gen_n32 = fn(ref(w16 w3) dup32(w10 dup32(@mul(w12 w13) w12)))
  ::std::data::Map::insert::1 = fn(ref(w18 w8) fn(w10 fn(w13 _)))
  ::map_test::main::1 = x(x(w8 w22) x(w3 w1))
}

::map_test::main::3 { x(x(w3 w3) _) }

::map_test::main::4 {
  x(x(w16 w43) x(x(w14 w38) fn(w0 w41)))
  ::std::data::Map::iter = fn(ref(w14 w4) w6)
  ::map_test::main::5 = x(x(w16 w22) x(w6 x(0 x(0 @eq(w28 @n32_and(w32 ?(::map_test::main::15 ::map_test::main::14 x(x(w22 w36) _))))))))
  ::std::data::Map::len = fn(ref(w4 w25) dup34(w28 @eq(w0 w32)))
  ::std::data::Map::balanced = fn(ref(w25 w38) ?(::map_test::main::18 ::map_test::main::17 x(x(w36 w43) w41)))
}

::map_test::main::5 {
  x(w10 x(w8 w7))
  ::std::data::Map::Iter::next::1 = fn(ref(w8 w1) enum(::map_test::main::8 enum(::map_test::main::9 x(w10 x(w1 w7)))))
}

::map_test::main::8 {
  enum(ref(tup(dup68(w10 w24) w9) tup(w10 w9)) x(x(w19 w34) x(w17 x(dup64(@lt$(w24 ?(::map_test::main::12 ::map_test::main::11 x(x(w19 w28) _))) w31) x(@add(1 w21) w30)))))
  ::map_test::main::5 = x(x(w28 w34) x(w17 x(w31 x(w21 w30))))
}

::map_test::main::9 { x(x(w5 w5) x(_ x(_ x(w1 w1)))) }

::map_test::main::11 {
  x(x(w7 w1) _)
  ::std::IO::println = fn(ref(w7 w1) fn(tup(12 tup(tup(111 tup(117 tup(116 tup(32 tup(111 tup(102 tup(32 tup(111 tup(114 tup(100 tup(101 tup(114 w10)))))))))))) w10)) _))
}

::map_test::main::12 { x(x(w2 w2) _) }

::map_test::main::14 { x(x(w2 w2) _) }

::map_test::main::15 {
  x(x(w7 w1) _)
  ::std::IO::println = fn(ref(w7 w1) fn(tup(10 tup(tup(98 tup(97 tup(100 tup(32 tup(108 tup(101 tup(110 tup(103 tup(116 tup(104 w10)))))))))) w10)) _))
}

::map_test::main::17 { x(x(w2 w2) _) }

::map_test::main::18 {
  x(x(w7 w1) _)
  ::std::IO::println = fn(ref(w7 w1) fn(tup(10 tup(tup(105 tup(109 tup(98 tup(97 tup(108 tup(97 tup(110 tup(99 tup(101 tup(100 w10)))))))))) w10)) _))
}

::map_test::main::19 { x(w7 x(w5 x(w3 dup97(@lt$(0 ?(::map_test::main::21 ::map_test::main::20 x(w7 x(w5 x(w3 w8))))) w8)))) }

::map_test::main::20 {
  x(x(w13 w31) x(x(w11 w29) x(w9 @sub(1 w1))))
  ::std::rng::Pcg32::gen_n32 = fn(ref(w9 w3) w5)
  ::std::data::Map::get::1 = fn(ref(w11 w15) fn(ref(w5 w18) enum(::map_test::main::25 enum(::map_test::main::29 x(x(w13 w25) x(w18 _))))))
  ::map_test::main::19 = x(x(w25 w31) x(x(w15 w29) x(w3 w1)))
}

::map_test::main::21 { x(x(w5 w5) x(x(w3 w3) _)) }

::map_test::main::25 { enum(ref(dup117(w1 @ne(w11 ?(::map_test::main::28 ::map_test::main::29 x(w7 x(w14 w13))))) w1) x(w7 x(dup116(@mul(w10 w11) dup116(w10 w14)) w13))) }

::map_test::main::28 { x(x(w3 w3) _) }

::map_test::main::29 {
  x(x(w10 w1) x(w8 _))
  ::std::numeric::N32::to_string::to_string = fn(w8 tup(@add(8 w11) tup(w12 w13)))
  ::std::IO::println = fn(ref(w10 w1) fn(tup(w11 tup(tup(109 tup(105 tup(115 tup(115 tup(105 tup(110 tup(103 tup(32 w12)))))))) w13)) _))
}

::map_test::main::30 { x(w6 x(w4 x(w3 dup137(@lt$(0 ?(::map_test::main::32 ::map_test::main::31 x(w6 x(w4 x(w3 w7))))) w7)))) }

::map_test::main::31 {
  x(x(w13 w38) x(w11 x(w10 @sub(1 dup148(@rem(100 ?(::map_test::main::43 ::map_test::main::42 x(x(w25 w33) x(x(w15 w31) x(w29 _))))) dup148(w29 w34))))))
  ::std::rng::Pcg32::gen_n32 = fn(ref(w10 w3) w5)
  ::std::data::Map::remove::1 = fn(ref(w11 w15) fn(ref(w5 w18) enum(::map_test::main::36 enum(::map_test::main::40 x(x(w13 w25) x(w18 _))))))
  ::map_test::main::30 = x(x(w33 w38) x(w31 x(w3 w34)))
}

::map_test::main::32 { x(x(w4 w4) _) }

::map_test::main::36 { enum(@ne(w9 ?(::map_test::main::39 ::map_test::main::40 x(w5 x(w12 w11)))) x(w5 x(dup157(@mul(w8 w9) dup157(w8 w12)) w11))) }

::map_test::main::39 { x(x(w3 w3) _) }

::map_test::main::40 {
  x(x(w10 w1) x(w8 _))
  ::std::numeric::N32::to_string::to_string = fn(w8 tup(@add(8 w11) tup(w12 w13)))
  ::std::IO::println = fn(ref(w10 w1) fn(tup(w11 tup(tup(109 tup(105 tup(115 tup(115 tup(105 tup(110 tup(103 tup(32 w12)))))))) w13)) _))
}

::map_test::main::42 { x(x(w5 w5) x(x(w3 w3) _)) }

::map_test::main::43 {
  x(w8 x(w6 x(w4 _)))
  ::map_test::main::4 = x(w8 x(w6 fn(w4 _)))
}

::std::data::Map::insert::1 { fn(ref(tup(dup184(?(::std::data::Map::insert::1::3 ::std::data::Map::insert::1::2 x(x(w19 w20) x(x(w3 w18) x(w7 x(w8 w14))))) w19) w3) tup(w20 w18)) fn(w7 fn(w8 w14))) }

::std::data::Map::insert::1::2 {
  x(w25 x(x(w23 w47) x(w21 x(w20 w35))))
  ref(w23 w1) = ref(tup(w4 tup(tup(w6 w8) w12)) tup(w43 tup(tup(w41 w39) w37)))
  ::std::numeric::N32::ord::cmp = fn(ref(w21 w27) fn(ref(w6 w30) enum(::std::data::Map::insert::1::8 enum(::std::data::Map::insert::1::9 enum(::std::data::Map::insert::1::10 x(w25 x(x(w1 w47) x(w27 x(w20 x(x(w4 w43) x(x(w30 w41) x(x(w8 w39) x(x(w12 w37) x(w35 _))))))))))))))
}

::std::data::Map::insert::1::3 { x(x(_ 1) x(x(_ tup(::std::data::Map::empty tup(tup(w8 w7) ::std::data::Map::empty))) x(w8 x(w7 ::std::logical::Option::None)))) }

::std::data::Map::insert::1::8 {
  x(x(_ w26) x(x(w13 w29) x(w11 x(w10 x(x(w9 w17) x(x(w7 w7) x(x(w5 w5) x(x(w3 w3) x(w21 _)))))))))
  ::std::data::Map::insert::1 = fn(ref(w9 w17) fn(w11 fn(w10 w21)))
  ::std::data::Map::size = fn(ref(w13 w24) w26)
  ::std::data::Map::balance_right = fn(ref(w24 w29) _)
}

::std::data::Map::insert::1::9 { x(x(w15 w15) x(x(w13 w13) x(w11 x(w10 x(x(w9 w9) x(x(_ w11) x(x(w5 w10) x(x(w3 w3) x(enum(enum(w5 w23) enum(_ w23)) _))))))))) }

::std::data::Map::insert::1::10 {
  x(x(_ w26) x(x(w13 w29) x(w11 x(w10 x(x(w9 w9) x(x(w7 w7) x(x(w5 w5) x(x(w3 w17) x(w21 _)))))))))
  ::std::data::Map::insert::1 = fn(ref(w3 w17) fn(w11 fn(w10 w21)))
  ::std::data::Map::size = fn(ref(w13 w24) w26)
  ::std::data::Map::balance_left = fn(ref(w24 w29) _)
}

::std::numeric::N32::ord::cmp { fn(ref(dup255(w0 dup255(@lt(w11 ?(::std::numeric::N32::ord::cmp::3 ::std::numeric::N32::ord::cmp::2 x(w15 x(w14 w13)))) w15)) w0) fn(ref(dup256(w3 dup256(w11 w14)) w3) w13)) }

::std::numeric::N32::ord::cmp::2 { x(_ x(_ ::std::ops::Ord::Lt)) }

::std::numeric::N32::ord::cmp::3 { x(@lt$(w4 ?(::std::ops::Ord::Eq ::std::ops::Ord::Gt w6)) x(w4 w6)) }

::std::data::Map::Iter::next::1 {
  fn(ref(tup(w1 w3) tup(w24 w18)) w22)
  ::std::data::Map::Iter::next::1::1 = x(x(w1 w16) x(x(w3 w14) _))
  ::std::data::List::pop_front = fn(ref(w14 w18) enum(::std::data::Map::Iter::next::1::8 enum(::std::data::Map::Iter::next::1::9 x(x(w16 w24) w22))))
}

::std::data::Map::Iter::next::1::1 { x(x(ref(tup(dup282(w2 ?(::std::data::Map::Iter::next::1::4 ::std::data::Map::Iter::next::1::3 x(x(_ w49) x(w39 x(x(w5 w45) w43))))) w5) tup(w2 w45)) w49) x(w39 w43)) }

::std::data::Map::Iter::next::1::3 {
  x(x(_ w48) x(x(w4 w46) x(x(w2 w18) w44)))
  ref(w2 w18) = ref(tup(w21 w23) tup(w41 w33))
  ::std::data::List::push_front = fn(ref(w4 w30) fn(ref(w23 w33) _))
  ::std::data::Map::Iter::next::1::1 = x(x(ref(w21 w41) w48) x(x(w30 w46) w44))
}

::std::data::Map::Iter::next::1::4 { x(x(w6 w6) x(x(w4 w4) x(x(w2 w2) _))) }

::std::data::Map::Iter::next::1::8 { enum(ref(tup(w7 w10) tup(w8 w11)) x(x(_ ref(w10 w11)) enum(enum(ref(w7 w8) w19) enum(_ w19)))) }

::std::data::Map::Iter::next::1::9 { x(x(w2 w2) ::std::logical::Option::None) }

::std::data::Map::get::1 { fn(ref(tup(dup312(w0 ?(::std::data::Map::get::1::3 ::std::data::Map::get::1::2 x(x(w3 w19) x(x(w8 w17) w15)))) w3) tup(w0 w19)) fn(ref(w8 w17) w15)) }

::std::data::Map::get::1::2 {
  x(x(w21 w1) x(x(w19 w38) w30))
  ref(w21 w1) = ref(tup(w4 tup(tup(w6 w8) w12)) tup(w36 tup(tup(w26 w34) w32)))
  ::std::numeric::N32::ord::cmp = fn(ref(w19 w23) fn(ref(w6 w26) enum(::std::data::Map::get::1::8 enum(::std::data::Map::get::1::9 enum(::std::data::Map::get::1::10 x(x(w23 w38) x(x(w4 w36) x(x(w8 w34) x(x(w12 w32) w30)))))))))
}

::std::data::Map::get::1::3 { x(x(w4 w4) x(x(w2 w2) ::std::logical::Option::None)) }

::std::data::Map::get::1::8 {
  x(x(w8 w13) x(x(w6 w10) x(x(w4 w4) x(x(w2 w2) w15))))
  ::std::data::Map::get::1 = fn(ref(w6 w10) fn(ref(w8 w13) w15))
}

::std::data::Map::get::1::9 { x(x(w8 w8) x(x(w6 w6) x(x(w4 w10) x(x(w2 w2) enum(enum(ref(w4 w10) w13) enum(_ w13)))))) }

::std::data::Map::get::1::10 {
  x(x(w8 w13) x(x(w6 w6) x(x(w4 w4) x(x(w2 w10) w15))))
  ::std::data::Map::get::1 = fn(ref(w2 w10) fn(ref(w8 w13) w15))
}

::std::numeric::N32::to_string::to_string { fn(dup359(?(::std::numeric::N32::to_string::to_string::3 ::std::numeric::N32::to_string::to_string::2 x(w7 w6)) w7) w6) }

::std::numeric::N32::to_string::to_string::2 {
  x(w6 w9)
  ::std::numeric::N32::to_string::to_string::4 = x(w6 x(tup(0 tup(w7 w7)) w9))
}

::std::numeric::N32::to_string::to_string::3 { x(_ tup(1 tup(tup(48 w5) w5))) }

::std::numeric::N32::to_string::to_string::4 { x(dup368(?(::std::numeric::N32::to_string::to_string::6 ::std::numeric::N32::to_string::to_string::5 x(w6 w2)) w6) w2) }

::std::numeric::N32::to_string::to_string::5 {
  x(dup371(@rem(10 w1) @div(10 w8)) x(w11 w15))
  48 = @add(w1 w2)
  ::std::data::List::concat = fn(tup(1 tup(tup(w2 w13) w13)) fn(w11 w5))
  ::std::numeric::N32::to_string::to_string::4 = x(w8 x(w5 w15))
}

::std::numeric::N32::to_string::to_string::6 { x(_ x(w1 w1)) }

::std::data::Map::remove::1 { fn(ref(tup(dup378(?(::std::data::Map::remove::1::3 ::std::data::Map::remove::1::2 x(x(w20 w21) x(x(w3 w19) x(x(w8 w17) w15)))) w20) w3) tup(w21 w19)) fn(ref(w8 w17) w15)) }

::std::data::Map::remove::1::2 {
  x(w25 x(x(w23 w44) x(x(w21 w42) w35)))
  ref(w23 w1) = ref(tup(w4 tup(tup(w6 dup398(w7 w38)) w12)) tup(w40 tup(tup(w30 w7) w37)))
  ::std::numeric::N32::ord::cmp = fn(ref(w21 w27) fn(ref(w6 w30) enum(::std::data::Map::remove::1::8 enum(::std::data::Map::remove::1::9 enum(::std::data::Map::remove::1::10 x(w25 x(x(w1 w44) x(x(w27 w42) x(x(w4 w40) x(w38 x(x(w12 w37) x(w35 _))))))))))))
}

::std::data::Map::remove::1::3 { x(x(w6 w6) x(x(w4 w4) x(x(w2 w2) ::std::logical::Option::None))) }

::std::data::Map::remove::1::8 {
  x(x(_ w24) x(x(w10 w27) x(x(w8 w17) x(x(w6 w14) x(_ x(x(w3 w3) x(w19 _)))))))
  ::std::data::Map::remove::1 = fn(ref(w6 w14) fn(ref(w8 w17) w19))
  ::std::data::Map::size = fn(ref(w10 w22) w24)
  ::std::data::Map::balance_left = fn(ref(w22 w27) _)
}

::std::data::Map::remove::1::9 {
  x(x(@sub(1 w17) w17) x(x(_ w22) x(x(w8 w8) x(x(w6 _) x(w4 x(x(w3 _) x(enum(enum(w4 w24) enum(_ w24)) _)))))))
  ::std::data::Map::merge_balanced = fn(w6 fn(w3 w22))
}

::std::data::Map::remove::1::10 {
  x(x(_ w24) x(x(w10 w27) x(x(w8 w17) x(x(w6 w6) x(_ x(x(w3 w14) x(w19 _)))))))
  ::std::data::Map::remove::1 = fn(ref(w3 w14) fn(ref(w8 w17) w19))
  ::std::data::Map::size = fn(ref(w10 w22) w24)
  ::std::data::Map::balance_right = fn(ref(w22 w27) _)
}

::std::data::List::pop_front { fn(ref(tup(dup538(?(::std::data::List::pop_front::3 ::std::data::List::pop_front::2 x(x(w16 w17) x(x(w3 w15) w13))) w16) tup(w3 w4)) tup(w17 tup(w15 w4))) w13) }

::std::data::List::pop_front::2 { x(x(@sub(1 w1) w1) x(x(tup(w3 w4) w4) enum(enum(w3 w15) enum(_ w15)))) }

::std::data::List::pop_front::3 { x(x(w4 w4) x(x(w2 w2) ::std::logical::Option::None)) }

::std::data::List::concat { fn(tup(@add(w10 w18) tup(w6 w11)) fn(tup(w10 tup(w11 w21)) tup(w18 tup(w6 w21)))) }

::std::data::List::push_front {
  fn(ref(w1 w9) fn(w3 _))
  ::std::data::List::concat = fn(tup(1 tup(tup(w3 w12) w12)) fn(w1 w9))
}

::std::data::List::into_iter { fn(tup(w0 tup(w1 _)) tup(w0 w1)) }

::std::data::List::IntoIter::next { fn(ref(tup(dup718(?(::std::data::List::IntoIter::next::3 ::std::data::List::IntoIter::next::2 x(x(w15 w16) x(x(w3 w14) w12))) w15) w3) tup(w16 w14)) w12) }

::std::data::List::IntoIter::next::2 { x(x(@sub(1 w1) w1) x(x(tup(w3 w4) w4) enum(enum(w3 w15) enum(_ w15)))) }

::std::data::List::IntoIter::next::3 { x(x(w4 w4) x(x(w2 w2) ::std::logical::Option::None)) }

::std::data::Map::empty { tup(0 _) }

::std::data::Map::new {
  fn(w0 fn(w1 fn(w2 tup(w14 tup(w6 tup(w1 w10))))))
  ::std::data::Map::len = fn(ref(w0 w6) @add(w12 @add(1 w14)))
  ::std::data::Map::len = fn(ref(w2 w10) w12)
}

::std::data::Map::len { fn(ref(tup(dup1168(w0 w8) w2) tup(w0 w2)) w8) }

::std::data::Map::_remove_min {
  fn(ref(tup(@sub(1 w10) w3) tup(w10 w37)) w29)
  ref(w3 w12) = ref(tup(w15 tup(w17 w19)) tup(w35 tup(w33 w31)))
  ::std::data::Map::len = fn(ref(w15 w26) ?(::std::data::Map::_remove_min::3 ::std::data::Map::_remove_min::2 x(x(w12 w37) x(x(w26 w35) x(x(w17 w33) x(x(w19 w31) w29))))))
}

::std::data::Map::_remove_min::2 {
  x(x(w18 w6) x(x(w16 w1) x(x(w14 w14) x(x(w12 w12) w3))))
  ::std::data::Map::_remove_min = fn(ref(w16 w1) w3)
  ::std::data::Map::balance_left = fn(ref(w18 w6) _)
}

::std::data::Map::_remove_min::3 { x(x(_ w2) x(x(w14 w14) x(x(w12 _) x(x(tup(_ w2) _) w12)))) }

::std::data::Map::_remove_max {
  fn(ref(tup(@sub(1 w10) w3) tup(w10 w37)) w29)
  ref(w3 w12) = ref(tup(w15 tup(w17 w19)) tup(w35 tup(w33 w31)))
  ::std::data::Map::len = fn(ref(w19 w26) ?(::std::data::Map::_remove_max::3 ::std::data::Map::_remove_max::2 x(x(w12 w37) x(x(w15 w35) x(x(w17 w33) x(x(w26 w31) w29))))))
}

::std::data::Map::_remove_max::2 {
  x(x(w18 w6) x(x(w16 w16) x(x(w14 w14) x(x(w12 w1) w3))))
  ::std::data::Map::_remove_max = fn(ref(w12 w1) w3)
  ::std::data::Map::balance_right = fn(ref(w18 w6) _)
}

::std::data::Map::_remove_max::3 { x(x(_ w2) x(x(tup(_ w2) _) x(x(w12 _) x(x(w10 w10) w12)))) }

::std::data::Map::iter { fn(w1 tup(w1 tup(0 tup(w11 w11)))) }

::std::data::Map::balanced { fn(ref(tup(dup1281(w0 ?(::std::data::Map::balanced::3 ::std::data::Map::balanced::2 x(x(w3 w14) w12))) w3) tup(w0 w14)) w12) }

::std::data::Map::balanced::2 {
  x(x(w16 w1) w30)
  ref(w16 w1) = ref(tup(w4 tup(w5 w7)) tup(w34 tup(w5 w32)))
  ::std::data::Map::is_balanced = fn(ref(w4 w18) fn(ref(w7 w21) ?(::std::data::Map::balanced::6 ::std::data::Map::balanced::5 x(x(w18 w28) x(x(w21 w26) ?(::std::data::Map::balanced::12 ::std::data::Map::balanced::11 x(x(w28 w34) x(x(w26 w32) w30))))))))
}

::std::data::Map::balanced::3 { x(x(w2 w2) 1) }

::std::data::Map::balanced::5 {
  x(x(w11 w4) x(x(w9 w1) w12))
  ::std::data::Map::is_balanced = fn(ref(w9 w1) fn(ref(w11 w4) ?(0 1 w12)))
}

::std::data::Map::balanced::6 { x(x(w4 w4) x(x(w2 w2) 0)) }

::std::data::Map::balanced::11 {
  x(x(w8 w1) w6)
  ::std::data::Map::balanced = fn(ref(w8 w1) ?(::std::data::Map::balanced::14 ::std::data::Map::balanced::13 w6))
}

::std::data::Map::balanced::12 { x(x(w4 w4) x(x(w2 w2) 0)) }

::std::data::Map::balanced::13 {
  x(x(w6 w1) w7)
  ::std::data::Map::balanced = fn(ref(w6 w1) ?(0 1 w7))
}

::std::data::Map::balanced::14 { x(x(w2 w2) 0) }

::std::data::Map::balance_left {
  fn(ref(tup(w6 tup(w7 w8)) w20) _)
  ::std::data::Map::is_balanced = fn(ref(w6 w14) fn(ref(w8 w17) ?(::std::data::Map::balance_left::3 ::std::data::Map::balance_left::2 x(w14 x(w7 x(w17 w20))))))
}

::std::data::Map::balance_left::2 { x(w7 x(w6 x(w5 tup(w7 tup(w6 w5))))) }

::std::data::Map::balance_left::3 {
  x(w10 x(w9 x(tup(_ tup(w1 tup(w2 w3))) w18)))
  ::std::data::Map::is_single = fn(ref(w1 w12) fn(ref(w3 w15) ?(::std::data::Map::balance_left::6 ::std::data::Map::balance_left::5 x(w10 x(w9 x(w12 x(w2 x(w15 w18))))))))
}

::std::data::Map::balance_left::5 {
  x(w12 x(w11 x(w10 x(w9 x(w8 tup(w3 tup(w9 w8)))))))
  ::std::data::Map::new = fn(w12 fn(w11 fn(w10 w3)))
}

::std::data::Map::balance_left::6 {
  x(w21 x(w20 x(tup(_ tup(w1 tup(w2 w3))) x(w18 x(w17 tup(w9 tup(w2 w14)))))))
  ::std::data::Map::new = fn(w21 fn(w20 fn(w1 w9)))
  ::std::data::Map::new = fn(w3 fn(w18 fn(w17 w14)))
}

::std::data::Map::balance_right {
  fn(ref(tup(w6 tup(w7 w8)) w20) _)
  ::std::data::Map::is_balanced = fn(ref(w8 w14) fn(ref(w6 w17) ?(::std::data::Map::balance_right::3 ::std::data::Map::balance_right::2 x(w17 x(w7 x(w14 w20))))))
}

::std::data::Map::balance_right::2 { x(w7 x(w6 x(w5 tup(w7 tup(w6 w5))))) }

::std::data::Map::balance_right::3 {
  x(tup(_ tup(w1 tup(w2 w3))) x(w9 x(w8 w18)))
  ::std::data::Map::is_single = fn(ref(w3 w12) fn(ref(w1 w15) ?(::std::data::Map::balance_right::6 ::std::data::Map::balance_right::5 x(w9 x(w8 x(w15 x(w2 x(w12 w18))))))))
}

::std::data::Map::balance_right::5 {
  x(w12 x(w11 x(w10 x(w9 x(w8 tup(w10 tup(w9 w5)))))))
  ::std::data::Map::new = fn(w8 fn(w12 fn(w11 w5)))
}

::std::data::Map::balance_right::6 {
  x(w21 x(w20 x(w19 x(w18 x(tup(_ tup(w1 tup(w2 w3))) tup(w9 tup(w2 w14)))))))
  ::std::data::Map::new = fn(w19 fn(w18 fn(w1 w9)))
  ::std::data::Map::new = fn(w3 fn(w21 fn(w20 w14)))
}

::std::data::Map::merge_balanced {
  fn(w0 fn(w1 w10))
  ::std::data::Map::len = fn(ref(w0 w7) ?(::std::data::Map::merge_balanced::3 ::std::data::Map::merge_balanced::2 x(w7 x(w1 w10))))
}

::std::data::Map::merge_balanced::2 {
  x(w6 x(w5 w7))
  ::std::data::Map::len = fn(ref(w5 w1) ?(::std::data::Map::merge_balanced::5 ::std::data::Map::merge_balanced::4 x(w6 x(w1 w7))))
}

::std::data::Map::merge_balanced::3 { x(_ x(tup(_ w1) w1)) }

::std::data::Map::merge_balanced::4 {
  x(w11 x(w10 w12))
  ::std::data::Map::len = fn(ref(w11 w1) @lt$(w7 ?(::std::data::Map::merge_balanced::7 ::std::data::Map::merge_balanced::6 x(w1 x(w5 w12)))))
  ::std::data::Map::len = fn(ref(w10 w5) w7)
}

::std::data::Map::merge_balanced::5 { x(tup(_ w1) x(_ w1)) }

::std::data::Map::merge_balanced::6 {
  x(w11 x(w10 tup(w1 tup(w3 w10))))
  ::std::data::Map::_remove_max = fn(ref(w11 w1) w3)
}

::std::data::Map::merge_balanced::7 {
  x(w11 x(w10 tup(w11 tup(w3 w1))))
  ::std::data::Map::_remove_min = fn(ref(w10 w1) w3)
}

::std::data::Map::is_balanced {
  fn(ref(tup(dup1440(w0 w14) w2) tup(w0 w2)) fn(ref(tup(dup1441(w6 w17) w8) tup(w6 w8)) w18))
  3 = @mul(w14 @add(2 @le$(w17 w18)))
}

::std::data::Map::is_single {
  fn(ref(tup(dup1444(w0 @le(w16 w17)) w2) tup(w0 w2)) fn(ref(tup(dup1445(w6 w15) w8) tup(w6 w8)) w17))
  2 = @mul(w15 w16)
}

::std::data::Map::size { fn(ref(tup(tup(dup1448(w0 @add(w17 @add(1 w19))) w2) tup(w5 tup(dup1449(w6 w17) w8))) tup(tup(w0 w2) tup(w5 tup(w6 w8)))) w19) }

::std::numeric::N64::from_n32 { fn(w0 tup(w0 0)) }

::std::numeric::N64::or { fn(tup(@n32_or(w3 w10) @n32_or(w4 w13)) fn(tup(w3 w4) tup(w10 w13))) }

::std::numeric::N64::xor { fn(tup(@n32_xor(w3 w10) @n32_xor(w4 w13)) fn(tup(w3 w4) tup(w10 w13))) }

::std::rng::Pcg32::new {
  fn(w0 fn(w1 tup(w15 w18)))
  ::std::numeric::N64::from_n32 = fn(1 w5)
  ::std::numeric::N64::or = fn(w1 fn(w5 dup2156(w9 dup2156(w14 w18))))
  ::std::numeric::N64::add = fn(w0 fn(w9 w10))
  ::std::numeric::N64::mul = fn(w10 fn(::std::rng::Pcg32::multiplier w13))
  ::std::numeric::N64::add = fn(w13 fn(w14 w15))
}

::std::rng::Pcg32::default {
  w2
  ::std::rng::Pcg32::new = fn(tup(3512640997 3405705229) fn(tup(4150755663 335903614) w2))
}

::std::rng::Pcg32::multiplier { tup(1284865837 1481765933) }

::std::rng::Pcg32::gen_n32 {
  fn(ref(tup(dup2163(tup(@n32_shr(27 w24) dup2166(@n32_shr(13 @n32_xor(w21 @n32_xor(w24 w25))) dup2166(@n32_shl(5 w21) @n32_shr(27 w27)))) w13) dup2164(w2 w15)) tup(w16 w2)) w28)
  ::std::numeric::N64::mul = fn(w13 fn(::std::rng::Pcg32::multiplier w14))
  ::std::numeric::N64::add = fn(w14 fn(w15 w16))
  ::std::numeric::N32::rotate_right = fn(w25 fn(w27 w28))
}

::std::rng::Pcg32::mix {
  fn(ref(tup(w1 dup2172(w2 w17)) tup(w18 w2)) fn(w7 _))
  ::std::numeric::N64::xor = fn(w1 fn(tup(0 w7) w13))
  ::std::numeric::N64::mul = fn(w13 fn(::std::rng::Pcg32::multiplier w16))
  ::std::numeric::N64::add = fn(w16 fn(w17 w18))
}

::std::rng::Pcg32::seeded {
  fn(dup2176(w8 _) w15)
  ::std::data::List::into_iter = fn(w8 w9)
  ::std::rng::Pcg32::seeded::1 = x(x(::std::rng::Pcg32::default w15) w9)
}

::std::rng::Pcg32::seeded::1 {
  x(w7 w5)
  ::std::data::List::IntoIter::next = fn(ref(w5 w1) enum(::std::rng::Pcg32::seeded::4 enum(::std::rng::Pcg32::seeded::5 x(w7 w1))))
}

::std::rng::Pcg32::seeded::4 {
  enum(w0 x(x(w4 w13) w2))
  ::std::unicode::Char::as_n32 = fn(w0 w9)
  ::std::rng::Pcg32::mix = fn(ref(w4 w6) fn(w9 _))
  ::std::rng::Pcg32::seeded::1 = x(x(w6 w13) w2)
}

::std::rng::Pcg32::seeded::5 { x(x(w2 w2) _) }

::std::IO::println {
  fn(ref(w1 w12) fn(w3 _))
  ::std::IO::print = fn(ref(w1 w7) fn(w3 _))
  ::std::IO::print_char = fn(ref(w7 w12) fn(10 _))
}

::std::IO::print {
  fn(ref(w1 w16) fn(tup(w7 tup(w8 _)) _))
  ::std::IO::print::1 = x(x(w1 w16) x(w7 w8))
}

::std::IO::print::1 { x(w4 x(dup2591(?(::std::IO::print::3 ::std::IO::print::2 x(w4 x(w6 w1))) w6) w1)) }

::std::IO::print::2 {
  x(x(w17 w21) x(@sub(1 w1) tup(w4 w5)))
  ::std::IO::print_char = fn(ref(w17 w10) fn(w4 _))
  ::std::IO::print::1 = x(x(w10 w21) x(w1 w5))
}

::std::IO::print::3 { x(x(w3 w3) _) }

