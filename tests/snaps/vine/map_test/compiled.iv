
::std::logical::Option::None { enum(_ enum(n0 n0)) }

::std::numeric::N32::rotate_right { fn(@n32_rotr(n0 n1) fn(n0 n1)) }

::std::numeric::N64::add { fn(tup(dup(@add(n0 n1) @n32_add_high(n2 n3)) @add(n4 @add(n3 n5))) fn(tup(dup(n0 n2) n4) tup(n1 n5))) }

::std::numeric::N64::mul { fn(tup(dup(@mul(n0 n1) dup(@n32_mul_high(n2 n3) @mul(n4 @add(n5 @add(n3 n6))))) n7) fn(tup(dup(n0 dup(n2 @mul(n7 n5))) n4) tup(n1 n6))) }

::std::ops::Ord::Lt { enum(n0 enum(_ enum(_ n0))) }

::std::ops::Ord::Eq { enum(_ enum(n0 enum(_ n0))) }

::std::ops::Ord::Gt { enum(_ enum(_ enum(n0 n0))) }

::std::unicode::Char::as_n32 { fn(n0 n0) }

::std::IO::print_char { fn(ref(@io_print_char(n0 n1) n1) fn(n0 _)) }

::main { ::map_test::main }

::map_test::seed { tup(26 tup(tup(100 tup(117 tup(98 tup(105 tup(111 tup(117 tup(115 tup(108 tup(121 tup(32 tup(99 tup(104 tup(97 tup(114 tup(103 tup(101 tup(100 tup(32 tup(117 tup(109 tup(98 tup(114 tup(101 tup(108 tup(108 tup(97 n0)))))))))))))))))))))))))) n0)) }

::map_test::main {
  fn(ref(w1 w18) _)
  ::std::rng::Pcg32::seeded = fn(::map_test::seed w6)
  ::map_test::main::1 = x(x(::std::data::Map::empty w26) x(w6 4600))
  ::map_test::main::4 = x(x(w1 w31) x(x(w26 w29) fn(4600 _)))
  ::std::rng::Pcg32::seeded = fn(::map_test::seed w11)
  ::map_test::main::19 = x(x(w31 w37) x(x(w29 w35) x(w11 4600)))
  ::std::rng::Pcg32::seeded = fn(::map_test::seed w14)
  ::map_test::main::30 = x(x(w37 w42) x(w35 x(w14 4600)))
  ::std::IO::println = fn(ref(w42 w18) fn(tup(4 tup(tup(100 tup(111 tup(110 tup(101 w45)))) w45)) _))
}

::map_test::main::1 { x(w5 x(w3 dup24(@lt$(0 ?(::map_test::main::3 ::map_test::main::2 x(w5 x(w3 w6)))) w6))) }

::map_test::main::2 {
  x(x(w18 w22) x(w16 @sub(1 w1)))
  ::std::rng::Pcg32::gen_n32 = fn(ref(w16 w3) dup32(w10 dup32(@mul(w12 w13) w12)))
  ::std::data::Map::insert::1 = fn(ref(w18 w8) fn(w10 fn(w13 _)))
  ::map_test::main::1 = x(x(w8 w22) x(w3 w1))
}

::map_test::main::3 { x(x(w3 w3) _) }

::map_test::main::4 {
  x(x(w16 w43) x(x(w14 w38) fn(w0 w41)))
  ::std::data::Map::iter = fn(ref(w14 w4) w6)
  ::map_test::main::5 = x(x(w16 w22) x(w6 x(0 x(0 @eq(w28 @n32_and(w32 ?(::map_test::main::15 ::map_test::main::14 x(x(w22 w36) _))))))))
  ::std::data::Map::len = fn(ref(w4 w25) dup34(w28 @eq(w0 w32)))
  ::std::data::Map::balanced = fn(ref(w25 w38) ?(::map_test::main::18 ::map_test::main::17 x(x(w36 w43) w41)))
}

::map_test::main::5 {
  x(w10 x(w8 w7))
  ::std::data::Map::Iter::next::1 = fn(ref(w8 w1) enum(::map_test::main::8 enum(::map_test::main::9 x(w10 x(w1 w7)))))
}

::map_test::main::8 {
  enum(ref(tup(dup68(w10 w24) w9) tup(w10 w9)) x(x(w19 w34) x(w17 x(dup64(@lt$(w24 ?(::map_test::main::12 ::map_test::main::11 x(x(w19 w28) _))) w31) x(@add(1 w21) w30)))))
  ::map_test::main::5 = x(x(w28 w34) x(w17 x(w31 x(w21 w30))))
}

::map_test::main::9 { x(x(w5 w5) x(_ x(_ x(w1 w1)))) }

::map_test::main::11 {
  x(x(w7 w1) _)
  ::std::IO::println = fn(ref(w7 w1) fn(tup(12 tup(tup(111 tup(117 tup(116 tup(32 tup(111 tup(102 tup(32 tup(111 tup(114 tup(100 tup(101 tup(114 w10)))))))))))) w10)) _))
}

::map_test::main::12 { x(x(w2 w2) _) }

::map_test::main::14 { x(x(w2 w2) _) }

::map_test::main::15 {
  x(x(w7 w1) _)
  ::std::IO::println = fn(ref(w7 w1) fn(tup(10 tup(tup(98 tup(97 tup(100 tup(32 tup(108 tup(101 tup(110 tup(103 tup(116 tup(104 w10)))))))))) w10)) _))
}

::map_test::main::17 { x(x(w2 w2) _) }

::map_test::main::18 {
  x(x(w7 w1) _)
  ::std::IO::println = fn(ref(w7 w1) fn(tup(10 tup(tup(105 tup(109 tup(98 tup(97 tup(108 tup(97 tup(110 tup(99 tup(101 tup(100 w10)))))))))) w10)) _))
}

::map_test::main::19 { x(w7 x(w5 x(w3 dup97(@lt$(0 ?(::map_test::main::21 ::map_test::main::20 x(w7 x(w5 x(w3 w8))))) w8)))) }

::map_test::main::20 {
  x(x(w13 w31) x(x(w11 w29) x(w9 @sub(1 w1))))
  ::std::rng::Pcg32::gen_n32 = fn(ref(w9 w3) w5)
  ::std::data::Map::get::1 = fn(ref(w11 w15) fn(ref(w5 w18) enum(::map_test::main::25 enum(::map_test::main::29 x(x(w13 w25) x(w18 _))))))
  ::map_test::main::19 = x(x(w25 w31) x(x(w15 w29) x(w3 w1)))
}

::map_test::main::21 { x(x(w5 w5) x(x(w3 w3) _)) }

::map_test::main::25 { enum(ref(dup117(w1 @ne(w11 ?(::map_test::main::28 ::map_test::main::29 x(w7 x(w14 w13))))) w1) x(w7 x(dup116(@mul(w10 w11) dup116(w10 w14)) w13))) }

::map_test::main::28 { x(x(w3 w3) _) }

::map_test::main::29 {
  x(x(w10 w1) x(w8 _))
  ::std::numeric::N32::to_string::to_string = fn(w8 tup(@add(8 w11) tup(w12 w13)))
  ::std::IO::println = fn(ref(w10 w1) fn(tup(w11 tup(tup(109 tup(105 tup(115 tup(115 tup(105 tup(110 tup(103 tup(32 w12)))))))) w13)) _))
}

::map_test::main::30 { x(w6 x(w4 x(w3 dup137(@lt$(0 ?(::map_test::main::32 ::map_test::main::31 x(w6 x(w4 x(w3 w7))))) w7)))) }

::map_test::main::31 {
  x(x(w13 w38) x(w11 x(w10 @sub(1 dup148(@rem(100 ?(::map_test::main::43 ::map_test::main::42 x(x(w25 w33) x(x(w15 w31) x(w29 _))))) dup148(w29 w34))))))
  ::std::rng::Pcg32::gen_n32 = fn(ref(w10 w3) w5)
  ::std::data::Map::remove::1 = fn(ref(w11 w15) fn(ref(w5 w18) enum(::map_test::main::36 enum(::map_test::main::40 x(x(w13 w25) x(w18 _))))))
  ::map_test::main::30 = x(x(w33 w38) x(w31 x(w3 w34)))
}

::map_test::main::32 { x(x(w4 w4) _) }

::map_test::main::36 { enum(@ne(w9 ?(::map_test::main::39 ::map_test::main::40 x(w5 x(w12 w11)))) x(w5 x(dup157(@mul(w8 w9) dup157(w8 w12)) w11))) }

::map_test::main::39 { x(x(w3 w3) _) }

::map_test::main::40 {
  x(x(w10 w1) x(w8 _))
  ::std::numeric::N32::to_string::to_string = fn(w8 tup(@add(8 w11) tup(w12 w13)))
  ::std::IO::println = fn(ref(w10 w1) fn(tup(w11 tup(tup(109 tup(105 tup(115 tup(115 tup(105 tup(110 tup(103 tup(32 w12)))))))) w13)) _))
}

::map_test::main::42 { x(x(w5 w5) x(x(w3 w3) _)) }

::map_test::main::43 {
  x(w8 x(w6 x(w4 _)))
  ::map_test::main::4 = x(w8 x(w6 fn(w4 _)))
}

::std::data::Map::insert::1 { fn(ref(tup(dup184(?(::std::data::Map::insert::1::3 ::std::data::Map::insert::1::2 x(x(n0 n1) x(x(n2 n3) x(n4 x(n5 n6))))) n0) n2) tup(n1 n3)) fn(n4 fn(n5 n6))) }

::std::data::Map::insert::1::2 { x(n0 x(x(tup(n1 tup(tup(dup256(n2 dup256(n3 n4)) n5) n6)) n7) x(dup255(n8 dup255(@lt(n3 ?(::std::numeric::N32::ord::cmp::3 ::std::numeric::N32::ord::cmp::2 x(n9 x(n4 enum(::std::data::Map::insert::1::8 enum(::std::data::Map::insert::1::9 enum(::std::data::Map::insert::1::10 x(n0 x(x(tup(n10 tup(tup(n11 n12) n13)) n7) x(n8 x(n14 x(x(n1 n10) x(x(n2 n11) x(x(n5 n12) x(x(n6 n13) x(n15 _)))))))))))))))) n9)) x(n14 n15)))) }

::std::data::Map::insert::1::3 { x(x(_ 1) x(x(_ tup(::std::data::Map::empty tup(tup(n0 n1) ::std::data::Map::empty))) x(n0 x(n1 ::std::logical::Option::None)))) }

::std::data::Map::insert::1::8 { x(x(_ n0) x(x(tup(tup(dup1448(dup1441(n1 n2) @add(n3 @add(1 n0))) n4) tup(n5 tup(dup1449(dup1440(n6 @mul$(3 @add(2 @le$(n2 ?(::std::data::Map::balance_right::3 ::std::data::Map::balance_right::2 x(tup(n1 n4) x(n5 x(tup(n6 n7) n8)))))))) n3) n7))) n8) x(n9 x(n10 x(x(tup(dup184(?(::std::data::Map::insert::1::3 ::std::data::Map::insert::1::2 x(x(n11 n12) x(x(n13 n14) x(n9 x(n10 n15))))) n11) n13) tup(n12 n14)) x(x(n16 n16) x(x(n17 n17) x(x(n18 n18) x(n15 _))))))))) }

::std::data::Map::insert::1::9 { x(x(n0 n0) x(x(n1 n1) x(n2 x(n3 x(x(n4 n4) x(x(_ n2) x(x(n5 n3) x(x(n6 n6) x(enum(enum(n5 n7) enum(_ n7)) _))))))))) }

::std::data::Map::insert::1::10 { x(x(_ n0) x(x(tup(tup(dup1448(dup1440(n1 @mul$(3 @add(2 @le$(n2 ?(::std::data::Map::balance_left::3 ::std::data::Map::balance_left::2 x(tup(n1 n3) x(n4 x(tup(n5 n6) n7)))))))) @add(n8 @add(1 n0))) n3) tup(n4 tup(dup1449(dup1441(n5 n2) n8) n6))) n7) x(n9 x(n10 x(x(n11 n11) x(x(n12 n12) x(x(n13 n13) x(x(tup(dup184(?(::std::data::Map::insert::1::3 ::std::data::Map::insert::1::2 x(x(n14 n15) x(x(n16 n17) x(n9 x(n10 n18))))) n14) n16) tup(n15 n17)) x(n18 _))))))))) }

::std::numeric::N32::ord::cmp { fn(ref(dup255(n0 dup255(@lt(n1 ?(::std::numeric::N32::ord::cmp::3 ::std::numeric::N32::ord::cmp::2 x(n2 x(n3 n4)))) n2)) n0) fn(ref(dup256(n5 dup256(n1 n3)) n5) n4)) }

::std::numeric::N32::ord::cmp::2 { x(_ x(_ ::std::ops::Ord::Lt)) }

::std::numeric::N32::ord::cmp::3 { x(@lt$(n0 ?(::std::ops::Ord::Eq ::std::ops::Ord::Gt n1)) x(n0 n1)) }

::std::data::Map::Iter::next::1 { fn(ref(tup(ref(tup(dup282(n0 ?(::std::data::Map::Iter::next::1::4 ::std::data::Map::Iter::next::1::3 x(x(_ n1) x(x(n2 tup(dup538(?(::std::data::List::pop_front::3 ::std::data::List::pop_front::2 x(x(n3 n4) x(x(n5 n6) enum(::std::data::Map::Iter::next::1::8 enum(::std::data::Map::Iter::next::1::9 x(x(n1 n7) n8)))))) n3) tup(n5 n9))) x(x(n10 n11) _))))) n10) tup(n0 n11)) n2) tup(n7 tup(n4 tup(n6 n9)))) n8) }

::std::data::Map::Iter::next::1::1 { x(x(ref(tup(dup282(n0 ?(::std::data::Map::Iter::next::1::4 ::std::data::Map::Iter::next::1::3 x(x(_ n1) x(n2 x(x(n3 n4) n5))))) n3) tup(n0 n4)) n1) x(n2 n5)) }

::std::data::Map::Iter::next::1::3 { x(x(_ n0) x(x(tup(@add$(1 n1) tup(n2 n3)) n4) x(x(tup(tup(dup282(n5 ?(::std::data::Map::Iter::next::1::4 ::std::data::Map::Iter::next::1::3 x(x(_ n0) x(x(tup(n1 tup(tup(ref(n6 n7) n2) n3)) n4) x(x(n8 n9) n10))))) n8) n6) tup(tup(n5 n9) n7)) n10))) }

::std::data::Map::Iter::next::1::4 { x(x(n0 n0) x(x(n1 n1) x(x(n2 n2) _))) }

::std::data::Map::Iter::next::1::8 { enum(ref(tup(n0 n1) tup(n2 n3)) x(x(_ ref(n1 n3)) enum(enum(ref(n0 n2) n4) enum(_ n4)))) }

::std::data::Map::Iter::next::1::9 { x(x(n0 n0) ::std::logical::Option::None) }

::std::data::Map::get::1 { fn(ref(tup(dup312(n0 ?(::std::data::Map::get::1::3 ::std::data::Map::get::1::2 x(x(n1 n2) x(x(n3 n4) n5)))) n1) tup(n0 n2)) fn(ref(n3 n4) n5)) }

::std::data::Map::get::1::2 { x(x(tup(n0 tup(tup(dup256(n1 dup256(n2 n3)) n4) n5)) tup(n6 tup(tup(n1 n7) n8))) x(x(dup255(n9 dup255(@lt(n2 ?(::std::numeric::N32::ord::cmp::3 ::std::numeric::N32::ord::cmp::2 x(n10 x(n3 enum(::std::data::Map::get::1::8 enum(::std::data::Map::get::1::9 enum(::std::data::Map::get::1::10 x(x(n9 n11) x(x(n0 n6) x(x(n4 n7) x(x(n5 n8) n12))))))))))) n10)) n11) n12)) }

::std::data::Map::get::1::3 { x(x(n0 n0) x(x(n1 n1) ::std::logical::Option::None)) }

::std::data::Map::get::1::8 { x(x(n0 n1) x(x(tup(dup312(n2 ?(::std::data::Map::get::1::3 ::std::data::Map::get::1::2 x(x(n3 n4) x(x(n0 n1) n5)))) n3) tup(n2 n4)) x(x(n6 n6) x(x(n7 n7) n5)))) }

::std::data::Map::get::1::9 { x(x(n0 n0) x(x(n1 n1) x(x(n2 n3) x(x(n4 n4) enum(enum(ref(n2 n3) n5) enum(_ n5)))))) }

::std::data::Map::get::1::10 { x(x(n0 n1) x(x(n2 n2) x(x(n3 n3) x(x(tup(dup312(n4 ?(::std::data::Map::get::1::3 ::std::data::Map::get::1::2 x(x(n5 n6) x(x(n0 n1) n7)))) n5) tup(n4 n6)) n7)))) }

::std::numeric::N32::to_string::to_string { fn(dup359(?(::std::numeric::N32::to_string::to_string::3 ::std::numeric::N32::to_string::to_string::2 x(n0 n1)) n0) n1) }

::std::numeric::N32::to_string::to_string::2 { x(dup368(?(::std::numeric::N32::to_string::to_string::6 ::std::numeric::N32::to_string::to_string::5 x(n0 x(tup(0 tup(n1 n1)) n2))) n0) n2) }

::std::numeric::N32::to_string::to_string::3 { x(_ tup(1 tup(tup(48 n0) n0))) }

::std::numeric::N32::to_string::to_string::4 { x(dup368(?(::std::numeric::N32::to_string::to_string::6 ::std::numeric::N32::to_string::to_string::5 x(n0 n1)) n0) n1) }

::std::numeric::N32::to_string::to_string::5 { x(dup371(@rem(10 @add$(48 n0)) @div(10 dup368(?(::std::numeric::N32::to_string::to_string::6 ::std::numeric::N32::to_string::to_string::5 x(n1 x(tup(n2 tup(tup(n0 n3) n4)) n5))) n1))) x(tup(@add$(1 n2) tup(n3 n4)) n5)) }

::std::numeric::N32::to_string::to_string::6 { x(_ x(n0 n0)) }

::std::data::Map::remove::1 { fn(ref(tup(dup378(?(::std::data::Map::remove::1::3 ::std::data::Map::remove::1::2 x(x(n0 n1) x(x(n2 n3) x(x(n4 n5) n6)))) n0) n2) tup(n1 n3)) fn(ref(n4 n5) n6)) }

::std::data::Map::remove::1::2 { x(n0 x(x(tup(n1 tup(tup(dup256(n2 dup256(n3 n4)) dup398(n5 n6)) n7)) n8) x(x(dup255(n9 dup255(@lt(n3 ?(::std::numeric::N32::ord::cmp::3 ::std::numeric::N32::ord::cmp::2 x(n10 x(n4 enum(::std::data::Map::remove::1::8 enum(::std::data::Map::remove::1::9 enum(::std::data::Map::remove::1::10 x(n0 x(x(tup(n11 tup(tup(n2 n5) n12)) n8) x(x(n9 n13) x(x(n1 n11) x(n6 x(x(n7 n12) x(n14 _)))))))))))))) n10)) n13) n14))) }

::std::data::Map::remove::1::3 { x(x(n0 n0) x(x(n1 n1) x(x(n2 n2) ::std::logical::Option::None))) }

::std::data::Map::remove::1::8 { x(x(_ n0) x(x(tup(tup(dup1448(dup1440(n1 @mul$(3 @add(2 @le$(n2 ?(::std::data::Map::balance_left::3 ::std::data::Map::balance_left::2 x(tup(n1 n3) x(n4 x(tup(n5 n6) n7)))))))) @add(n8 @add(1 n0))) n3) tup(n4 tup(dup1449(dup1441(n5 n2) n8) n6))) n7) x(x(n9 n10) x(x(tup(dup378(?(::std::data::Map::remove::1::3 ::std::data::Map::remove::1::2 x(x(n11 n12) x(x(n13 n14) x(x(n9 n10) n15)))) n11) n13) tup(n12 n14)) x(_ x(x(n16 n16) x(n15 _))))))) }

::std::data::Map::remove::1::9 { x(x(@sub(1 n0) n0) x(x(_ n1) x(x(n2 n2) x(x(tup(dup1168(n3 ?(::std::data::Map::merge_balanced::3 ::std::data::Map::merge_balanced::2 x(tup(n3 n4) x(n5 n1)))) n4) _) x(n6 x(x(n5 _) x(enum(enum(n6 n7) enum(_ n7)) _))))))) }

::std::data::Map::remove::1::10 { x(x(_ n0) x(x(tup(tup(dup1448(dup1441(n1 n2) @add(n3 @add(1 n0))) n4) tup(n5 tup(dup1449(dup1440(n6 @mul$(3 @add(2 @le$(n2 ?(::std::data::Map::balance_right::3 ::std::data::Map::balance_right::2 x(tup(n1 n4) x(n5 x(tup(n6 n7) n8)))))))) n3) n7))) n8) x(x(n9 n10) x(x(n11 n11) x(_ x(x(tup(dup378(?(::std::data::Map::remove::1::3 ::std::data::Map::remove::1::2 x(x(n12 n13) x(x(n14 n15) x(x(n9 n10) n16)))) n12) n14) tup(n13 n15)) x(n16 _))))))) }

::std::data::List::pop_front { fn(ref(tup(dup538(?(::std::data::List::pop_front::3 ::std::data::List::pop_front::2 x(x(n0 n1) x(x(n2 n3) n4))) n0) tup(n2 n5)) tup(n1 tup(n3 n5))) n4) }

::std::data::List::pop_front::2 { x(x(@sub(1 n0) n0) x(x(tup(n1 n2) n2) enum(enum(n1 n3) enum(_ n3)))) }

::std::data::List::pop_front::3 { x(x(n0 n0) x(x(n1 n1) ::std::logical::Option::None)) }

::std::data::List::concat { fn(tup(@add(n0 n1) tup(n2 n3)) fn(tup(n0 tup(n3 n4)) tup(n1 tup(n2 n4)))) }

::std::data::List::push_front { fn(ref(tup(@add$(1 n0) tup(n1 n2)) tup(n0 tup(tup(n3 n1) n2))) fn(n3 _)) }

::std::data::List::into_iter { fn(tup(n0 tup(n1 _)) tup(n0 n1)) }

::std::data::List::IntoIter::next { fn(ref(tup(dup718(?(::std::data::List::IntoIter::next::3 ::std::data::List::IntoIter::next::2 x(x(n0 n1) x(x(n2 n3) n4))) n0) n2) tup(n1 n3)) n4) }

::std::data::List::IntoIter::next::2 { x(x(@sub(1 n0) n0) x(x(tup(n1 n2) n2) enum(enum(n1 n3) enum(_ n3)))) }

::std::data::List::IntoIter::next::3 { x(x(n0 n0) x(x(n1 n1) ::std::logical::Option::None)) }

::std::data::Map::empty { tup(0 _) }

::std::data::Map::new { fn(tup(dup1168(n0 @add(n1 @add(1 n2))) n3) fn(n4 fn(tup(dup1168(n5 n1) n6) tup(n2 tup(tup(n0 n3) tup(n4 tup(n5 n6))))))) }

::std::data::Map::len { fn(ref(tup(dup1168(n0 n1) n2) tup(n0 n2)) n1) }

::std::data::Map::_remove_min { fn(ref(tup(@sub(1 n0) tup(tup(dup1168(n1 ?(::std::data::Map::_remove_min::3 ::std::data::Map::_remove_min::2 x(x(tup(n2 tup(n3 n4)) n5) x(x(tup(n1 n6) n2) x(x(n7 n3) x(x(n8 n4) n9)))))) n6) tup(n7 n8))) tup(n0 n5)) n9) }

::std::data::Map::_remove_min::2 { x(x(tup(tup(dup1440(n0 @mul$(3 @add(2 @le$(n1 ?(::std::data::Map::balance_left::3 ::std::data::Map::balance_left::2 x(tup(n0 n2) x(n3 x(tup(n4 n5) n6)))))))) n2) tup(n3 tup(dup1441(n4 n1) n5))) n6) x(x(tup(@sub(1 n7) tup(tup(dup1168(n8 ?(::std::data::Map::_remove_min::3 ::std::data::Map::_remove_min::2 x(x(tup(n9 tup(n10 n11)) n12) x(x(tup(n8 n13) n9) x(x(n14 n10) x(x(n15 n11) n16)))))) n13) tup(n14 n15))) tup(n7 n12)) x(x(n17 n17) x(x(n18 n18) n16)))) }

::std::data::Map::_remove_min::3 { x(x(_ n0) x(x(n1 n1) x(x(n2 _) x(x(tup(_ n0) _) n2)))) }

::std::data::Map::_remove_max { fn(ref(tup(@sub(1 n0) tup(n1 tup(n2 tup(dup1168(n3 ?(::std::data::Map::_remove_max::3 ::std::data::Map::_remove_max::2 x(x(tup(n4 tup(n5 n6)) n7) x(x(n1 n4) x(x(n2 n5) x(x(tup(n3 n8) n6) n9)))))) n8)))) tup(n0 n7)) n9) }

::std::data::Map::_remove_max::2 { x(x(tup(tup(dup1441(n0 n1) n2) tup(n3 tup(dup1440(n4 @mul$(3 @add(2 @le$(n1 ?(::std::data::Map::balance_right::3 ::std::data::Map::balance_right::2 x(tup(n0 n2) x(n3 x(tup(n4 n5) n6)))))))) n5))) n6) x(x(n7 n7) x(x(n8 n8) x(x(tup(@sub(1 n9) tup(n10 tup(n11 tup(dup1168(n12 ?(::std::data::Map::_remove_max::3 ::std::data::Map::_remove_max::2 x(x(tup(n13 tup(n14 n15)) n16) x(x(n10 n13) x(x(n11 n14) x(x(tup(n12 n17) n15) n18)))))) n17)))) tup(n9 n16)) n18)))) }

::std::data::Map::_remove_max::3 { x(x(_ n0) x(x(tup(_ n0) _) x(x(n1 _) x(x(n2 n2) n1)))) }

::std::data::Map::iter { fn(n0 tup(n0 tup(0 tup(n1 n1)))) }

::std::data::Map::balanced { fn(ref(tup(dup1281(n0 ?(::std::data::Map::balanced::3 ::std::data::Map::balanced::2 x(x(n1 n2) n3))) n1) tup(n0 n2)) n3) }

::std::data::Map::balanced::2 { x(x(tup(tup(dup1440(n0 @mul$(3 @add(2 @le$(n1 ?(::std::data::Map::balanced::6 ::std::data::Map::balanced::5 x(x(tup(n0 n2) n3) x(x(tup(n4 n5) n6) ?(::std::data::Map::balanced::12 ::std::data::Map::balanced::11 x(x(n3 n7) x(x(n6 n8) n9)))))))))) n2) tup(n10 tup(dup1441(n4 n1) n5))) tup(n7 tup(n10 n8))) n9) }

::std::data::Map::balanced::3 { x(x(n0 n0) 1) }

::std::data::Map::balanced::5 { x(x(tup(dup1441(n0 n1) n2) tup(n0 n2)) x(x(tup(dup1440(n3 @mul$(3 @add(2 @le$(n1 ?(0 1 n4))))) n5) tup(n3 n5)) n4)) }

::std::data::Map::balanced::6 { x(x(n0 n0) x(x(n1 n1) 0)) }

::std::data::Map::balanced::11 { x(x(tup(dup1281(n0 ?(::std::data::Map::balanced::3 ::std::data::Map::balanced::2 x(x(n1 n2) ?(::std::data::Map::balanced::14 ::std::data::Map::balanced::13 n3)))) n1) tup(n0 n2)) n3) }

::std::data::Map::balanced::12 { x(x(n0 n0) x(x(n1 n1) 0)) }

::std::data::Map::balanced::13 { x(x(tup(dup1281(n0 ?(::std::data::Map::balanced::3 ::std::data::Map::balanced::2 x(x(n1 n2) ?(0 1 n3)))) n1) tup(n0 n2)) n3) }

::std::data::Map::balanced::14 { x(x(n0 n0) 0) }

::std::data::Map::balance_left { fn(ref(tup(tup(dup1440(n0 @mul$(3 @add(2 @le$(n1 ?(::std::data::Map::balance_left::3 ::std::data::Map::balance_left::2 x(tup(n0 n2) x(n3 x(tup(n4 n5) n6)))))))) n2) tup(n3 tup(dup1441(n4 n1) n5))) n6) _) }

::std::data::Map::balance_left::2 { x(n0 x(n1 x(n2 tup(n0 tup(n1 n2))))) }

::std::data::Map::balance_left::3 { x(n0 x(n1 x(tup(_ tup(tup(dup1444(n2 @le(n3 ?(::std::data::Map::balance_left::6 ::std::data::Map::balance_left::5 x(n0 x(n1 x(tup(n2 n4) x(n5 x(tup(n6 n7) n8)))))))) n4) tup(n5 tup(dup1445(n6 @mul$(2 n3)) n7)))) n8))) }

::std::data::Map::balance_left::5 { x(tup(dup1168(n0 @add(n1 @add(1 n2))) n3) x(n4 x(tup(dup1168(n5 n1) n6) x(n7 x(n8 tup(tup(n2 tup(tup(n0 n3) tup(n4 tup(n5 n6)))) tup(n7 n8))))))) }

::std::data::Map::balance_left::6 { x(tup(dup1168(n0 @add(n1 @add(1 n2))) n3) x(n4 x(tup(_ tup(tup(dup1168(n5 n1) n6) tup(n7 tup(dup1168(n8 @add(n9 @add(1 n10))) n11)))) x(n12 x(tup(dup1168(n13 n9) n14) tup(tup(n2 tup(tup(n0 n3) tup(n4 tup(n5 n6)))) tup(n7 tup(n10 tup(tup(n8 n11) tup(n12 tup(n13 n14))))))))))) }

::std::data::Map::balance_right { fn(ref(tup(tup(dup1441(n0 n1) n2) tup(n3 tup(dup1440(n4 @mul$(3 @add(2 @le$(n1 ?(::std::data::Map::balance_right::3 ::std::data::Map::balance_right::2 x(tup(n0 n2) x(n3 x(tup(n4 n5) n6)))))))) n5))) n6) _) }

::std::data::Map::balance_right::2 { x(n0 x(n1 x(n2 tup(n0 tup(n1 n2))))) }

::std::data::Map::balance_right::3 { x(tup(_ tup(tup(dup1445(n0 @mul$(2 n1)) n2) tup(n3 tup(dup1444(n4 @le(n1 ?(::std::data::Map::balance_right::6 ::std::data::Map::balance_right::5 x(n5 x(n6 x(tup(n0 n2) x(n3 x(tup(n4 n7) n8)))))))) n7)))) x(n5 x(n6 n8))) }

::std::data::Map::balance_right::5 { x(n0 x(tup(dup1168(n1 n2) n3) x(n4 x(n5 x(tup(dup1168(n6 @add(n2 @add(1 n7))) n8) tup(n4 tup(n5 tup(n7 tup(tup(n6 n8) tup(n0 tup(n1 n3))))))))))) }

::std::data::Map::balance_right::6 { x(n0 x(tup(dup1168(n1 n2) n3) x(tup(dup1168(n4 @add(n5 @add(1 n6))) n7) x(n8 x(tup(_ tup(tup(dup1168(n9 n5) n10) tup(n11 tup(dup1168(n12 @add(n2 @add(1 n13))) n14)))) tup(tup(n6 tup(tup(n4 n7) tup(n8 tup(n9 n10)))) tup(n11 tup(n13 tup(tup(n12 n14) tup(n0 tup(n1 n3))))))))))) }

::std::data::Map::merge_balanced { fn(tup(dup1168(n0 ?(::std::data::Map::merge_balanced::3 ::std::data::Map::merge_balanced::2 x(tup(n0 n1) x(n2 n3)))) n1) fn(n2 n3)) }

::std::data::Map::merge_balanced::2 { x(n0 x(tup(dup1168(n1 ?(::std::data::Map::merge_balanced::5 ::std::data::Map::merge_balanced::4 x(n0 x(tup(n1 n2) n3)))) n2) n3)) }

::std::data::Map::merge_balanced::3 { x(_ x(tup(_ n0) n0)) }

::std::data::Map::merge_balanced::4 { x(tup(dup1168(n0 @lt$(n1 ?(::std::data::Map::merge_balanced::7 ::std::data::Map::merge_balanced::6 x(tup(n0 n2) x(tup(n3 n4) n5))))) n2) x(tup(dup1168(n3 n1) n4) n5)) }

::std::data::Map::merge_balanced::5 { x(tup(_ n0) x(_ n0)) }

::std::data::Map::merge_balanced::6 { x(tup(@sub(1 n0) tup(n1 tup(n2 tup(dup1168(n3 ?(::std::data::Map::_remove_max::3 ::std::data::Map::_remove_max::2 x(x(tup(n4 tup(n5 n6)) n7) x(x(n1 n4) x(x(n2 n5) x(x(tup(n3 n8) n6) n9)))))) n8)))) x(n10 tup(tup(n0 n7) tup(n9 n10)))) }

::std::data::Map::merge_balanced::7 { x(n0 x(tup(@sub(1 n1) tup(tup(dup1168(n2 ?(::std::data::Map::_remove_min::3 ::std::data::Map::_remove_min::2 x(x(tup(n3 tup(n4 n5)) n6) x(x(tup(n2 n7) n3) x(x(n8 n4) x(x(n9 n5) n10)))))) n7) tup(n8 n9))) tup(n0 tup(n10 tup(n1 n6))))) }

::std::data::Map::is_balanced { fn(ref(tup(dup1440(n0 @mul$(3 @add(2 @le$(n1 n2)))) n3) tup(n0 n3)) fn(ref(tup(dup1441(n4 n1) n5) tup(n4 n5)) n2)) }

::std::data::Map::is_single { fn(ref(tup(dup1444(n0 @le(n1 n2)) n3) tup(n0 n3)) fn(ref(tup(dup1445(n4 @mul$(2 n1)) n5) tup(n4 n5)) n2)) }

::std::data::Map::size { fn(ref(tup(tup(dup1448(n0 @add(n1 @add(1 n2))) n3) tup(n4 tup(dup1449(n5 n1) n6))) tup(tup(n0 n3) tup(n4 tup(n5 n6)))) n2) }

::std::numeric::N64::from_n32 { fn(n0 tup(n0 0)) }

::std::numeric::N64::or { fn(tup(@n32_or(n0 n1) @n32_or(n2 n3)) fn(tup(n0 n2) tup(n1 n3))) }

::std::numeric::N64::xor { fn(tup(@n32_xor(n0 n1) @n32_xor(n2 n3)) fn(tup(n0 n2) tup(n1 n3))) }

::std::rng::Pcg32::new { fn(tup(dup(@add(n0 dup(@mul(1284865837 dup(@add(n1 n2) @n32_add_high(n3 n4))) dup(@n32_mul_high(1284865837 n5) @mul(1481765933 @add(n6 @add(n5 @add(n7 @add(n4 n8)))))))) @n32_add_high(n9 n10)) @add(n11 @add(n10 @mul$(1284865837 n6)))) fn(tup(@n32_or(1 dup2156(dup(n0 n9) dup2156(dup(n1 n3) n12))) @n32_or(0 dup2156(n11 dup2156(n7 n13)))) tup(tup(n2 n8) tup(n12 n13)))) }

::std::rng::Pcg32::default { tup(tup(3505598835 1297702388) tup(4150755663 335903614)) }

::std::rng::Pcg32::multiplier { tup(1284865837 1481765933) }

::std::rng::Pcg32::gen_n32 { fn(ref(tup(dup2163(tup(@n32_shr(27 n0) dup2166(@n32_shr(13 @n32_xor(n1 @n32_xor(n0 @n32_rotr(n2 n3)))) dup2166(@n32_shl(5 n1) @n32_shr(27 n2)))) tup(dup(@mul(1284865837 dup(@add(n4 n5) @n32_add_high(n6 n7))) dup(@n32_mul_high(1284865837 n8) @mul(1481765933 @add(n9 @add(n8 @add(n10 @add(n7 n11))))))) @mul$(1284865837 n9))) dup2164(n12 tup(dup(n4 n6) n10))) tup(tup(n5 n11) n12)) n3) }

::std::rng::Pcg32::mix { fn(ref(tup(tup(@n32_xor(0 dup(@mul(1284865837 dup(@add(n0 n1) @n32_add_high(n2 n3))) dup(@n32_mul_high(1284865837 n4) @mul(1481765933 @add(n5 @add(n4 @add(n6 @add(n3 n7)))))))) @n32_xor(n8 @mul$(1284865837 n5))) dup2172(n9 tup(dup(n0 n2) n6))) tup(tup(n1 n7) n9)) fn(n8 _)) }

::std::rng::Pcg32::seeded { fn(dup2176(tup(dup718(?(::std::data::List::IntoIter::next::3 ::std::data::List::IntoIter::next::2 x(x(n0 n1) x(x(n2 n3) enum(::std::rng::Pcg32::seeded::4 enum(::std::rng::Pcg32::seeded::5 x(x(::std::rng::Pcg32::default n4) tup(n1 n3))))))) n0) tup(n2 _)) _) n4) }

::std::rng::Pcg32::seeded::1 { x(n0 tup(dup718(?(::std::data::List::IntoIter::next::3 ::std::data::List::IntoIter::next::2 x(x(n1 n2) x(x(n3 n4) enum(::std::rng::Pcg32::seeded::4 enum(::std::rng::Pcg32::seeded::5 x(n0 tup(n2 n4))))))) n1) n3)) }

::std::rng::Pcg32::seeded::4 { enum(n0 x(x(tup(tup(@n32_xor(0 dup(@mul(1284865837 dup(@add(n1 n2) @n32_add_high(n3 n4))) dup(@n32_mul_high(1284865837 n5) @mul(1481765933 @add(n6 @add(n5 @add(n7 @add(n4 n8)))))))) @n32_xor(n0 @mul$(1284865837 n6))) dup2172(n9 tup(dup(n1 n3) n7))) n10) tup(dup718(?(::std::data::List::IntoIter::next::3 ::std::data::List::IntoIter::next::2 x(x(n11 n12) x(x(n13 n14) enum(::std::rng::Pcg32::seeded::4 enum(::std::rng::Pcg32::seeded::5 x(x(tup(tup(n2 n8) n9) n10) tup(n12 n14))))))) n11) n13))) }

::std::rng::Pcg32::seeded::5 { x(x(n0 n0) _) }

::std::IO::println { fn(ref(n0 n1) fn(tup(dup2591(?(::std::IO::print::3 ::std::IO::print::2 x(x(n0 @io_print_char(10 n1)) x(n2 n3))) n2) tup(n3 _)) _)) }

::std::IO::print { fn(ref(n0 n1) fn(tup(dup2591(?(::std::IO::print::3 ::std::IO::print::2 x(x(n0 n1) x(n2 n3))) n2) tup(n3 _)) _)) }

::std::IO::print::1 { x(n0 x(dup2591(?(::std::IO::print::3 ::std::IO::print::2 x(n0 x(n1 n2))) n1) n2)) }

::std::IO::print::2 { x(x(@io_print_char(n0 n1) n2) x(@sub(1 dup2591(?(::std::IO::print::3 ::std::IO::print::2 x(x(n1 n2) x(n3 n4))) n3)) tup(n0 n4))) }

::std::IO::print::3 { x(x(n0 n0) _) }

