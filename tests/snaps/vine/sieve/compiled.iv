
::std::data::Array::Node::to_leaf { fn(n0 n0) }

::std::data::Array::Node::as_leaf { fn(n0 n0) }

::std::data::Array::Node::leaf { fn(n0 n0) }

::std::logical::Option::None { enum(_ enum(n0 n0)) }

::std::IO::print_char { fn(ref(@io_print_char(n0 n1) n1) fn(n0 _)) }

::main { ::sieve::main }

::sieve::main {
  fn(ref(w1 w13) _)
  100000 = @sub(2 w5)
  ::std::data::Array::new = fn(w5 fn(1 w6))
  ::sieve::main::1 = x(x(w1 w13) x(w6 2))
}

::sieve::main::1 {
  x(w8 x(w6 w5))
  ::std::data::Array::pop_front = fn(ref(w6 w1) enum(::sieve::main::4 enum(::sieve::main::5 x(w8 x(w1 w5)))))
}

::sieve::main::4 {
  enum(?(::sieve::main::8 ::sieve::main::7 x(x(w5 w18) x(x(w3 w16) x(w14 x(w6 _))))) x(x(w5 w22) x(w3 dup19(w6 @add(1 dup20(w14 w19))))))
  ::sieve::main::1 = x(x(w18 w22) x(w16 w19))
}

::sieve::main::5 { x(x(w3 w3) _) }

::sieve::main::7 {
  x(x(w16 w1) x(w14 x(w12 x(dup31(w3 dup31(@mul(w7 w8) dup31(w7 w18))) _))))
  ::std::numeric::N32::to_string::to_string = fn(w3 w4)
  ::std::IO::println = fn(ref(w16 w1) fn(w4 _))
  ::sieve::main::9 = x(w14 x(w12 x(w18 w8)))
}

::sieve::main::8 { x(x(w6 w6) x(x(w4 w4) _)) }

::sieve::main::9 { x(w6 x(w4 x(w3 dup40(@lt(100000 ?(::sieve::main::11 ::sieve::main::10 x(w6 x(w4 x(w3 w7))))) w7)))) }

::sieve::main::10 {
  x(x(w16 w21) x(dup44(w4 w19) x(dup45(w9 w18) dup46(@sub(w4 w5) @add(w9 w11)))))
  ::std::data::Array::get = fn(ref(w16 w1) fn(w5 ref(_ 0)))
  ::sieve::main::9 = x(x(w1 w21) x(w19 x(w18 w11)))
}

::sieve::main::11 { x(x(w4 w4) _) }

::std::numeric::N32::to_string::to_string { fn(dup49(?(::std::numeric::N32::to_string::to_string::3 ::std::numeric::N32::to_string::to_string::2 x(n0 n1)) n0) n1) }

::std::numeric::N32::to_string::to_string::2 { x(dup58(?(::std::numeric::N32::to_string::to_string::6 ::std::numeric::N32::to_string::to_string::5 x(n0 x(tup(0 tup(n1 n1)) n2))) n0) n2) }

::std::numeric::N32::to_string::to_string::3 { x(_ tup(1 tup(tup(48 n0) n0))) }

::std::numeric::N32::to_string::to_string::4 { x(dup58(?(::std::numeric::N32::to_string::to_string::6 ::std::numeric::N32::to_string::to_string::5 x(n0 n1)) n0) n1) }

::std::numeric::N32::to_string::to_string::5 { x(dup61(@rem(10 @add$(48 n0)) @div(10 dup58(?(::std::numeric::N32::to_string::to_string::6 ::std::numeric::N32::to_string::to_string::5 x(n1 x(tup(n2 tup(tup(n0 n3) n4)) n5))) n1))) x(tup(@add$(1 n2) tup(n3 n4)) n5)) }

::std::numeric::N32::to_string::to_string::6 { x(_ x(n0 n0)) }

::std::data::List::concat { fn(tup(@add(n0 n1) tup(n2 n3)) fn(tup(n0 tup(n3 n4)) tup(n1 tup(n2 n4)))) }

::std::data::Array::new { fn(dup380(n0 dup668(@eq(1 ?(::std::data::Array::Node::new::3 ::std::data::Array::Node::new::2 x(n1 x(n2 n3)))) n1)) fn(n2 tup(n0 n3))) }

::std::data::Array::get { fn(ref(tup(dup482(n0 dup492(@lt$(1 ?(::std::data::Array::get::3 ::std::data::Array::get::2 x(x(ref(n1 n2) n3) x(n4 n5)))) n5)) n1) tup(n0 n2)) fn(n4 n3)) }

::std::data::Array::get::1 { x(n0 x(n1 dup492(@lt$(1 ?(::std::data::Array::get::3 ::std::data::Array::get::2 x(n0 x(n1 n2)))) n2))) }

::std::data::Array::get::2 { x(x(ref(tup(n0 n1) tup(n2 n3)) n4) x(dup496(@rem(2 ?(::std::data::Array::Node::half::3 ::std::data::Array::Node::half::2 x(x(n0 n2) x(x(n1 n3) x(n5 tup(n6 dup492(@lt$(1 ?(::std::data::Array::get::3 ::std::data::Array::get::2 x(x(n6 n4) x(n7 n8)))) n8))))))) @div(2 n7)) n5)) }

::std::data::Array::get::3 { x(x(n0 n0) _) }

::std::data::Array::pop_front { fn(ref(tup(dup612(?(::std::data::Array::pop_front::3 ::std::data::Array::pop_front::2 x(x(n0 n1) x(ref(n2 n3) n4))) n0) n2) tup(n1 n3)) n4) }

::std::data::Array::pop_front::2 { x(x(dup617(@eq(1 ?(::std::data::Array::pop_front::5 ::std::data::Array::pop_front::4 x(x(n0 n1) n2))) n0) n1) n2) }

::std::data::Array::pop_front::3 { x(x(n0 n0) x(_ ::std::logical::Option::None)) }

::std::data::Array::pop_front::4 { x(x(_ 0) x(ref(n0 _) enum(enum(n0 n1) enum(_ n1)))) }

::std::data::Array::pop_front::5 { x(x(dup628(@add(1 @div(2 dup635(@eq(1 ?(::std::data::Array::pop_front::9 ::std::data::Array::pop_front::8 x(ref(n0 n1) x(n2 x(x(tup(n3 n1) n4) x(x(n5 n3) n6)))))) n2))) @sub(1 n7)) n7) x(ref(tup(n0 n5) n4) n6)) }

::std::data::Array::pop_front::6 { x(ref(tup(n0 n1) n2) x(@add(1 @div(2 dup635(@eq(1 ?(::std::data::Array::pop_front::9 ::std::data::Array::pop_front::8 x(ref(n0 n3) x(n4 x(x(tup(n5 n3) n2) x(x(n1 n5) n6)))))) n4))) n6)) }

::std::data::Array::pop_front::8 { x(ref(n0 _) x(_ x(x(_ n1) x(x(n1 _) enum(enum(n0 n2) enum(_ n2)))))) }

::std::data::Array::pop_front::9 { x(ref(tup(n0 n1) n2) x(@add(1 @div(2 dup635(@eq(1 ?(::std::data::Array::pop_front::9 ::std::data::Array::pop_front::8 x(ref(n0 n3) x(n4 x(x(tup(n5 n3) n2) x(x(n1 n5) n6)))))) n4))) x(x(n7 n7) x(x(n8 n8) n6)))) }

::std::data::Array::pop_front::10 { x(n0 n0) }

::std::data::Array::Node::new { fn(dup668(@eq(1 ?(::std::data::Array::Node::new::3 ::std::data::Array::Node::new::2 x(n0 x(n1 n2)))) n0) fn(n1 n2)) }

::std::data::Array::Node::new::2 { x(_ x(n0 n0)) }

::std::data::Array::Node::new::3 { x(dup675(@add(1 @div(2 dup668(@eq(1 ?(::std::data::Array::Node::new::3 ::std::data::Array::Node::new::2 x(n0 x(n1 n2)))) n0))) @div(2 dup668(@eq(1 ?(::std::data::Array::Node::new::3 ::std::data::Array::Node::new::2 x(n3 x(n4 n5)))) n3))) x(dup676(n1 n4) tup(n2 n5))) }

::std::data::Array::Node::half { fn(ref(tup(n0 n1) tup(n2 n3)) fn(n4 fn(?(::std::data::Array::Node::half::3 ::std::data::Array::Node::half::2 x(x(n0 n2) x(x(n1 n3) x(n4 n5)))) n5))) }

::std::data::Array::Node::half::2 { x(x(n0 n0) x(x(n1 n2) x(@div(2 n3) tup(ref(n1 n2) n3)))) }

::std::data::Array::Node::half::3 { x(x(n0 n1) x(x(n2 n2) x(@add(1 @div(2 n3)) tup(ref(n0 n1) n3)))) }

::std::IO::println { fn(ref(n0 n1) fn(tup(dup2223(?(::std::IO::print::3 ::std::IO::print::2 x(x(n0 @io_print_char(10 n1)) x(n2 n3))) n2) tup(n3 _)) _)) }

::std::IO::print { fn(ref(n0 n1) fn(tup(dup2223(?(::std::IO::print::3 ::std::IO::print::2 x(x(n0 n1) x(n2 n3))) n2) tup(n3 _)) _)) }

::std::IO::print::1 { x(n0 x(dup2223(?(::std::IO::print::3 ::std::IO::print::2 x(n0 x(n1 n2))) n1) n2)) }

::std::IO::print::2 { x(x(@io_print_char(n0 n1) n2) x(@sub(1 dup2223(?(::std::IO::print::3 ::std::IO::print::2 x(x(n1 n2) x(n3 n4))) n3)) tup(n0 n4))) }

::std::IO::print::3 { x(x(n0 n0) _) }

