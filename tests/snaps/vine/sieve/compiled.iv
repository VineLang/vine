
::main { ::sieve::main }

::sieve::main {
  fn(ref(w3 w14) _)
  100000 = @sub(2 w7)
  ::std::array::Array::new = fn(w7 fn(1 w8))
  ::sieve::main::2 = x(x(w3 w14) x(w8 2))
}

::sieve::main::2 {
  x(w8 x(w6 w5))
  ::std::array::Array::pop_front = fn(ref(w6 w1) enum(::sieve::main::5 enum(::sieve::main::6 x(w8 x(w1 w5)))))
}

::sieve::main::5 {
  enum(?(::sieve::main::9 ::sieve::main::8 x(x(w5 w18) x(x(w3 w16) x(w14 x(w6 _))))) x(x(w5 w22) x(w3 dup20(w6 @add(1 dup21(w14 w19))))))
  ::sieve::main::2 = x(x(w18 w22) x(w16 w19))
}

::sieve::main::6 { x(x(w3 w3) _) }

::sieve::main::8 {
  x(x(w16 w1) x(w14 x(w12 x(dup32(w3 dup32(@mul(w7 w8) dup32(w7 w18))) _))))
  ::std::n32::N32::to_string = fn(w3 w4)
  ::std::io::IO::println = fn(ref(w16 w1) fn(w4 _))
  ::sieve::main::10 = x(w14 x(w12 x(w18 w8)))
}

::sieve::main::9 { x(x(w6 w6) x(x(w4 w4) _)) }

::sieve::main::10 { x(w6 x(w4 x(w3 dup42(@lt(100000 ?(::sieve::main::12 ::sieve::main::11 x(w6 x(w4 x(w3 w7))))) w7)))) }

::sieve::main::11 {
  x(x(w16 w21) x(dup46(w4 w19) x(dup47(w9 w18) dup48(@sub(w4 w5) @add(w9 w11)))))
  ::std::array::Array::get = fn(ref(w16 w1) fn(w5 ref(_ 0)))
  ::sieve::main::10 = x(x(w1 w21) x(w19 x(w18 w11)))
}

::sieve::main::12 { x(x(w4 w4) _) }

::std::array::Array::new {
  fn(dup56(w6 w7) fn(w3 tup(w6 w9)))
  ::std::array::Node::new = fn(w7 fn(w3 w9))
}

::std::array::Array::get {
  fn(ref(tup(dup166(w2 w13) w5) tup(w2 w6)) fn(w10 w19))
  ::std::array::Array::get::2 = x(x(ref(w5 w6) w16) x(w10 w13))
  ::std::array::Node::as_leaf = fn(w16 w19)
}

::std::array::Array::get::2 { x(w5 x(w3 dup177(@lt$(1 ?(::std::array::Array::get::4 ::std::array::Array::get::3 x(w5 x(w3 w6)))) w6))) }

::std::array::Array::get::3 {
  x(x(w13 w17) x(dup181(@rem(2 w3) @div(2 w9)) w10))
  ::std::array::Node::half = fn(w13 fn(w10 fn(w3 tup(w5 w6))))
  ::std::array::Array::get::2 = x(x(w5 w17) x(w9 w6))
}

::std::array::Array::get::4 { x(x(w3 w3) _) }

::std::array::Array::pop_front { fn(ref(tup(dup302(?(::std::array::Array::pop_front::4 ::std::array::Array::pop_front::3 x(x(w16 w17) x(ref(w5 w6) w14))) w16) w5) tup(w17 w6)) w14) }

::std::array::Array::pop_front::3 { x(x(dup308(@eq(1 ?(::std::array::Array::pop_front::7 ::std::array::Array::pop_front::6 x(x(w9 w10) w2))) w9) w10) w2) }

::std::array::Array::pop_front::4 {
  x(x(w3 w3) x(_ w5))
  ::std::array::Array::pop_front::12 = x(w5 ::std::option::Option::None)
}

::std::array::Array::pop_front::6 {
  x(x(_ 0) x(ref(w2 _) w12))
  ::std::array::Node::to_leaf = fn(w2 w4)
  ::std::option::Option::Some = fn(w4 w5)
  ::std::array::Array::pop_front::12 = x(w12 w5)
}

::std::array::Array::pop_front::7 {
  x(x(dup320(w0 @sub(1 w3)) w3) x(w6 w9))
  ::std::array::Array::pop_front::8 = x(w6 x(w0 w9))
}

::std::array::Array::pop_front::8 {
  x(ref(w2 w38) x(@add(1 @div(2 dup327(@eq(1 ?(::std::array::Array::pop_front::11 ::std::array::Array::pop_front::10 x(ref(w18 w21) x(w39 x(x(w5 w38) x(x(w17 w36) w34)))))) w39))) w34))
  ref(w2 w5) = ref(tup(w8 w10) tup(w36 w21))
  tup(w10 w8) = tup(w17 w18)
}

::std::array::Array::pop_front::10 {
  x(ref(w1 _) x(_ x(x(_ w12) x(x(w12 _) w9))))
  ::std::array::Node::to_leaf = fn(w1 w3)
  ::std::option::Option::Some = fn(w3 w9)
}

::std::array::Array::pop_front::11 {
  x(w6 x(w5 x(x(w4 w4) x(x(w2 w2) w36))))
  ::std::array::Array::pop_front::8 = x(w6 x(w5 w36))
}

::std::array::Array::pop_front::12 { x(w11 w11) }

::std::array::Node::to_leaf { fn(x x) }

::std::array::Node::as_leaf { fn(x x) }

::std::array::Node::leaf { fn(x x) }

::std::array::Node::new { fn(dup363(@eq(1 ?(::std::array::Node::new::4 ::std::array::Node::new::3 x(w11 x(w3 w9)))) w11) fn(w3 w9)) }

::std::array::Node::new::3 {
  x(_ x(w3 w1))
  ::std::array::Node::leaf = fn(w3 w1)
}

::std::array::Node::new::4 {
  x(dup371(@add(1 @div(2 w2)) @div(2 w6)) x(dup372(w3 w7) tup(w4 w8)))
  ::std::array::Node::new = fn(w2 fn(w3 w4))
  ::std::array::Node::new = fn(w6 fn(w7 w8))
}

::std::array::Node::half { fn(ref(tup(w3 w5) tup(w20 w18)) fn(w9 fn(?(::std::array::Node::half::4 ::std::array::Node::half::3 x(x(w3 w20) x(x(w5 w18) x(w9 w15)))) w15))) }

::std::array::Node::half::3 { x(x(w11 w11) x(x(w9 w1) x(@div(2 w4) tup(ref(w9 w1) w4)))) }

::std::array::Node::half::4 { x(x(w12 w1) x(x(w10 w10) x(@add(1 @div(2 w5)) tup(ref(w12 w1) w5)))) }

::std::io::IO::println {
  fn(ref(w3 w14) fn(w5 _))
  ::std::io::IO::print = fn(ref(w3 w9) fn(w5 _))
  ::std::io::IO::print_char = fn(ref(w9 w14) fn(10 _))
}

::std::io::IO::print {
  fn(ref(w3 w15) fn(tup(w9 tup(w10 _)) _))
  ::std::io::IO::print::2 = x(x(w3 w15) x(w9 w10))
}

::std::io::IO::print::2 { x(w4 x(dup519(?(::std::io::IO::print::4 ::std::io::IO::print::3 x(w4 x(w6 w1))) w6) w1)) }

::std::io::IO::print::3 {
  x(x(w17 w21) x(@sub(1 w1) tup(w4 w5)))
  ::std::io::IO::print_char = fn(ref(w17 w10) fn(w4 _))
  ::std::io::IO::print::2 = x(x(w10 w21) x(w1 w5))
}

::std::io::IO::print::4 { x(x(w3 w3) _) }

::std::io::IO::print_char { fn(ref(@io_print_char(char io) io) fn(char _)) }

::std::list::List::concat { fn(tup(@add(w12 w20) tup(w8 w13)) fn(tup(w12 tup(w13 w23)) tup(w20 tup(w8 w23)))) }

::std::n32::N32::to_string { fn(dup2212(?(::std::n32::N32::to_string::4 ::std::n32::N32::to_string::3 x(w8 w7)) w8) w7) }

::std::n32::N32::to_string::3 {
  x(w4 w7)
  ::std::n32::N32::to_string::5 = x(w4 x(tup(0 tup(w5 w5)) w7))
}

::std::n32::N32::to_string::4 { x(_ tup(1 tup(tup(48 w3) w3))) }

::std::n32::N32::to_string::5 { x(dup2222(?(::std::n32::N32::to_string::7 ::std::n32::N32::to_string::6 x(w6 w2)) w6) w2) }

::std::n32::N32::to_string::6 {
  x(dup2225(@rem(10 w1) @div(10 w8)) x(w11 w15))
  48 = @add(w1 w2)
  ::std::list::List::concat = fn(tup(1 tup(tup(w2 w13) w13)) fn(w11 w5))
  ::std::n32::N32::to_string::5 = x(w8 x(w5 w15))
}

::std::n32::N32::to_string::7 { x(_ x(w1 w1)) }

::std::option::Option::Some { fn(f0 enum(enum(f0 r) enum(_ r))) }

::std::option::Option::None { enum(_ enum(r r)) }

